/*
 * mainSemTimeBound.c
 *
 *  Created on: Oct 1, 2025
 *      Author: dangm
 */

#include "main.h"
#include "../__Driver_Layer/GPIO/My_Gpio.h"
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>


#define STACK_SIZE		128
#define USE_FULL_ASSERT

// Private function prototype
void SystemClock_Config();
static void MX_GPIO_Init();
void Error_Handler();


void GreenTaskA(void *argument);
void TaskB(void *argument);
static void GreenBlink(void);
static void BlueTripleBlink(void);

int main(void)
{
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();

	if(xTaskCreate(GreenTaskA, "GreenTaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) != pdPASS)
	{
		// printf error when create GreenTaskA via SEGGER_SYSVIEW
		while(1)
		{

		}
	}

	assert_param(xTaskCreate(TaskB, "TaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);

	while(1)
	{

	}
}

void SystemClock_Config()
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState       		= RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue 	= RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState 			= RCC_PLL_NONE;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
	{
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_SYSCLK
								| RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_SYSCLK_DIV1;
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) == HAL_OK)
	{
		Error_Handler();
	}
}

static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

	GPIO_InitStruct.Pin   = GPIO_PIN_13;
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	GPIO_InitStruct.Pin   = GPIO_PIN_1 | GPIO_PIN_2;
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void Error_Handler(void)
{
	__disable_irq();
	// printf Error_Handle via UART to debug
	while(1)
	{

	}
}
#ifdef USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

  /* SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
	 on line %d\r\n", file, line); */

	 while(1);
}

#endif /* USE_FULL_ASSERT */
