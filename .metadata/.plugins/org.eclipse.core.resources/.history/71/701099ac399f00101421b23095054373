/*
 * mainSemPriorityInversion.c
 *
 *  Created on: Oct 2, 2025
 *      Author: dangm
 */

#include <FreeRTOS.h>
#include <semphr.h>
#include "main.h"
#include "../__Driver_Layer/GPIO/My_Gpio.h"

#define STACK_SIZE		128


// Private function to initialize config for STM operation
static void SystemClock_Config();
static void MX_GPIO_Init();
void Error_Handler(void);


static void BlinkTwice(LED_t* led);
static void loopBusy(uint32_t numIteration);

void TaskA(void *argument);
void TaskB(void *argument);
void TaskC(void *argument);

SemaphoreHandle_t SemPtr = NULL;

int main(void)
{

	SemPtr = xSemaphoreCreateBinary();
	assert_param(SemPtr != NULL);

	if(xTaskCreate(TaskA, "TaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) != pdPASS)
	{
		// Printf via SEGGER or UART to notice TaskCreate failed
		while(1)
		{

		}
	}

	assert_param(xTaskCreate(TaskB, "TaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
	assert_param(xTaskCreate(TaskC, "TaskC", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);

	vTaskStartScheduler();
	while(1)
	{

	}
}

void TaskA(void *argument)
{

}

void TaskB(void *argument)
{

}

void taskC(void *argument)
{

}

static void BlinkTwice(LED_t *led)
{

}

static void loopBusy(uint32_t numIteration)
{

}

static void SystemClock_Config(void)
{

}

static void MX_GPIO_Init(void)
{

}

void Error_Handler(void)
{

}

void assert_failed(uint8_t *file, uint32_t line)
{

}
