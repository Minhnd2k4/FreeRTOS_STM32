
Task_Creatio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b54  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb4  08003cb4  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003cb4  08003cb4  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003cb4  08003cb4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cb8  08003cb8  00004cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003cbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dcc  20000010  08003ccc  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ddc  08003ccc  00005ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c994  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002694  00000000  00000000  000119cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00014068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  00014cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000263d  00000000  00000000  0001561b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de3c  00000000  00000000  00017c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008904b  00000000  00000000  00025a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aeadf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003130  00000000  00000000  000aeb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b1c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c4c 	.word	0x08003c4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003c4c 	.word	0x08003c4c

08000150 <GreenTask>:
void BlueTask(void *argument);
void LookBusy(void);

TaskHandle_t Blue_Task_Handle;

void GreenTask(void *argument) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	/* SEGGER_SYSVIEW_PrintfHost("Task1 running \
								   while Green LED is on\n");*/


	GreenLed_On();
 8000158:	f000 f9ca 	bl	80004f0 <GreenLed_On>
	vTaskDelay(1500 / portTICK_PERIOD_MS);
 800015c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000160:	f002 f8a2 	bl	80022a8 <vTaskDelay>
	GreenLed_Off();
 8000164:	f000 f9ce 	bl	8000504 <GreenLed_Off>
	// Delete this task
	vTaskDelete(NULL);
 8000168:	2000      	movs	r0, #0
 800016a:	f002 f829 	bl	80021c0 <vTaskDelete>
	// Task never get's here
	GreenLed_On();
 800016e:	f000 f9bf 	bl	80004f0 <GreenLed_On>

}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
	...

0800017c <RedTask>:
		BlueLed_Off();
		vTaskDelay(200 / portTICK_PERIOD_MS);
	}
}

void RedTask(void *argument) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	uint8_t First_Run = 1;
 8000184:	2301      	movs	r3, #1
 8000186:	73fb      	strb	r3, [r7, #15]
	while(1) {
		LookBusy();
 8000188:	f000 f81a 	bl	80001c0 <LookBusy>

	//	SEGGER_SYSVIEW_PrintfHost("RedTaskRunning\n");

		RedLed_On();
 800018c:	f000 f9c4 	bl	8000518 <RedLed_On>
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8000190:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000194:	f002 f888 	bl	80022a8 <vTaskDelay>
		RedLed_Off();
 8000198:	f000 f9c8 	bl	800052c <RedLed_Off>
		vTaskDelay(500 / portTICK_PERIOD_MS);
 800019c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001a0:	f002 f882 	bl	80022a8 <vTaskDelay>

		if(First_Run == 1) {
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d1ee      	bne.n	8000188 <RedTask+0xc>
			vTaskDelete(Blue_Task_Handle);
 80001aa:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <RedTask+0x40>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 f806 	bl	80021c0 <vTaskDelete>
			First_Run = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
		LookBusy();
 80001b8:	e7e6      	b.n	8000188 <RedTask+0xc>
 80001ba:	bf00      	nop
 80001bc:	20000488 	.word	0x20000488

080001c0 <LookBusy>:
		}
	}
}

void LookBusy(void) {
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
	volatile uint32_t dontCare = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 50E3; i++)
 80001ca:	2300      	movs	r3, #0
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e00b      	b.n	80001e8 <LookBusy+0x28>
		{
			dontCare = i % 4;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	425a      	negs	r2, r3
 80001d4:	f003 0303 	and.w	r3, r3, #3
 80001d8:	f002 0203 	and.w	r2, r2, #3
 80001dc:	bf58      	it	pl
 80001de:	4253      	negpl	r3, r2
 80001e0:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 50E3; i++)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	3301      	adds	r3, #1
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80001ee:	4293      	cmp	r3, r2
 80001f0:	ddee      	ble.n	80001d0 <LookBusy+0x10>
		}
	//	SEGGER_SYSVIEW_PrintfHost("looking busy %d\n", dontCare);
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
	...

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f000 f99b 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f82f 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 f869 	bl	80002e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  if(xTaskCreate(GreenTask, "GreenTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) != pdPASS) {
 8000212:	2300      	movs	r3, #0
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2302      	movs	r3, #2
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2300      	movs	r3, #0
 800021c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000220:	490c      	ldr	r1, [pc, #48]	@ (8000254 <main+0x54>)
 8000222:	480d      	ldr	r0, [pc, #52]	@ (8000258 <main+0x58>)
 8000224:	f001 fe86 	bl	8001f34 <xTaskCreate>
 8000228:	4603      	mov	r3, r0
 800022a:	2b01      	cmp	r3, #1
 800022c:	d001      	beq.n	8000232 <main+0x32>
	  while(1) {
 800022e:	bf00      	nop
 8000230:	e7fd      	b.n	800022e <main+0x2e>
	  }
  }

  assert_param(xTaskCreate(BlueTask, "BlueTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &Blue_Task_Handle) == pdPASS);

  xTaskCreateStatic(RedTask, "RedTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, RedTaskStack, &RedTaskTCB);
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <main+0x5c>)
 8000234:	9302      	str	r3, [sp, #8]
 8000236:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <main+0x60>)
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2301      	movs	r3, #1
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2300      	movs	r3, #0
 8000240:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000244:	4907      	ldr	r1, [pc, #28]	@ (8000264 <main+0x64>)
 8000246:	4808      	ldr	r0, [pc, #32]	@ (8000268 <main+0x68>)
 8000248:	f001 fe14 	bl	8001e74 <xTaskCreateStatic>

  vTaskStartScheduler();
 800024c:	f002 f862 	bl	8002314 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	bf00      	nop
 8000252:	e7fd      	b.n	8000250 <main+0x50>
 8000254:	08003c64 	.word	0x08003c64
 8000258:	08000151 	.word	0x08000151
 800025c:	2000042c 	.word	0x2000042c
 8000260:	2000002c 	.word	0x2000002c
 8000264:	08003c70 	.word	0x08003c70
 8000268:	0800017d 	.word	0x0800017d

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fcac 	bl	8003bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fc2e 	bl	8000b04 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ae:	f000 f86d 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fe9c 	bl	8001008 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f859 	bl	800038c <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	@ 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <MX_GPIO_Init+0x9c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a20      	ldr	r2, [pc, #128]	@ (8000380 <MX_GPIO_Init+0x9c>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1e      	ldr	r3, [pc, #120]	@ (8000380 <MX_GPIO_Init+0x9c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b1b      	ldr	r3, [pc, #108]	@ (8000380 <MX_GPIO_Init+0x9c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1a      	ldr	r2, [pc, #104]	@ (8000380 <MX_GPIO_Init+0x9c>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <MX_GPIO_Init+0x9c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800032e:	4815      	ldr	r0, [pc, #84]	@ (8000384 <MX_GPIO_Init+0xa0>)
 8000330:	f000 fbd0 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2106      	movs	r1, #6
 8000338:	4813      	ldr	r0, [pc, #76]	@ (8000388 <MX_GPIO_Init+0xa4>)
 800033a:	f000 fbcb 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800033e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	4619      	mov	r1, r3
 8000356:	480b      	ldr	r0, [pc, #44]	@ (8000384 <MX_GPIO_Init+0xa0>)
 8000358:	f000 fa38 	bl	80007cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800035c:	2306      	movs	r3, #6
 800035e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2302      	movs	r3, #2
 800036a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	4619      	mov	r1, r3
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_GPIO_Init+0xa4>)
 8000374:	f000 fa2a 	bl	80007cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000378:	bf00      	nop
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	40011000 	.word	0x40011000
 8000388:	40010800 	.word	0x40010800

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <Error_Handler+0x8>

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <HAL_MspInit+0x68>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <HAL_MspInit+0x68>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <HAL_MspInit+0x68>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <HAL_MspInit+0x68>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a11      	ldr	r2, [pc, #68]	@ (8000400 <HAL_MspInit+0x68>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <HAL_MspInit+0x68>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	210f      	movs	r1, #15
 80003d2:	f06f 0001 	mvn.w	r0, #1
 80003d6:	f000 f9d0 	bl	800077a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003da:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <HAL_MspInit+0x6c>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	4a04      	ldr	r2, [pc, #16]	@ (8000404 <HAL_MspInit+0x6c>)
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40010000 	.word	0x40010000

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000440:	f000 f8c4 	bl	80005cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000444:	f002 fbb2 	bl	8002bac <xTaskGetSchedulerState>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	d001      	beq.n	8000452 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800044e:	f003 f953 	bl	80036f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}

08000456 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
	...

08000464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000464:	f7ff fff7 	bl	8000456 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480b      	ldr	r0, [pc, #44]	@ (8000498 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800046a:	490c      	ldr	r1, [pc, #48]	@ (800049c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800046c:	4a0c      	ldr	r2, [pc, #48]	@ (80004a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a09      	ldr	r2, [pc, #36]	@ (80004a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000480:	4c09      	ldr	r4, [pc, #36]	@ (80004a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800048e:	f003 fbab 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff feb5 	bl	8000200 <main>
  bx lr
 8000496:	4770      	bx	lr
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004a0:	08003cbc 	.word	0x08003cbc
  ldr r2, =_sbss
 80004a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004a8:	20001ddc 	.word	0x20001ddc

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>

080004ae <Set_Pin>:
 *  Created on: Sep 30, 2025
 *      Author: dangm
 */
#include "Gpio_Config.h"

void Set_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80004ba:	887b      	ldrh	r3, [r7, #2]
 80004bc:	2201      	movs	r2, #1
 80004be:	4619      	mov	r1, r3
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f000 fb07 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <Reset_Pin>:

void Reset_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80004da:	887b      	ldrh	r3, [r7, #2]
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f000 faf7 	bl	8000ad4 <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <GreenLed_On>:
 *      Author: dangm
 */

#include "My_Gpio.h"

void GreenLed_On(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 80004f4:	2102      	movs	r1, #2
 80004f6:	4802      	ldr	r0, [pc, #8]	@ (8000500 <GreenLed_On+0x10>)
 80004f8:	f7ff ffd9 	bl	80004ae <Set_Pin>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800

08000504 <GreenLed_Off>:

void GreenLed_Off(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 8000508:	2102      	movs	r1, #2
 800050a:	4802      	ldr	r0, [pc, #8]	@ (8000514 <GreenLed_Off+0x10>)
 800050c:	f7ff ffdf 	bl	80004ce <Reset_Pin>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010800 	.word	0x40010800

08000518 <RedLed_On>:

void RedLed_On(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_RED, GPIO_LED_RED);
 800051c:	2104      	movs	r1, #4
 800051e:	4802      	ldr	r0, [pc, #8]	@ (8000528 <RedLed_On+0x10>)
 8000520:	f7ff ffc5 	bl	80004ae <Set_Pin>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010800 	.word	0x40010800

0800052c <RedLed_Off>:

void RedLed_Off(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_RED, GPIO_LED_RED);
 8000530:	2104      	movs	r1, #4
 8000532:	4802      	ldr	r0, [pc, #8]	@ (800053c <RedLed_Off+0x10>)
 8000534:	f7ff ffcb 	bl	80004ce <Reset_Pin>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40010800 	.word	0x40010800

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f907 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff ff1c 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f911 	bl	80007b2 <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 f8e7 	bl	800077a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	@ (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000048c 	.word	0x2000048c

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	@ (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	2000048c 	.word	0x2000048c

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	@ (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	@ 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	@ 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff90 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff49 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff5e 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffb0 	bl	8000720 <SysTick_Config>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b08b      	sub	sp, #44	@ 0x2c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e169      	b.n	8000ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007e0:	2201      	movs	r2, #1
 80007e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	4013      	ands	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f040 8158 	bne.w	8000aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a9a      	ldr	r2, [pc, #616]	@ (8000a6c <HAL_GPIO_Init+0x2a0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d05e      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000808:	4a98      	ldr	r2, [pc, #608]	@ (8000a6c <HAL_GPIO_Init+0x2a0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d875      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800080e:	4a98      	ldr	r2, [pc, #608]	@ (8000a70 <HAL_GPIO_Init+0x2a4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d058      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000814:	4a96      	ldr	r2, [pc, #600]	@ (8000a70 <HAL_GPIO_Init+0x2a4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d86f      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800081a:	4a96      	ldr	r2, [pc, #600]	@ (8000a74 <HAL_GPIO_Init+0x2a8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d052      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000820:	4a94      	ldr	r2, [pc, #592]	@ (8000a74 <HAL_GPIO_Init+0x2a8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d869      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000826:	4a94      	ldr	r2, [pc, #592]	@ (8000a78 <HAL_GPIO_Init+0x2ac>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d04c      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 800082c:	4a92      	ldr	r2, [pc, #584]	@ (8000a78 <HAL_GPIO_Init+0x2ac>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d863      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000832:	4a92      	ldr	r2, [pc, #584]	@ (8000a7c <HAL_GPIO_Init+0x2b0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d046      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000838:	4a90      	ldr	r2, [pc, #576]	@ (8000a7c <HAL_GPIO_Init+0x2b0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d85d      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800083e:	2b12      	cmp	r3, #18
 8000840:	d82a      	bhi.n	8000898 <HAL_GPIO_Init+0xcc>
 8000842:	2b12      	cmp	r3, #18
 8000844:	d859      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000846:	a201      	add	r2, pc, #4	@ (adr r2, 800084c <HAL_GPIO_Init+0x80>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	080008c7 	.word	0x080008c7
 8000850:	080008a1 	.word	0x080008a1
 8000854:	080008b3 	.word	0x080008b3
 8000858:	080008f5 	.word	0x080008f5
 800085c:	080008fb 	.word	0x080008fb
 8000860:	080008fb 	.word	0x080008fb
 8000864:	080008fb 	.word	0x080008fb
 8000868:	080008fb 	.word	0x080008fb
 800086c:	080008fb 	.word	0x080008fb
 8000870:	080008fb 	.word	0x080008fb
 8000874:	080008fb 	.word	0x080008fb
 8000878:	080008fb 	.word	0x080008fb
 800087c:	080008fb 	.word	0x080008fb
 8000880:	080008fb 	.word	0x080008fb
 8000884:	080008fb 	.word	0x080008fb
 8000888:	080008fb 	.word	0x080008fb
 800088c:	080008fb 	.word	0x080008fb
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008bd 	.word	0x080008bd
 8000898:	4a79      	ldr	r2, [pc, #484]	@ (8000a80 <HAL_GPIO_Init+0x2b4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d013      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089e:	e02c      	b.n	80008fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e029      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e024      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	3308      	adds	r3, #8
 80008b8:	623b      	str	r3, [r7, #32]
          break;
 80008ba:	e01f      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	330c      	adds	r3, #12
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	e01a      	b.n	80008fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ce:	2304      	movs	r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e013      	b.n	80008fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008dc:	2308      	movs	r3, #8
 80008de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	611a      	str	r2, [r3, #16]
          break;
 80008e6:	e009      	b.n	80008fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e8:	2308      	movs	r3, #8
 80008ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	615a      	str	r2, [r3, #20]
          break;
 80008f2:	e003      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	e000      	b.n	80008fc <HAL_GPIO_Init+0x130>
          break;
 80008fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d801      	bhi.n	8000906 <HAL_GPIO_Init+0x13a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	e001      	b.n	800090a <HAL_GPIO_Init+0x13e>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3304      	adds	r3, #4
 800090a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	2bff      	cmp	r3, #255	@ 0xff
 8000910:	d802      	bhi.n	8000918 <HAL_GPIO_Init+0x14c>
 8000912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	e002      	b.n	800091e <HAL_GPIO_Init+0x152>
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	3b08      	subs	r3, #8
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	210f      	movs	r1, #15
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	401a      	ands	r2, r3
 8000930:	6a39      	ldr	r1, [r7, #32]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	431a      	orrs	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 80b1 	beq.w	8000aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <HAL_GPIO_Init+0x2b8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a4c      	ldr	r2, [pc, #304]	@ (8000a84 <HAL_GPIO_Init+0x2b8>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b4a      	ldr	r3, [pc, #296]	@ (8000a84 <HAL_GPIO_Init+0x2b8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000964:	4a48      	ldr	r2, [pc, #288]	@ (8000a88 <HAL_GPIO_Init+0x2bc>)
 8000966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	3302      	adds	r3, #2
 800096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	220f      	movs	r2, #15
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <HAL_GPIO_Init+0x2c0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d013      	beq.n	80009b8 <HAL_GPIO_Init+0x1ec>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a3f      	ldr	r2, [pc, #252]	@ (8000a90 <HAL_GPIO_Init+0x2c4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d00d      	beq.n	80009b4 <HAL_GPIO_Init+0x1e8>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <HAL_GPIO_Init+0x2c8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x1e4>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a3d      	ldr	r2, [pc, #244]	@ (8000a98 <HAL_GPIO_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_Init+0x1e0>
 80009a8:	2303      	movs	r3, #3
 80009aa:	e006      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009ac:	2304      	movs	r3, #4
 80009ae:	e004      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e002      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b8:	2300      	movs	r3, #0
 80009ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009bc:	f002 0203 	and.w	r2, r2, #3
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	4093      	lsls	r3, r2
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ca:	492f      	ldr	r1, [pc, #188]	@ (8000a88 <HAL_GPIO_Init+0x2bc>)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3302      	adds	r3, #2
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009e4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	492c      	ldr	r1, [pc, #176]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	608b      	str	r3, [r1, #8]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009f2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4928      	ldr	r1, [pc, #160]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a0c:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	4922      	ldr	r1, [pc, #136]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60cb      	str	r3, [r1, #12]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	491e      	ldr	r1, [pc, #120]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	4918      	ldr	r1, [pc, #96]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	604b      	str	r3, [r1, #4]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4914      	ldr	r1, [pc, #80]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d021      	beq.n	8000aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	490e      	ldr	r1, [pc, #56]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
 8000a68:	e021      	b.n	8000aae <HAL_GPIO_Init+0x2e2>
 8000a6a:	bf00      	nop
 8000a6c:	10320000 	.word	0x10320000
 8000a70:	10310000 	.word	0x10310000
 8000a74:	10220000 	.word	0x10220000
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	10120000 	.word	0x10120000
 8000a80:	10110000 	.word	0x10110000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40011400 	.word	0x40011400
 8000a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <HAL_GPIO_Init+0x304>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4909      	ldr	r1, [pc, #36]	@ (8000ad0 <HAL_GPIO_Init+0x304>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f ae8e 	bne.w	80007e0 <HAL_GPIO_Init+0x14>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	372c      	adds	r7, #44	@ 0x2c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e272      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8087 	beq.w	8000c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b24:	4b92      	ldr	r3, [pc, #584]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d00c      	beq.n	8000b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b30:	4b8f      	ldr	r3, [pc, #572]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d112      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
 8000b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b48:	d10b      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4a:	4b89      	ldr	r3, [pc, #548]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d06c      	beq.n	8000c30 <HAL_RCC_OscConfig+0x12c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d168      	bne.n	8000c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e24c      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b6a:	d106      	bne.n	8000b7a <HAL_RCC_OscConfig+0x76>
 8000b6c:	4b80      	ldr	r3, [pc, #512]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a7f      	ldr	r2, [pc, #508]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e02e      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x98>
 8000b82:	4b7b      	ldr	r3, [pc, #492]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a7a      	ldr	r2, [pc, #488]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b78      	ldr	r3, [pc, #480]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a77      	ldr	r2, [pc, #476]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e01d      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xbc>
 8000ba6:	4b72      	ldr	r3, [pc, #456]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a71      	ldr	r2, [pc, #452]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b68      	ldr	r3, [pc, #416]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a67      	ldr	r2, [pc, #412]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d013      	beq.n	8000c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fd06 	bl	80005f0 <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fd02 	bl	80005f0 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b64      	cmp	r3, #100	@ 0x64
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e200      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f0      	beq.n	8000be8 <HAL_RCC_OscConfig+0xe4>
 8000c06:	e014      	b.n	8000c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fcf2 	bl	80005f0 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fcee 	bl	80005f0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	@ 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e1ec      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c22:	4b53      	ldr	r3, [pc, #332]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f0      	bne.n	8000c10 <HAL_RCC_OscConfig+0x10c>
 8000c2e:	e000      	b.n	8000c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d063      	beq.n	8000d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c4a:	4b49      	ldr	r3, [pc, #292]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d11c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x18c>
 8000c56:	4b46      	ldr	r3, [pc, #280]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d116      	bne.n	8000c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_OscConfig+0x176>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e1c0      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4939      	ldr	r1, [pc, #228]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	e03a      	b.n	8000d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d020      	beq.n	8000cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c98:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <HAL_RCC_OscConfig+0x270>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fca7 	bl	80005f0 <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fca3 	bl	80005f0 <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e1a1      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4927      	ldr	r1, [pc, #156]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc86 	bl	80005f0 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fc82 	bl	80005f0 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e180      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d03a      	beq.n	8000d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d019      	beq.n	8000d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d20:	f7ff fc66 	bl	80005f0 <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d28:	f7ff fc62 	bl	80005f0 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e160      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fa9c 	bl	8001284 <RCC_Delay>
 8000d4c:	e01c      	b.n	8000d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff fc4c 	bl	80005f0 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5a:	e00f      	b.n	8000d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc48 	bl	80005f0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d908      	bls.n	8000d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e146      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	42420000 	.word	0x42420000
 8000d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7c:	4b92      	ldr	r3, [pc, #584]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e9      	bne.n	8000d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80a6 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10d      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b88      	ldr	r3, [pc, #544]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a87      	ldr	r2, [pc, #540]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b85      	ldr	r3, [pc, #532]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc2:	4b82      	ldr	r3, [pc, #520]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d118      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dce:	4b7f      	ldr	r3, [pc, #508]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fc09 	bl	80005f0 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de2:	f7ff fc05 	bl	80005f0 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b64      	cmp	r3, #100	@ 0x64
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e103      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4b75      	ldr	r3, [pc, #468]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <HAL_RCC_OscConfig+0x312>
 8000e08:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e02d      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x334>
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a69      	ldr	r2, [pc, #420]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b67      	ldr	r3, [pc, #412]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a66      	ldr	r2, [pc, #408]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	6213      	str	r3, [r2, #32]
 8000e36:	e01c      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d10c      	bne.n	8000e5a <HAL_RCC_OscConfig+0x356>
 8000e40:	4b61      	ldr	r3, [pc, #388]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4a60      	ldr	r2, [pc, #384]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6213      	str	r3, [r2, #32]
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	4a5d      	ldr	r2, [pc, #372]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6213      	str	r3, [r2, #32]
 8000e58:	e00b      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6213      	str	r3, [r2, #32]
 8000e66:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a57      	ldr	r2, [pc, #348]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d015      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fbb9 	bl	80005f0 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fbb5 	bl	80005f0 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e0b1      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e98:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ee      	beq.n	8000e82 <HAL_RCC_OscConfig+0x37e>
 8000ea4:	e014      	b.n	8000ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fba3 	bl	80005f0 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fb9f 	bl	80005f0 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e09b      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1ee      	bne.n	8000eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d105      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8087 	beq.w	8000ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d061      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d146      	bne.n	8000f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <HAL_RCC_OscConfig+0x4cc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb73 	bl	80005f0 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fb6f 	bl	80005f0 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e06d      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f34:	d108      	bne.n	8000f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f36:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	4921      	ldr	r1, [pc, #132]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f48:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a19      	ldr	r1, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	491b      	ldr	r1, [pc, #108]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_RCC_OscConfig+0x4cc>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fb43 	bl	80005f0 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fb3f 	bl	80005f0 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e03d      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x46a>
 8000f8c:	e035      	b.n	8000ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <HAL_RCC_OscConfig+0x4cc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb2c 	bl	80005f0 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fb28 	bl	80005f0 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e026      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x498>
 8000fba:	e01e      	b.n	8000ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e019      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_RCC_OscConfig+0x500>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d001      	beq.n	8000ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0d0      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b6a      	ldr	r3, [pc, #424]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d910      	bls.n	800104c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b67      	ldr	r3, [pc, #412]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 0207 	bic.w	r2, r3, #7
 8001032:	4965      	ldr	r1, [pc, #404]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b8      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a58      	ldr	r2, [pc, #352]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800106e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b53      	ldr	r3, [pc, #332]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494d      	ldr	r1, [pc, #308]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d040      	beq.n	8001128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b47      	ldr	r3, [pc, #284]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d115      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07f      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b41      	ldr	r3, [pc, #260]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e073      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e06b      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f023 0203 	bic.w	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4936      	ldr	r1, [pc, #216]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f8:	f7ff fa7a 	bl	80005f0 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fa76 	bl	80005f0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e053      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d210      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 0207 	bic.w	r2, r3, #7
 800113e:	4922      	ldr	r1, [pc, #136]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e032      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4916      	ldr	r1, [pc, #88]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f821 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	490a      	ldr	r1, [pc, #40]	@ (80011d0 <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_RCC_ClockConfig+0x1cc>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_RCC_ClockConfig+0x1d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d8 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	08003c90 	.word	0x08003c90
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x94>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d002      	beq.n	800120c <HAL_RCC_GetSysClockFreq+0x30>
 8001206:	2b08      	cmp	r3, #8
 8001208:	d003      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0x36>
 800120a:	e027      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x98>)
 800120e:	613b      	str	r3, [r7, #16]
      break;
 8001210:	e027      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d010      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x94>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	0c5b      	lsrs	r3, r3, #17
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x98>)
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e004      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	613b      	str	r3, [r7, #16]
      break;
 800125a:	e002      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x98>)
 800125e:	613b      	str	r3, [r7, #16]
      break;
 8001260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001262:	693b      	ldr	r3, [r7, #16]
}
 8001264:	4618      	mov	r0, r3
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	007a1200 	.word	0x007a1200
 8001278:	08003ca0 	.word	0x08003ca0
 800127c:	08003cb0 	.word	0x08003cb0
 8001280:	003d0900 	.word	0x003d0900

08001284 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <RCC_Delay+0x34>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <RCC_Delay+0x38>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0a5b      	lsrs	r3, r3, #9
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012a0:	bf00      	nop
  }
  while (Delay --);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	60fa      	str	r2, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f9      	bne.n	80012a0 <RCC_Delay+0x1c>
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000000 	.word	0x20000000
 80012bc:	10624dd3 	.word	0x10624dd3

080012c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <vApplicationGetIdleTaskMemory+0x28>)
 80012d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <vApplicationGetIdleTaskMemory+0x2c>)
 80012d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	601a      	str	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000490 	.word	0x20000490
 80012ec:	200004ec 	.word	0x200004ec

080012f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4a07      	ldr	r2, [pc, #28]	@ (800131c <vApplicationGetTimerTaskMemory+0x2c>)
 8001300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <vApplicationGetTimerTaskMemory+0x30>)
 8001306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200006ec 	.word	0x200006ec
 8001320:	20000748 	.word	0x20000748

08001324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f103 0208 	add.w	r2, r3, #8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f103 0208 	add.w	r2, r3, #8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f103 0208 	add.w	r2, r3, #8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	d103      	bne.n	80013e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e00c      	b.n	80013fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3308      	adds	r3, #8
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e002      	b.n	80013ee <vListInsert+0x2e>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d2f6      	bcs.n	80013e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6892      	ldr	r2, [r2, #8]
 8001446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6852      	ldr	r2, [r2, #4]
 8001450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d103      	bne.n	8001464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
	...

08001484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80014b0:	f002 f8a4 	bl	80035fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	441a      	add	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e0:	3b01      	subs	r3, #1
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	441a      	add	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	22ff      	movs	r2, #255	@ 0xff
 80014f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	22ff      	movs	r2, #255	@ 0xff
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d114      	bne.n	8001530 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01a      	beq.n	8001544 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3310      	adds	r3, #16
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f98a 	bl	800282c <xTaskRemoveFromEventList>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <xQueueGenericReset+0xd0>)
 8001520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	e009      	b.n	8001544 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3310      	adds	r3, #16
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fef5 	bl	8001324 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3324      	adds	r3, #36	@ 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fef0 	bl	8001324 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001544:	f002 f88a 	bl	800365c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000ed04 	.word	0xe000ed04

08001558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	@ 0x38
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10b      	bne.n	8001584 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800156c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001570:	f383 8811 	msr	BASEPRI, r3
 8001574:	f3bf 8f6f 	isb	sy
 8001578:	f3bf 8f4f 	dsb	sy
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10b      	bne.n	80015a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800158a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	e7fd      	b.n	800159e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <xQueueGenericCreateStatic+0x56>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <xQueueGenericCreateStatic+0x5a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <xQueueGenericCreateStatic+0x5c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80015b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015bc:	f383 8811 	msr	BASEPRI, r3
 80015c0:	f3bf 8f6f 	isb	sy
 80015c4:	f3bf 8f4f 	dsb	sy
 80015c8:	623b      	str	r3, [r7, #32]
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <xQueueGenericCreateStatic+0x84>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <xQueueGenericCreateStatic+0x88>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <xQueueGenericCreateStatic+0x8a>
 80015e0:	2300      	movs	r3, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10b      	bne.n	80015fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80015e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	61fb      	str	r3, [r7, #28]
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80015fe:	2350      	movs	r3, #80	@ 0x50
 8001600:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b50      	cmp	r3, #80	@ 0x50
 8001606:	d00b      	beq.n	8001620 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800160c:	f383 8811 	msr	BASEPRI, r3
 8001610:	f3bf 8f6f 	isb	sy
 8001614:	f3bf 8f4f 	dsb	sy
 8001618:	61bb      	str	r3, [r7, #24]
}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001620:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00d      	beq.n	8001648 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001634:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f805 	bl	8001652 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e002      	b.n	8001674 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001680:	2101      	movs	r1, #1
 8001682:	69b8      	ldr	r0, [r7, #24]
 8001684:	f7ff fefe 	bl	8001484 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	@ 0x38
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80016ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10b      	bne.n	80016cc <xQueueGenericSend+0x34>
	__asm volatile
 80016b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016b8:	f383 8811 	msr	BASEPRI, r3
 80016bc:	f3bf 8f6f 	isb	sy
 80016c0:	f3bf 8f4f 	dsb	sy
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <xQueueGenericSend+0x42>
 80016d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <xQueueGenericSend+0x46>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <xQueueGenericSend+0x48>
 80016de:	2300      	movs	r3, #0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10b      	bne.n	80016fc <xQueueGenericSend+0x64>
	__asm volatile
 80016e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e8:	f383 8811 	msr	BASEPRI, r3
 80016ec:	f3bf 8f6f 	isb	sy
 80016f0:	f3bf 8f4f 	dsb	sy
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d103      	bne.n	800170a <xQueueGenericSend+0x72>
 8001702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <xQueueGenericSend+0x76>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <xQueueGenericSend+0x78>
 800170e:	2300      	movs	r3, #0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10b      	bne.n	800172c <xQueueGenericSend+0x94>
	__asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	623b      	str	r3, [r7, #32]
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800172c:	f001 fa3e 	bl	8002bac <xTaskGetSchedulerState>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <xQueueGenericSend+0xa4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <xQueueGenericSend+0xa8>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <xQueueGenericSend+0xaa>
 8001740:	2300      	movs	r3, #0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10b      	bne.n	800175e <xQueueGenericSend+0xc6>
	__asm volatile
 8001746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800174a:	f383 8811 	msr	BASEPRI, r3
 800174e:	f3bf 8f6f 	isb	sy
 8001752:	f3bf 8f4f 	dsb	sy
 8001756:	61fb      	str	r3, [r7, #28]
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	e7fd      	b.n	800175a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800175e:	f001 ff4d 	bl	80035fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176a:	429a      	cmp	r2, r3
 800176c:	d302      	bcc.n	8001774 <xQueueGenericSend+0xdc>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d129      	bne.n	80017c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	68b9      	ldr	r1, [r7, #8]
 8001778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800177a:	f000 fa0f 	bl	8001b9c <prvCopyDataToQueue>
 800177e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d010      	beq.n	80017aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178a:	3324      	adds	r3, #36	@ 0x24
 800178c:	4618      	mov	r0, r3
 800178e:	f001 f84d 	bl	800282c <xTaskRemoveFromEventList>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001798:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <xQueueGenericSend+0x200>)
 800179a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	e00a      	b.n	80017c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <xQueueGenericSend+0x200>)
 80017b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80017c0:	f001 ff4c 	bl	800365c <vPortExitCritical>
				return pdPASS;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e063      	b.n	8001890 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80017ce:	f001 ff45 	bl	800365c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e05c      	b.n	8001890 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80017d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 f887 	bl	80028f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80017ea:	f001 ff37 	bl	800365c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80017ee:	f000 fdf9 	bl	80023e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80017f2:	f001 ff03 	bl	80035fc <vPortEnterCritical>
 80017f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001802:	d103      	bne.n	800180c <xQueueGenericSend+0x174>
 8001804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800180c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800180e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d103      	bne.n	8001822 <xQueueGenericSend+0x18a>
 800181a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001822:	f001 ff1b 	bl	800365c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001826:	1d3a      	adds	r2, r7, #4
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f876 	bl	8002920 <xTaskCheckForTimeOut>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d124      	bne.n	8001884 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800183a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800183c:	f000 faa6 	bl	8001d8c <prvIsQueueFull>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d018      	beq.n	8001878 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001848:	3310      	adds	r3, #16
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 ff9a 	bl	8002788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001856:	f000 fa31 	bl	8001cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800185a:	f000 fdd1 	bl	8002400 <xTaskResumeAll>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	f47f af7c 	bne.w	800175e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <xQueueGenericSend+0x200>)
 8001868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	e772      	b.n	800175e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800187a:	f000 fa1f 	bl	8001cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800187e:	f000 fdbf 	bl	8002400 <xTaskResumeAll>
 8001882:	e76c      	b.n	800175e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001886:	f000 fa19 	bl	8001cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800188a:	f000 fdb9 	bl	8002400 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800188e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001890:	4618      	mov	r0, r3
 8001892:	3738      	adds	r7, #56	@ 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	e000ed04 	.word	0xe000ed04

0800189c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b090      	sub	sp, #64	@ 0x40
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80018ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10b      	bne.n	80018cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80018b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <xQueueGenericSendFromISR+0x3e>
 80018d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <xQueueGenericSendFromISR+0x42>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <xQueueGenericSendFromISR+0x44>
 80018de:	2300      	movs	r3, #0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10b      	bne.n	80018fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80018e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d103      	bne.n	800190a <xQueueGenericSendFromISR+0x6e>
 8001902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <xQueueGenericSendFromISR+0x72>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <xQueueGenericSendFromISR+0x74>
 800190e:	2300      	movs	r3, #0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10b      	bne.n	800192c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f3bf 8f4f 	dsb	sy
 8001924:	623b      	str	r3, [r7, #32]
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800192c:	f001 ff28 	bl	8003780 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001930:	f3ef 8211 	mrs	r2, BASEPRI
 8001934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001938:	f383 8811 	msr	BASEPRI, r3
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	61fa      	str	r2, [r7, #28]
 8001946:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001948:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800194c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800194e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	429a      	cmp	r2, r3
 8001956:	d302      	bcc.n	800195e <xQueueGenericSendFromISR+0xc2>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d12f      	bne.n	80019be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001960:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001964:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800196a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001974:	f000 f912 	bl	8001b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001978:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d112      	bne.n	80019a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800198a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800198c:	3324      	adds	r3, #36	@ 0x24
 800198e:	4618      	mov	r0, r3
 8001990:	f000 ff4c 	bl	800282c <xTaskRemoveFromEventList>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00e      	beq.n	80019b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80019a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	b25a      	sxtb	r2, r3
 80019b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80019b8:	2301      	movs	r3, #1
 80019ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80019bc:	e001      	b.n	80019c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80019cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80019ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3740      	adds	r7, #64	@ 0x40
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10b      	bne.n	8001a0a <xQueueReceive+0x32>
	__asm volatile
 80019f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f6:	f383 8811 	msr	BASEPRI, r3
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	f3bf 8f4f 	dsb	sy
 8001a02:	623b      	str	r3, [r7, #32]
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	e7fd      	b.n	8001a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d103      	bne.n	8001a18 <xQueueReceive+0x40>
 8001a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <xQueueReceive+0x44>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <xQueueReceive+0x46>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <xQueueReceive+0x62>
	__asm volatile
 8001a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	f3bf 8f6f 	isb	sy
 8001a2e:	f3bf 8f4f 	dsb	sy
 8001a32:	61fb      	str	r3, [r7, #28]
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a3a:	f001 f8b7 	bl	8002bac <xTaskGetSchedulerState>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <xQueueReceive+0x72>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <xQueueReceive+0x76>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <xQueueReceive+0x78>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <xQueueReceive+0x94>
	__asm volatile
 8001a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f3bf 8f4f 	dsb	sy
 8001a64:	61bb      	str	r3, [r7, #24]
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a6c:	f001 fdc6 	bl	80035fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01f      	beq.n	8001abc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a80:	f000 f8f6 	bl	8001c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00f      	beq.n	8001ab4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a96:	3310      	adds	r3, #16
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fec7 	bl	800282c <xTaskRemoveFromEventList>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8001b98 <xQueueReceive+0x1c0>)
 8001aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001ab4:	f001 fdd2 	bl	800365c <vPortExitCritical>
				return pdPASS;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e069      	b.n	8001b90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ac2:	f001 fdcb 	bl	800365c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e062      	b.n	8001b90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 ff0d 	bl	80028f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ade:	f001 fdbd 	bl	800365c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ae2:	f000 fc7f 	bl	80023e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ae6:	f001 fd89 	bl	80035fc <vPortEnterCritical>
 8001aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af6:	d103      	bne.n	8001b00 <xQueueReceive+0x128>
 8001af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d103      	bne.n	8001b16 <xQueueReceive+0x13e>
 8001b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b16:	f001 fda1 	bl	800365c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b1a:	1d3a      	adds	r2, r7, #4
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fefc 	bl	8002920 <xTaskCheckForTimeOut>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d123      	bne.n	8001b76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b30:	f000 f916 	bl	8001d60 <prvIsQueueEmpty>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d017      	beq.n	8001b6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3c:	3324      	adds	r3, #36	@ 0x24
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fe20 	bl	8002788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b4a:	f000 f8b7 	bl	8001cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b4e:	f000 fc57 	bl	8002400 <xTaskResumeAll>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d189      	bne.n	8001a6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <xQueueReceive+0x1c0>)
 8001b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f3bf 8f4f 	dsb	sy
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	e780      	b.n	8001a6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b6c:	f000 f8a6 	bl	8001cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b70:	f000 fc46 	bl	8002400 <xTaskResumeAll>
 8001b74:	e77a      	b.n	8001a6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b78:	f000 f8a0 	bl	8001cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b7c:	f000 fc40 	bl	8002400 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b82:	f000 f8ed 	bl	8001d60 <prvIsQueueEmpty>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f43f af6f 	beq.w	8001a6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001b8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3730      	adds	r7, #48	@ 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	e000ed04 	.word	0xe000ed04

08001b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d14d      	bne.n	8001c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 f80e 	bl	8002be8 <xTaskPriorityDisinherit>
 8001bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e043      	b.n	8001c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d119      	bne.n	8001c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6858      	ldr	r0, [r3, #4]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	461a      	mov	r2, r3
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	f002 f822 	bl	8003c30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	441a      	add	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d32b      	bcc.n	8001c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	e026      	b.n	8001c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68d8      	ldr	r0, [r3, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	f002 f808 	bl	8003c30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	425b      	negs	r3, r3
 8001c2a:	441a      	add	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	425b      	negs	r3, r3
 8001c46:	441a      	add	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d105      	bne.n	8001c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001c66:	697b      	ldr	r3, [r7, #20]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d018      	beq.n	8001cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	441a      	add	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d303      	bcc.n	8001ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	461a      	mov	r2, r3
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f001 ffbe 	bl	8003c30 <memcpy>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001cc4:	f001 fc9a 	bl	80035fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cd0:	e011      	b.n	8001cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d012      	beq.n	8001d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3324      	adds	r3, #36	@ 0x24
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fda4 	bl	800282c <xTaskRemoveFromEventList>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001cea:	f000 fe7d 	bl	80029e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dce9      	bgt.n	8001cd2 <prvUnlockQueue+0x16>
 8001cfe:	e000      	b.n	8001d02 <prvUnlockQueue+0x46>
					break;
 8001d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	22ff      	movs	r2, #255	@ 0xff
 8001d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001d0a:	f001 fca7 	bl	800365c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001d0e:	f001 fc75 	bl	80035fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d1a:	e011      	b.n	8001d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3310      	adds	r3, #16
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fd7f 	bl	800282c <xTaskRemoveFromEventList>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001d34:	f000 fe58 	bl	80029e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	dce9      	bgt.n	8001d1c <prvUnlockQueue+0x60>
 8001d48:	e000      	b.n	8001d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	22ff      	movs	r2, #255	@ 0xff
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001d54:	f001 fc82 	bl	800365c <vPortExitCritical>
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d68:	f001 fc48 	bl	80035fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001d74:	2301      	movs	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e001      	b.n	8001d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001d7e:	f001 fc6d 	bl	800365c <vPortExitCritical>

	return xReturn;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d94:	f001 fc32 	bl	80035fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d102      	bne.n	8001daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e001      	b.n	8001dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001dae:	f001 fc55 	bl	800365c <vPortExitCritical>

	return xReturn;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e014      	b.n	8001df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001e08 <vQueueAddToRegistry+0x4c>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001dd8:	490b      	ldr	r1, [pc, #44]	@ (8001e08 <vQueueAddToRegistry+0x4c>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <vQueueAddToRegistry+0x4c>)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001dee:	e006      	b.n	8001dfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b07      	cmp	r3, #7
 8001dfa:	d9e7      	bls.n	8001dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000b48 	.word	0x20000b48

08001e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001e1c:	f001 fbee 	bl	80035fc <vPortEnterCritical>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d103      	bne.n	8001e36 <vQueueWaitForMessageRestricted+0x2a>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e42:	d103      	bne.n	8001e4c <vQueueWaitForMessageRestricted+0x40>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e4c:	f001 fc06 	bl	800365c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3324      	adds	r3, #36	@ 0x24
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fcb7 	bl	80027d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff28 	bl	8001cbc <prvUnlockQueue>
	}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	@ 0x38
 8001e78:	af04      	add	r7, sp, #16
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10b      	bne.n	8001ea0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8001e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e8c:	f383 8811 	msr	BASEPRI, r3
 8001e90:	f3bf 8f6f 	isb	sy
 8001e94:	f3bf 8f4f 	dsb	sy
 8001e98:	623b      	str	r3, [r7, #32]
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <xTaskCreateStatic+0x4a>
	__asm volatile
 8001ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eaa:	f383 8811 	msr	BASEPRI, r3
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	61fb      	str	r3, [r7, #28]
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	e7fd      	b.n	8001eba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ebe:	235c      	movs	r3, #92	@ 0x5c
 8001ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b5c      	cmp	r3, #92	@ 0x5c
 8001ec6:	d00b      	beq.n	8001ee0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	61bb      	str	r3, [r7, #24]
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01e      	beq.n	8001f26 <xTaskCreateStatic+0xb2>
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01b      	beq.n	8001f26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f00:	2300      	movs	r3, #0
 8001f02:	9303      	str	r3, [sp, #12]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f850 	bl	8001fbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f20:	f000 f8de 	bl	80020e0 <prvAddNewTaskToReadyList>
 8001f24:	e001      	b.n	8001f2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001f2a:	697b      	ldr	r3, [r7, #20]
	}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	@ 0x30
 8001f38:	af04      	add	r7, sp, #16
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fc59 	bl	8003800 <pvPortMalloc>
 8001f4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00e      	beq.n	8001f74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f56:	205c      	movs	r0, #92	@ 0x5c
 8001f58:	f001 fc52 	bl	8003800 <pvPortMalloc>
 8001f5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f6a:	e005      	b.n	8001f78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f6c:	6978      	ldr	r0, [r7, #20]
 8001f6e:	f001 fd15 	bl	800399c <vPortFree>
 8001f72:	e001      	b.n	8001f78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f80e 	bl	8001fbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fa2:	69f8      	ldr	r0, [r7, #28]
 8001fa4:	f000 f89c 	bl	80020e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e002      	b.n	8001fb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b088      	sub	sp, #32
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	21a5      	movs	r1, #165	@ 0xa5
 8001fd8:	f001 fdfe 	bl	8003bd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f023 0307 	bic.w	r3, r3, #7
 8001ff4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00b      	beq.n	8002018 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	617b      	str	r3, [r7, #20]
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01f      	beq.n	800205e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e012      	b.n	800204a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	7819      	ldrb	r1, [r3, #0]
 800202c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	3334      	adds	r3, #52	@ 0x34
 8002034:	460a      	mov	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3301      	adds	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d9e9      	bls.n	8002024 <prvInitialiseNewTask+0x66>
 8002050:	e000      	b.n	8002054 <prvInitialiseNewTask+0x96>
			{
				break;
 8002052:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800205c:	e003      	b.n	8002066 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	2b37      	cmp	r3, #55	@ 0x37
 800206a:	d901      	bls.n	8002070 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800206c:	2337      	movs	r3, #55	@ 0x37
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800207a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207e:	2200      	movs	r2, #0
 8002080:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002084:	3304      	adds	r3, #4
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f96b 	bl	8001362 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800208c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208e:	3318      	adds	r3, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f966 	bl	8001362 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800209a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80020a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	69b8      	ldr	r0, [r7, #24]
 80020c0:	f001 f9ae 	bl	8003420 <pxPortInitialiseStack>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80020ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020e8:	f001 fa88 	bl	80035fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <prvAddNewTaskToReadyList+0xc4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <prvAddNewTaskToReadyList+0xc4>)
 80020f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80020f6:	4b2c      	ldr	r3, [pc, #176]	@ (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020fe:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <prvAddNewTaskToReadyList+0xc4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d110      	bne.n	800212e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800210c:	f000 fc90 	bl	8002a30 <prvInitialiseTaskLists>
 8002110:	e00d      	b.n	800212e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002112:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <prvAddNewTaskToReadyList+0xcc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800211a:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	429a      	cmp	r2, r3
 8002126:	d802      	bhi.n	800212e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002128:	4a1f      	ldr	r2, [pc, #124]	@ (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800212e:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <prvAddNewTaskToReadyList+0xd0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a1e      	ldr	r2, [pc, #120]	@ (80021b0 <prvAddNewTaskToReadyList+0xd0>)
 8002136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <prvAddNewTaskToReadyList+0xd0>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <prvAddNewTaskToReadyList+0xd4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d903      	bls.n	8002154 <prvAddNewTaskToReadyList+0x74>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	4a18      	ldr	r2, [pc, #96]	@ (80021b4 <prvAddNewTaskToReadyList+0xd4>)
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <prvAddNewTaskToReadyList+0xd8>)
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f7ff f905 	bl	800137a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002170:	f001 fa74 	bl	800365c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002174:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <prvAddNewTaskToReadyList+0xcc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00e      	beq.n	800219a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <prvAddNewTaskToReadyList+0xc8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	429a      	cmp	r2, r3
 8002188:	d207      	bcs.n	800219a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800218a:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <prvAddNewTaskToReadyList+0xdc>)
 800218c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000105c 	.word	0x2000105c
 80021a8:	20000b88 	.word	0x20000b88
 80021ac:	20001068 	.word	0x20001068
 80021b0:	20001078 	.word	0x20001078
 80021b4:	20001064 	.word	0x20001064
 80021b8:	20000b8c 	.word	0x20000b8c
 80021bc:	e000ed04 	.word	0xe000ed04

080021c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80021c8:	f001 fa18 	bl	80035fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <vTaskDelete+0x18>
 80021d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <vTaskDelete+0xc8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e000      	b.n	80021da <vTaskDelete+0x1a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3304      	adds	r3, #4
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f925 	bl	8001430 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3318      	adds	r3, #24
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f91c 	bl	8001430 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <vTaskDelete+0xcc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a23      	ldr	r2, [pc, #140]	@ (800228c <vTaskDelete+0xcc>)
 8002200:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002202:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <vTaskDelete+0xc8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d10b      	bne.n	8002224 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3304      	adds	r3, #4
 8002210:	4619      	mov	r1, r3
 8002212:	481f      	ldr	r0, [pc, #124]	@ (8002290 <vTaskDelete+0xd0>)
 8002214:	f7ff f8b1 	bl	800137a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002218:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <vTaskDelete+0xd4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <vTaskDelete+0xd4>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e009      	b.n	8002238 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <vTaskDelete+0xd8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3b01      	subs	r3, #1
 800222a:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <vTaskDelete+0xd8>)
 800222c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fc6c 	bl	8002b0c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002234:	f000 fc9a 	bl	8002b6c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002238:	f001 fa10 	bl	800365c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <vTaskDelete+0xdc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8002244:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <vTaskDelete+0xc8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	429a      	cmp	r2, r3
 800224c:	d117      	bne.n	800227e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800224e:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <vTaskDelete+0xe0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <vTaskDelete+0xae>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	60bb      	str	r3, [r7, #8]
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <vTaskDelete+0xe4>)
 8002270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000b88 	.word	0x20000b88
 800228c:	20001078 	.word	0x20001078
 8002290:	20001030 	.word	0x20001030
 8002294:	20001044 	.word	0x20001044
 8002298:	2000105c 	.word	0x2000105c
 800229c:	20001068 	.word	0x20001068
 80022a0:	20001084 	.word	0x20001084
 80022a4:	e000ed04 	.word	0xe000ed04

080022a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d018      	beq.n	80022ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <vTaskDelay+0x64>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <vTaskDelay+0x32>
	__asm volatile
 80022c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	60bb      	str	r3, [r7, #8]
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	e7fd      	b.n	80022d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80022da:	f000 f883 	bl	80023e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80022de:	2100      	movs	r1, #0
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fcf1 	bl	8002cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80022e6:	f000 f88b 	bl	8002400 <xTaskResumeAll>
 80022ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <vTaskDelay+0x68>)
 80022f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20001084 	.word	0x20001084
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002322:	463a      	mov	r2, r7
 8002324:	1d39      	adds	r1, r7, #4
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe ffc8 	bl	80012c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	9202      	str	r2, [sp, #8]
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	460a      	mov	r2, r1
 8002342:	4922      	ldr	r1, [pc, #136]	@ (80023cc <vTaskStartScheduler+0xb8>)
 8002344:	4822      	ldr	r0, [pc, #136]	@ (80023d0 <vTaskStartScheduler+0xbc>)
 8002346:	f7ff fd95 	bl	8001e74 <xTaskCreateStatic>
 800234a:	4603      	mov	r3, r0
 800234c:	4a21      	ldr	r2, [pc, #132]	@ (80023d4 <vTaskStartScheduler+0xc0>)
 800234e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002350:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <vTaskStartScheduler+0xc0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002358:	2301      	movs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e001      	b.n	8002362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d102      	bne.n	800236e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002368:	f000 fd02 	bl	8002d70 <xTimerCreateTimerTask>
 800236c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d116      	bne.n	80023a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	613b      	str	r3, [r7, #16]
}
 8002386:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <vTaskStartScheduler+0xc4>)
 800238a:	f04f 32ff 	mov.w	r2, #4294967295
 800238e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <vTaskStartScheduler+0xc8>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <vTaskStartScheduler+0xcc>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800239c:	f001 f8bc 	bl	8003518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023a0:	e00f      	b.n	80023c2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d10b      	bne.n	80023c2 <vTaskStartScheduler+0xae>
	__asm volatile
 80023aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	60fb      	str	r3, [r7, #12]
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	e7fd      	b.n	80023be <vTaskStartScheduler+0xaa>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	08003c78 	.word	0x08003c78
 80023d0:	08002a01 	.word	0x08002a01
 80023d4:	20001080 	.word	0x20001080
 80023d8:	2000107c 	.word	0x2000107c
 80023dc:	20001068 	.word	0x20001068
 80023e0:	20001060 	.word	0x20001060

080023e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80023e8:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <vTaskSuspendAll+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a03      	ldr	r2, [pc, #12]	@ (80023fc <vTaskSuspendAll+0x18>)
 80023f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20001084 	.word	0x20001084

08002400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <xTaskResumeAll+0x118>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <xTaskResumeAll+0x2e>
	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	603b      	str	r3, [r7, #0]
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800242e:	f001 f8e5 	bl	80035fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002432:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <xTaskResumeAll+0x118>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3b01      	subs	r3, #1
 8002438:	4a37      	ldr	r2, [pc, #220]	@ (8002518 <xTaskResumeAll+0x118>)
 800243a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800243c:	4b36      	ldr	r3, [pc, #216]	@ (8002518 <xTaskResumeAll+0x118>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d162      	bne.n	800250a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002444:	4b35      	ldr	r3, [pc, #212]	@ (800251c <xTaskResumeAll+0x11c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05e      	beq.n	800250a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800244c:	e02f      	b.n	80024ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800244e:	4b34      	ldr	r3, [pc, #208]	@ (8002520 <xTaskResumeAll+0x120>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3318      	adds	r3, #24
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe ffe8 	bl	8001430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3304      	adds	r3, #4
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe ffe3 	bl	8001430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246e:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <xTaskResumeAll+0x124>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d903      	bls.n	800247e <xTaskResumeAll+0x7e>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	4a2a      	ldr	r2, [pc, #168]	@ (8002524 <xTaskResumeAll+0x124>)
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <xTaskResumeAll+0x128>)
 800248c:	441a      	add	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3304      	adds	r3, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7fe ff70 	bl	800137a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <xTaskResumeAll+0x12c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d302      	bcc.n	80024ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <xTaskResumeAll+0x130>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <xTaskResumeAll+0x120>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1cb      	bne.n	800244e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024bc:	f000 fb56 	bl	8002b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <xTaskResumeAll+0x134>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024cc:	f000 f844 	bl	8002558 <xTaskIncrementTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80024d6:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <xTaskResumeAll+0x130>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f1      	bne.n	80024cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <xTaskResumeAll+0x134>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <xTaskResumeAll+0x130>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <xTaskResumeAll+0x138>)
 80024fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800250a:	f001 f8a7 	bl	800365c <vPortExitCritical>

	return xAlreadyYielded;
 800250e:	68bb      	ldr	r3, [r7, #8]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20001084 	.word	0x20001084
 800251c:	2000105c 	.word	0x2000105c
 8002520:	2000101c 	.word	0x2000101c
 8002524:	20001064 	.word	0x20001064
 8002528:	20000b8c 	.word	0x20000b8c
 800252c:	20000b88 	.word	0x20000b88
 8002530:	20001070 	.word	0x20001070
 8002534:	2000106c 	.word	0x2000106c
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <xTaskGetTickCount+0x18>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20001060 	.word	0x20001060

08002558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002562:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <xTaskIncrementTick+0x148>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 8090 	bne.w	800268c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800256c:	4b4d      	ldr	r3, [pc, #308]	@ (80026a4 <xTaskIncrementTick+0x14c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002574:	4a4b      	ldr	r2, [pc, #300]	@ (80026a4 <xTaskIncrementTick+0x14c>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d121      	bne.n	80025c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002580:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <xTaskIncrementTick+0x150>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	603b      	str	r3, [r7, #0]
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	e7fd      	b.n	800259e <xTaskIncrementTick+0x46>
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <xTaskIncrementTick+0x150>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	4b40      	ldr	r3, [pc, #256]	@ (80026ac <xTaskIncrementTick+0x154>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3e      	ldr	r2, [pc, #248]	@ (80026a8 <xTaskIncrementTick+0x150>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4a3e      	ldr	r2, [pc, #248]	@ (80026ac <xTaskIncrementTick+0x154>)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b3e      	ldr	r3, [pc, #248]	@ (80026b0 <xTaskIncrementTick+0x158>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a3c      	ldr	r2, [pc, #240]	@ (80026b0 <xTaskIncrementTick+0x158>)
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	f000 fad4 	bl	8002b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025c4:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <xTaskIncrementTick+0x15c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d349      	bcc.n	8002662 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <xTaskIncrementTick+0x150>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025d8:	4b36      	ldr	r3, [pc, #216]	@ (80026b4 <xTaskIncrementTick+0x15c>)
 80025da:	f04f 32ff 	mov.w	r2, #4294967295
 80025de:	601a      	str	r2, [r3, #0]
					break;
 80025e0:	e03f      	b.n	8002662 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025e2:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <xTaskIncrementTick+0x150>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d203      	bcs.n	8002602 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80025fa:	4a2e      	ldr	r2, [pc, #184]	@ (80026b4 <xTaskIncrementTick+0x15c>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002600:	e02f      	b.n	8002662 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3304      	adds	r3, #4
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ff12 	bl	8001430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3318      	adds	r3, #24
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe ff09 	bl	8001430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002622:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <xTaskIncrementTick+0x160>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d903      	bls.n	8002632 <xTaskIncrementTick+0xda>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	4a22      	ldr	r2, [pc, #136]	@ (80026b8 <xTaskIncrementTick+0x160>)
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4a1f      	ldr	r2, [pc, #124]	@ (80026bc <xTaskIncrementTick+0x164>)
 8002640:	441a      	add	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3304      	adds	r3, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f7fe fe96 	bl	800137a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <xTaskIncrementTick+0x168>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	429a      	cmp	r2, r3
 800265a:	d3b8      	bcc.n	80025ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002660:	e7b5      	b.n	80025ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <xTaskIncrementTick+0x168>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002668:	4914      	ldr	r1, [pc, #80]	@ (80026bc <xTaskIncrementTick+0x164>)
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d901      	bls.n	800267e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <xTaskIncrementTick+0x16c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002686:	2301      	movs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e004      	b.n	8002696 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <xTaskIncrementTick+0x170>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <xTaskIncrementTick+0x170>)
 8002694:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002696:	697b      	ldr	r3, [r7, #20]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20001084 	.word	0x20001084
 80026a4:	20001060 	.word	0x20001060
 80026a8:	20001014 	.word	0x20001014
 80026ac:	20001018 	.word	0x20001018
 80026b0:	20001074 	.word	0x20001074
 80026b4:	2000107c 	.word	0x2000107c
 80026b8:	20001064 	.word	0x20001064
 80026bc:	20000b8c 	.word	0x20000b8c
 80026c0:	20000b88 	.word	0x20000b88
 80026c4:	20001070 	.word	0x20001070
 80026c8:	2000106c 	.word	0x2000106c

080026cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026d2:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <vTaskSwitchContext+0xa8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80026da:	4b27      	ldr	r3, [pc, #156]	@ (8002778 <vTaskSwitchContext+0xac>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80026e0:	e042      	b.n	8002768 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80026e2:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <vTaskSwitchContext+0xac>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <vTaskSwitchContext+0xb0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e011      	b.n	8002714 <vTaskSwitchContext+0x48>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10b      	bne.n	800270e <vTaskSwitchContext+0x42>
	__asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	607b      	str	r3, [r7, #4]
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <vTaskSwitchContext+0x3e>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3b01      	subs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	491a      	ldr	r1, [pc, #104]	@ (8002780 <vTaskSwitchContext+0xb4>)
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0e3      	beq.n	80026f0 <vTaskSwitchContext+0x24>
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4a13      	ldr	r2, [pc, #76]	@ (8002780 <vTaskSwitchContext+0xb4>)
 8002734:	4413      	add	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3308      	adds	r3, #8
 800274a:	429a      	cmp	r2, r3
 800274c:	d104      	bne.n	8002758 <vTaskSwitchContext+0x8c>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <vTaskSwitchContext+0xb8>)
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4a06      	ldr	r2, [pc, #24]	@ (800277c <vTaskSwitchContext+0xb0>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20001084 	.word	0x20001084
 8002778:	20001070 	.word	0x20001070
 800277c:	20001064 	.word	0x20001064
 8002780:	20000b8c 	.word	0x20000b8c
 8002784:	20000b88 	.word	0x20000b88

08002788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	60fb      	str	r3, [r7, #12]
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027b0:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <vTaskPlaceOnEventList+0x48>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3318      	adds	r3, #24
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fe01 	bl	80013c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80027be:	2101      	movs	r1, #1
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	f000 fa81 	bl	8002cc8 <prvAddCurrentTaskToDelayedList>
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000b88 	.word	0x20000b88

080027d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	617b      	str	r3, [r7, #20]
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	e7fd      	b.n	80027fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <vTaskPlaceOnEventListRestricted+0x54>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3318      	adds	r3, #24
 8002804:	4619      	mov	r1, r3
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7fe fdb7 	bl	800137a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68b8      	ldr	r0, [r7, #8]
 800281c:	f000 fa54 	bl	8002cc8 <prvAddCurrentTaskToDelayedList>
	}
 8002820:	bf00      	nop
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000b88 	.word	0x20000b88

0800282c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	60fb      	str	r3, [r7, #12]
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	e7fd      	b.n	8002856 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	3318      	adds	r3, #24
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fde6 	bl	8001430 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <xTaskRemoveFromEventList+0xb0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11d      	bne.n	80028a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	3304      	adds	r3, #4
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fddd 	bl	8001430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <xTaskRemoveFromEventList+0xb4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d903      	bls.n	800288a <xTaskRemoveFromEventList+0x5e>
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	4a16      	ldr	r2, [pc, #88]	@ (80028e0 <xTaskRemoveFromEventList+0xb4>)
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <xTaskRemoveFromEventList+0xb8>)
 8002898:	441a      	add	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3304      	adds	r3, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f7fe fd6a 	bl	800137a <vListInsertEnd>
 80028a6:	e005      	b.n	80028b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	3318      	adds	r3, #24
 80028ac:	4619      	mov	r1, r3
 80028ae:	480e      	ldr	r0, [pc, #56]	@ (80028e8 <xTaskRemoveFromEventList+0xbc>)
 80028b0:	f7fe fd63 	bl	800137a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <xTaskRemoveFromEventList+0xc0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	429a      	cmp	r2, r3
 80028c0:	d905      	bls.n	80028ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <xTaskRemoveFromEventList+0xc4>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e001      	b.n	80028d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80028d2:	697b      	ldr	r3, [r7, #20]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20001084 	.word	0x20001084
 80028e0:	20001064 	.word	0x20001064
 80028e4:	20000b8c 	.word	0x20000b8c
 80028e8:	2000101c 	.word	0x2000101c
 80028ec:	20000b88 	.word	0x20000b88
 80028f0:	20001070 	.word	0x20001070

080028f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028fc:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <vTaskInternalSetTimeOutState+0x24>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <vTaskInternalSetTimeOutState+0x28>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	605a      	str	r2, [r3, #4]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20001074 	.word	0x20001074
 800291c:	20001060 	.word	0x20001060

08002920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	613b      	str	r3, [r7, #16]
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10b      	bne.n	8002966 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	60fb      	str	r3, [r7, #12]
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002966:	f000 fe49 	bl	80035fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <xTaskCheckForTimeOut+0xc0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d102      	bne.n	800298a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	e023      	b.n	80029d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <xTaskCheckForTimeOut+0xc4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d007      	beq.n	80029a6 <xTaskCheckForTimeOut+0x86>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	e015      	b.n	80029d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d20b      	bcs.n	80029c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad2      	subs	r2, r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff99 	bl	80028f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e004      	b.n	80029d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80029d2:	f000 fe43 	bl	800365c <vPortExitCritical>

	return xReturn;
 80029d6:	69fb      	ldr	r3, [r7, #28]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20001060 	.word	0x20001060
 80029e4:	20001074 	.word	0x20001074

080029e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80029ec:	4b03      	ldr	r3, [pc, #12]	@ (80029fc <vTaskMissedYield+0x14>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20001070 	.word	0x20001070

08002a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a08:	f000 f852 	bl	8002ab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <prvIdleTask+0x28>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d9f9      	bls.n	8002a08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <prvIdleTask+0x2c>)
 8002a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a24:	e7f0      	b.n	8002a08 <prvIdleTask+0x8>
 8002a26:	bf00      	nop
 8002a28:	20000b8c 	.word	0x20000b8c
 8002a2c:	e000ed04 	.word	0xe000ed04

08002a30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	e00c      	b.n	8002a56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <prvInitialiseTaskLists+0x60>)
 8002a48:	4413      	add	r3, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fc6a 	bl	8001324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3301      	adds	r3, #1
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b37      	cmp	r3, #55	@ 0x37
 8002a5a:	d9ef      	bls.n	8002a3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a5c:	480d      	ldr	r0, [pc, #52]	@ (8002a94 <prvInitialiseTaskLists+0x64>)
 8002a5e:	f7fe fc61 	bl	8001324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a62:	480d      	ldr	r0, [pc, #52]	@ (8002a98 <prvInitialiseTaskLists+0x68>)
 8002a64:	f7fe fc5e 	bl	8001324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a68:	480c      	ldr	r0, [pc, #48]	@ (8002a9c <prvInitialiseTaskLists+0x6c>)
 8002a6a:	f7fe fc5b 	bl	8001324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a6e:	480c      	ldr	r0, [pc, #48]	@ (8002aa0 <prvInitialiseTaskLists+0x70>)
 8002a70:	f7fe fc58 	bl	8001324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a74:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <prvInitialiseTaskLists+0x74>)
 8002a76:	f7fe fc55 	bl	8001324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <prvInitialiseTaskLists+0x78>)
 8002a7c:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <prvInitialiseTaskLists+0x64>)
 8002a7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <prvInitialiseTaskLists+0x7c>)
 8002a82:	4a05      	ldr	r2, [pc, #20]	@ (8002a98 <prvInitialiseTaskLists+0x68>)
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000b8c 	.word	0x20000b8c
 8002a94:	20000fec 	.word	0x20000fec
 8002a98:	20001000 	.word	0x20001000
 8002a9c:	2000101c 	.word	0x2000101c
 8002aa0:	20001030 	.word	0x20001030
 8002aa4:	20001048 	.word	0x20001048
 8002aa8:	20001014 	.word	0x20001014
 8002aac:	20001018 	.word	0x20001018

08002ab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ab6:	e019      	b.n	8002aec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ab8:	f000 fda0 	bl	80035fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002abc:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <prvCheckTasksWaitingTermination+0x50>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fcb1 	bl	8001430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <prvCheckTasksWaitingTermination+0x54>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b04 <prvCheckTasksWaitingTermination+0x54>)
 8002ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <prvCheckTasksWaitingTermination+0x58>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <prvCheckTasksWaitingTermination+0x58>)
 8002ae0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002ae2:	f000 fdbb 	bl	800365c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f810 	bl	8002b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <prvCheckTasksWaitingTermination+0x58>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e1      	bne.n	8002ab8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20001030 	.word	0x20001030
 8002b04:	2000105c 	.word	0x2000105c
 8002b08:	20001044 	.word	0x20001044

08002b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 ff3a 	bl	800399c <vPortFree>
				vPortFree( pxTCB );
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 ff37 	bl	800399c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b2e:	e019      	b.n	8002b64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d103      	bne.n	8002b42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 ff2e 	bl	800399c <vPortFree>
	}
 8002b40:	e010      	b.n	8002b64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d00b      	beq.n	8002b64 <prvDeleteTCB+0x58>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	60fb      	str	r3, [r7, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <prvDeleteTCB+0x54>
	}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <prvResetNextTaskUnblockTime+0x38>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b84:	e008      	b.n	8002b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b86:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <prvResetNextTaskUnblockTime+0x38>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a04      	ldr	r2, [pc, #16]	@ (8002ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20001014 	.word	0x20001014
 8002ba8:	2000107c 	.word	0x2000107c

08002bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <xTaskGetSchedulerState+0x34>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	e008      	b.n	8002bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <xTaskGetSchedulerState+0x38>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e001      	b.n	8002bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002bd2:	687b      	ldr	r3, [r7, #4]
	}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20001068 	.word	0x20001068
 8002be4:	20001084 	.word	0x20001084

08002be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d058      	beq.n	8002cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <xTaskPriorityDisinherit+0xd4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d00b      	beq.n	8002c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	60fb      	str	r3, [r7, #12]
}
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	60bb      	str	r3, [r7, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d02c      	beq.n	8002cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d128      	bne.n	8002cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fbe4 	bl	8001430 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <xTaskPriorityDisinherit+0xd8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d903      	bls.n	8002c90 <xTaskPriorityDisinherit+0xa8>
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <xTaskPriorityDisinherit+0xd8>)
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <xTaskPriorityDisinherit+0xdc>)
 8002c9e:	441a      	add	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7fe fb67 	bl	800137a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002cb0:	697b      	ldr	r3, [r7, #20]
	}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000b88 	.word	0x20000b88
 8002cc0:	20001064 	.word	0x20001064
 8002cc4:	20000b8c 	.word	0x20000b8c

08002cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cd8:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fba6 	bl	8001430 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d10a      	bne.n	8002d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4819      	ldr	r0, [pc, #100]	@ (8002d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8002cfc:	f7fe fb3d 	bl	800137a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d00:	e026      	b.n	8002d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d209      	bcs.n	8002d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f7fe fb4a 	bl	80013c0 <vListInsert>
}
 8002d2c:	e010      	b.n	8002d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7fe fb40 	bl	80013c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d202      	bcs.n	8002d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002d4a:	4a08      	ldr	r2, [pc, #32]	@ (8002d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20001060 	.word	0x20001060
 8002d5c:	20000b88 	.word	0x20000b88
 8002d60:	20001048 	.word	0x20001048
 8002d64:	20001018 	.word	0x20001018
 8002d68:	20001014 	.word	0x20001014
 8002d6c:	2000107c 	.word	0x2000107c

08002d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	@ 0x28
 8002d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002d7a:	f000 fb11 	bl	80033a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <xTimerCreateTimerTask+0x84>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d021      	beq.n	8002dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002d8e:	1d3a      	adds	r2, r7, #4
 8002d90:	f107 0108 	add.w	r1, r7, #8
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe faa9 	bl	80012f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	9202      	str	r2, [sp, #8]
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	2302      	movs	r3, #2
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	460a      	mov	r2, r1
 8002db0:	4911      	ldr	r1, [pc, #68]	@ (8002df8 <xTimerCreateTimerTask+0x88>)
 8002db2:	4812      	ldr	r0, [pc, #72]	@ (8002dfc <xTimerCreateTimerTask+0x8c>)
 8002db4:	f7ff f85e 	bl	8001e74 <xTaskCreateStatic>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <xTimerCreateTimerTask+0x90>)
 8002dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <xTimerCreateTimerTask+0x90>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	613b      	str	r3, [r7, #16]
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002de8:	697b      	ldr	r3, [r7, #20]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200010b8 	.word	0x200010b8
 8002df8:	08003c80 	.word	0x08003c80
 8002dfc:	08002f3d 	.word	0x08002f3d
 8002e00:	200010bc 	.word	0x200010bc

08002e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <xTimerGenericCommand+0x30>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <xTimerGenericCommand+0x98>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02a      	beq.n	8002e92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	dc18      	bgt.n	8002e80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002e4e:	f7ff fead 	bl	8002bac <xTaskGetSchedulerState>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d109      	bne.n	8002e6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002e58:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <xTimerGenericCommand+0x98>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	f107 0110 	add.w	r1, r7, #16
 8002e60:	2300      	movs	r3, #0
 8002e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e64:	f7fe fc18 	bl	8001698 <xQueueGenericSend>
 8002e68:	6278      	str	r0, [r7, #36]	@ 0x24
 8002e6a:	e012      	b.n	8002e92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <xTimerGenericCommand+0x98>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	f107 0110 	add.w	r1, r7, #16
 8002e74:	2300      	movs	r3, #0
 8002e76:	2200      	movs	r2, #0
 8002e78:	f7fe fc0e 	bl	8001698 <xQueueGenericSend>
 8002e7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002e7e:	e008      	b.n	8002e92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <xTimerGenericCommand+0x98>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	f107 0110 	add.w	r1, r7, #16
 8002e88:	2300      	movs	r3, #0
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	f7fe fd06 	bl	800189c <xQueueGenericSendFromISR>
 8002e90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3728      	adds	r7, #40	@ 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200010b8 	.word	0x200010b8

08002ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eaa:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <prvProcessExpiredTimer+0x98>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fab9 	bl	8001430 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	18d1      	adds	r1, r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6978      	ldr	r0, [r7, #20]
 8002eda:	f000 f8d3 	bl	8003084 <prvInsertTimerInActiveList>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	2100      	movs	r1, #0
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff88 	bl	8002e04 <xTimerGenericCommand>
 8002ef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d114      	bne.n	8002f26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	60fb      	str	r3, [r7, #12]
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	4798      	blx	r3
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200010b0 	.word	0x200010b0

08002f3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f859 	bl	8003000 <prvGetNextExpireTime>
 8002f4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4619      	mov	r1, r3
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f805 	bl	8002f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002f5a:	f000 f8d5 	bl	8003108 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f5e:	bf00      	nop
 8002f60:	e7f0      	b.n	8002f44 <prvTimerTask+0x8>
	...

08002f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002f6e:	f7ff fa39 	bl	80023e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f864 	bl	8003044 <prvSampleTimeNow>
 8002f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d130      	bne.n	8002fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <prvProcessTimerOrBlockTask+0x3c>
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d806      	bhi.n	8002fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002f92:	f7ff fa35 	bl	8002400 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff81 	bl	8002ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002f9e:	e024      	b.n	8002fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002fa6:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <prvProcessTimerOrBlockTask+0x90>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <prvProcessTimerOrBlockTask+0x50>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <prvProcessTimerOrBlockTask+0x52>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff8 <prvProcessTimerOrBlockTask+0x94>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f7fe ff21 	bl	8001e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002fca:	f7ff fa19 	bl	8002400 <xTaskResumeAll>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <prvProcessTimerOrBlockTask+0x98>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
}
 8002fe4:	e001      	b.n	8002fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002fe6:	f7ff fa0b 	bl	8002400 <xTaskResumeAll>
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200010b4 	.word	0x200010b4
 8002ff8:	200010b8 	.word	0x200010b8
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003008:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <prvGetNextExpireTime+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <prvGetNextExpireTime+0x16>
 8003012:	2201      	movs	r2, #1
 8003014:	e000      	b.n	8003018 <prvGetNextExpireTime+0x18>
 8003016:	2200      	movs	r2, #0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <prvGetNextExpireTime+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e001      	b.n	8003034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003034:	68fb      	ldr	r3, [r7, #12]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	200010b0 	.word	0x200010b0

08003044 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800304c:	f7ff fa76 	bl	800253c <xTaskGetTickCount>
 8003050:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <prvSampleTimeNow+0x3c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d205      	bcs.n	8003068 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800305c:	f000 f93a 	bl	80032d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e002      	b.n	800306e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <prvSampleTimeNow+0x3c>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003074:	68fb      	ldr	r3, [r7, #12]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200010c0 	.word	0x200010c0

08003084 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d812      	bhi.n	80030d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e01b      	b.n	80030f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <prvInsertTimerInActiveList+0x7c>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f7fe f979 	bl	80013c0 <vListInsert>
 80030ce:	e012      	b.n	80030f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d206      	bcs.n	80030e6 <prvInsertTimerInActiveList+0x62>
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e007      	b.n	80030f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <prvInsertTimerInActiveList+0x80>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fe f965 	bl	80013c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80030f6:	697b      	ldr	r3, [r7, #20]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200010b4 	.word	0x200010b4
 8003104:	200010b0 	.word	0x200010b0

08003108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08e      	sub	sp, #56	@ 0x38
 800310c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800310e:	e0ce      	b.n	80032ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da19      	bge.n	800314a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	3304      	adds	r3, #4
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	61fb      	str	r3, [r7, #28]
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003140:	6850      	ldr	r0, [r2, #4]
 8003142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	4611      	mov	r1, r2
 8003148:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f2c0 80ae 	blt.w	80032ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	3304      	adds	r3, #4
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe f964 	bl	8001430 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003168:	463b      	mov	r3, r7
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff6a 	bl	8003044 <prvSampleTimeNow>
 8003170:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b09      	cmp	r3, #9
 8003176:	f200 8097 	bhi.w	80032a8 <prvProcessReceivedCommands+0x1a0>
 800317a:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <prvProcessReceivedCommands+0x78>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031a9 	.word	0x080031a9
 800318c:	0800321f 	.word	0x0800321f
 8003190:	08003233 	.word	0x08003233
 8003194:	0800327f 	.word	0x0800327f
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031a9 	.word	0x080031a9
 80031a0:	0800321f 	.word	0x0800321f
 80031a4:	08003233 	.word	0x08003233
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80031a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	18d1      	adds	r1, r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031c8:	f7ff ff5c 	bl	8003084 <prvInsertTimerInActiveList>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d06c      	beq.n	80032ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d061      	beq.n	80032ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	441a      	add	r2, r3
 80031f0:	2300      	movs	r3, #0
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031fa:	f7ff fe03 	bl	8002e04 <xTimerGenericCommand>
 80031fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d152      	bne.n	80032ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	61bb      	str	r3, [r7, #24]
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003230:	e03d      	b.n	80032ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003240:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	617b      	str	r3, [r7, #20]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800326a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	18d1      	adds	r1, r2, r3
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003278:	f7ff ff04 	bl	8003084 <prvInsertTimerInActiveList>
					break;
 800327c:	e017      	b.n	80032ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800328c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800328e:	f000 fb85 	bl	800399c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003292:	e00c      	b.n	80032ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80032a6:	e002      	b.n	80032ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <prvProcessReceivedCommands+0x1a6>
					break;
 80032ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <prvProcessReceivedCommands+0x1c8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1d39      	adds	r1, r7, #4
 80032b4:	2200      	movs	r2, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fb8e 	bl	80019d8 <xQueueReceive>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f47f af26 	bne.w	8003110 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3730      	adds	r7, #48	@ 0x30
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200010b8 	.word	0x200010b8

080032d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032da:	e049      	b.n	8003370 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003398 <prvSwitchTimerLists+0xc4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003398 <prvSwitchTimerLists+0xc4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe f89b 	bl	8001430 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02f      	beq.n	8003370 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	d90e      	bls.n	8003340 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <prvSwitchTimerLists+0xc4>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f7fe f841 	bl	80013c0 <vListInsert>
 800333e:	e017      	b.n	8003370 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003340:	2300      	movs	r3, #0
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	2100      	movs	r1, #0
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fd5a 	bl	8002e04 <xTimerGenericCommand>
 8003350:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	603b      	str	r3, [r7, #0]
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <prvSwitchTimerLists+0xc4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1b0      	bne.n	80032dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800337a:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <prvSwitchTimerLists+0xc4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <prvSwitchTimerLists+0xc8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <prvSwitchTimerLists+0xc4>)
 8003386:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <prvSwitchTimerLists+0xc8>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200010b0 	.word	0x200010b0
 800339c:	200010b4 	.word	0x200010b4

080033a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80033a6:	f000 f929 	bl	80035fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <prvCheckForValidListAndQueue+0x60>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d120      	bne.n	80033f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80033b2:	4814      	ldr	r0, [pc, #80]	@ (8003404 <prvCheckForValidListAndQueue+0x64>)
 80033b4:	f7fd ffb6 	bl	8001324 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80033b8:	4813      	ldr	r0, [pc, #76]	@ (8003408 <prvCheckForValidListAndQueue+0x68>)
 80033ba:	f7fd ffb3 	bl	8001324 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <prvCheckForValidListAndQueue+0x6c>)
 80033c0:	4a10      	ldr	r2, [pc, #64]	@ (8003404 <prvCheckForValidListAndQueue+0x64>)
 80033c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80033c4:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <prvCheckForValidListAndQueue+0x70>)
 80033c6:	4a10      	ldr	r2, [pc, #64]	@ (8003408 <prvCheckForValidListAndQueue+0x68>)
 80033c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <prvCheckForValidListAndQueue+0x74>)
 80033d0:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <prvCheckForValidListAndQueue+0x78>)
 80033d2:	2110      	movs	r1, #16
 80033d4:	200a      	movs	r0, #10
 80033d6:	f7fe f8bf 	bl	8001558 <xQueueGenericCreateStatic>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <prvCheckForValidListAndQueue+0x60>)
 80033de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <prvCheckForValidListAndQueue+0x60>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <prvCheckForValidListAndQueue+0x60>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	490b      	ldr	r1, [pc, #44]	@ (800341c <prvCheckForValidListAndQueue+0x7c>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fce4 	bl	8001dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033f4:	f000 f932 	bl	800365c <vPortExitCritical>
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200010b8 	.word	0x200010b8
 8003404:	20001088 	.word	0x20001088
 8003408:	2000109c 	.word	0x2000109c
 800340c:	200010b0 	.word	0x200010b0
 8003410:	200010b4 	.word	0x200010b4
 8003414:	20001164 	.word	0x20001164
 8003418:	200010c4 	.word	0x200010c4
 800341c:	08003c88 	.word	0x08003c88

08003420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3b04      	subs	r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b04      	subs	r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b04      	subs	r3, #4
 800344e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003450:	4a08      	ldr	r2, [pc, #32]	@ (8003474 <pxPortInitialiseStack+0x54>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3b14      	subs	r3, #20
 800345a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b20      	subs	r3, #32
 8003466:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	08003479 	.word	0x08003479

08003478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <prvTaskExitError+0x54>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d00b      	beq.n	80034a4 <prvTaskExitError+0x2c>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60fb      	str	r3, [r7, #12]
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <prvTaskExitError+0x28>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60bb      	str	r3, [r7, #8]
}
 80034b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034b8:	bf00      	nop
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0fc      	beq.n	80034ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	2000000c 	.word	0x2000000c

080034d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <pxCurrentTCBConst2>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	6808      	ldr	r0, [r1, #0]
 80034d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034da:	f380 8809 	msr	PSP, r0
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f380 8811 	msr	BASEPRI, r0
 80034ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80034ee:	4770      	bx	lr

080034f0 <pxCurrentTCBConst2>:
 80034f0:	20000b88 	.word	0x20000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80034f8:	4806      	ldr	r0, [pc, #24]	@ (8003514 <prvPortStartFirstTask+0x1c>)
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	f380 8808 	msr	MSP, r0
 8003502:	b662      	cpsie	i
 8003504:	b661      	cpsie	f
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	df00      	svc	0
 8003510:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003512:	bf00      	nop
 8003514:	e000ed08 	.word	0xe000ed08

08003518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800351e:	4b32      	ldr	r3, [pc, #200]	@ (80035e8 <xPortStartScheduler+0xd0>)
 8003520:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	22ff      	movs	r2, #255	@ 0xff
 800352e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b2a      	ldr	r3, [pc, #168]	@ (80035ec <xPortStartScheduler+0xd4>)
 8003544:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003546:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <xPortStartScheduler+0xd8>)
 8003548:	2207      	movs	r2, #7
 800354a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800354c:	e009      	b.n	8003562 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800354e:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <xPortStartScheduler+0xd8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3b01      	subs	r3, #1
 8003554:	4a26      	ldr	r2, [pc, #152]	@ (80035f0 <xPortStartScheduler+0xd8>)
 8003556:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b80      	cmp	r3, #128	@ 0x80
 800356c:	d0ef      	beq.n	800354e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800356e:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <xPortStartScheduler+0xd8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	2b04      	cmp	r3, #4
 8003578:	d00b      	beq.n	8003592 <xPortStartScheduler+0x7a>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	60bb      	str	r3, [r7, #8]
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <xPortStartScheduler+0xd8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <xPortStartScheduler+0xd8>)
 800359a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <xPortStartScheduler+0xd8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035a4:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <xPortStartScheduler+0xd8>)
 80035a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035b0:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <xPortStartScheduler+0xdc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <xPortStartScheduler+0xdc>)
 80035b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035bc:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <xPortStartScheduler+0xdc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <xPortStartScheduler+0xdc>)
 80035c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035c8:	f000 f8b8 	bl	800373c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <xPortStartScheduler+0xe0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035d2:	f7ff ff91 	bl	80034f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035d6:	f7ff f879 	bl	80026cc <vTaskSwitchContext>
	prvTaskExitError();
 80035da:	f7ff ff4d 	bl	8003478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000e400 	.word	0xe000e400
 80035ec:	200011b4 	.word	0x200011b4
 80035f0:	200011b8 	.word	0x200011b8
 80035f4:	e000ed20 	.word	0xe000ed20
 80035f8:	2000000c 	.word	0x2000000c

080035fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	607b      	str	r3, [r7, #4]
}
 8003614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003616:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <vPortEnterCritical+0x58>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <vPortEnterCritical+0x58>)
 800361e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <vPortEnterCritical+0x58>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d110      	bne.n	800364a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <vPortEnterCritical+0x5c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <vPortEnterCritical+0x4e>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	603b      	str	r3, [r7, #0]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <vPortEnterCritical+0x4a>
	}
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	2000000c 	.word	0x2000000c
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <vPortExitCritical+0x50>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <vPortExitCritical+0x26>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	607b      	str	r3, [r7, #4]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <vPortExitCritical+0x50>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3b01      	subs	r3, #1
 8003688:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <vPortExitCritical+0x50>)
 800368a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vPortExitCritical+0x50>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <vPortExitCritical+0x44>
 8003694:	2300      	movs	r3, #0
 8003696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f383 8811 	msr	BASEPRI, r3
}
 800369e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036b0:	f3ef 8009 	mrs	r0, PSP
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <pxCurrentTCBConst>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80036c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036ca:	f380 8811 	msr	BASEPRI, r0
 80036ce:	f7fe fffd 	bl	80026cc <vTaskSwitchContext>
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f380 8811 	msr	BASEPRI, r0
 80036da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	6808      	ldr	r0, [r1, #0]
 80036e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036e6:	f380 8809 	msr	PSP, r0
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	4770      	bx	lr

080036f0 <pxCurrentTCBConst>:
 80036f0:	20000b88 	.word	0x20000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop

080036f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	607b      	str	r3, [r7, #4]
}
 8003710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003712:	f7fe ff21 	bl	8002558 <xTaskIncrementTick>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <xPortSysTickHandler+0x40>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f383 8811 	msr	BASEPRI, r3
}
 800372e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <vPortSetupTimerInterrupt+0x30>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003746:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <vPortSetupTimerInterrupt+0x34>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <vPortSetupTimerInterrupt+0x38>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <vPortSetupTimerInterrupt+0x3c>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	4a08      	ldr	r2, [pc, #32]	@ (800377c <vPortSetupTimerInterrupt+0x40>)
 800375a:	3b01      	subs	r3, #1
 800375c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800375e:	4b03      	ldr	r3, [pc, #12]	@ (800376c <vPortSetupTimerInterrupt+0x30>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	e000e010 	.word	0xe000e010
 8003770:	e000e018 	.word	0xe000e018
 8003774:	20000000 	.word	0x20000000
 8003778:	10624dd3 	.word	0x10624dd3
 800377c:	e000e014 	.word	0xe000e014

08003780 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003786:	f3ef 8305 	mrs	r3, IPSR
 800378a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d915      	bls.n	80037be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003792:	4a17      	ldr	r2, [pc, #92]	@ (80037f0 <vPortValidateInterruptPriority+0x70>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <vPortValidateInterruptPriority+0x74>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	7afa      	ldrb	r2, [r7, #11]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d20b      	bcs.n	80037be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	607b      	str	r3, [r7, #4]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80037be:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <vPortValidateInterruptPriority+0x78>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <vPortValidateInterruptPriority+0x7c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90b      	bls.n	80037e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <vPortValidateInterruptPriority+0x62>
	}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	e000e3f0 	.word	0xe000e3f0
 80037f4:	200011b4 	.word	0x200011b4
 80037f8:	e000ed0c 	.word	0xe000ed0c
 80037fc:	200011b8 	.word	0x200011b8

08003800 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800380c:	f7fe fdea 	bl	80023e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003810:	4b5c      	ldr	r3, [pc, #368]	@ (8003984 <pvPortMalloc+0x184>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003818:	f000 f924 	bl	8003a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800381c:	4b5a      	ldr	r3, [pc, #360]	@ (8003988 <pvPortMalloc+0x188>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 8095 	bne.w	8003954 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01e      	beq.n	800386e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003830:	2208      	movs	r2, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	2b00      	cmp	r3, #0
 8003840:	d015      	beq.n	800386e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f023 0307 	bic.w	r3, r3, #7
 8003848:	3308      	adds	r3, #8
 800384a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <pvPortMalloc+0x6e>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	617b      	str	r3, [r7, #20]
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	e7fd      	b.n	800386a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d06f      	beq.n	8003954 <pvPortMalloc+0x154>
 8003874:	4b45      	ldr	r3, [pc, #276]	@ (800398c <pvPortMalloc+0x18c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d86a      	bhi.n	8003954 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800387e:	4b44      	ldr	r3, [pc, #272]	@ (8003990 <pvPortMalloc+0x190>)
 8003880:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003882:	4b43      	ldr	r3, [pc, #268]	@ (8003990 <pvPortMalloc+0x190>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003888:	e004      	b.n	8003894 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d903      	bls.n	80038a6 <pvPortMalloc+0xa6>
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f1      	bne.n	800388a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038a6:	4b37      	ldr	r3, [pc, #220]	@ (8003984 <pvPortMalloc+0x184>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d051      	beq.n	8003954 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2208      	movs	r2, #8
 80038b6:	4413      	add	r3, r2
 80038b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	2308      	movs	r3, #8
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d920      	bls.n	8003914 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <pvPortMalloc+0xfc>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	613b      	str	r3, [r7, #16]
}
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800390e:	69b8      	ldr	r0, [r7, #24]
 8003910:	f000 f90a 	bl	8003b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003914:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <pvPortMalloc+0x18c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <pvPortMalloc+0x18c>)
 8003920:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003922:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <pvPortMalloc+0x18c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <pvPortMalloc+0x194>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d203      	bcs.n	8003936 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800392e:	4b17      	ldr	r3, [pc, #92]	@ (800398c <pvPortMalloc+0x18c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <pvPortMalloc+0x194>)
 8003934:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <pvPortMalloc+0x188>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	431a      	orrs	r2, r3
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800394a:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <pvPortMalloc+0x198>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a11      	ldr	r2, [pc, #68]	@ (8003998 <pvPortMalloc+0x198>)
 8003952:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003954:	f7fe fd54 	bl	8002400 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <pvPortMalloc+0x17a>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60fb      	str	r3, [r7, #12]
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <pvPortMalloc+0x176>
	return pvReturn;
 800397a:	69fb      	ldr	r3, [r7, #28]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3728      	adds	r7, #40	@ 0x28
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20001dc4 	.word	0x20001dc4
 8003988:	20001dd8 	.word	0x20001dd8
 800398c:	20001dc8 	.word	0x20001dc8
 8003990:	20001dbc 	.word	0x20001dbc
 8003994:	20001dcc 	.word	0x20001dcc
 8003998:	20001dd0 	.word	0x20001dd0

0800399c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d04f      	beq.n	8003a4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039ae:	2308      	movs	r3, #8
 80039b0:	425b      	negs	r3, r3
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4413      	add	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <vPortFree+0xbc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <vPortFree+0x46>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60fb      	str	r3, [r7, #12]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <vPortFree+0x66>
	__asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	60bb      	str	r3, [r7, #8]
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	e7fd      	b.n	80039fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <vPortFree+0xbc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01e      	beq.n	8003a4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d11a      	bne.n	8003a4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <vPortFree+0xbc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	401a      	ands	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a28:	f7fe fcdc 	bl	80023e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <vPortFree+0xc0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	4a09      	ldr	r2, [pc, #36]	@ (8003a5c <vPortFree+0xc0>)
 8003a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a3a:	6938      	ldr	r0, [r7, #16]
 8003a3c:	f000 f874 	bl	8003b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a40:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <vPortFree+0xc4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	4a06      	ldr	r2, [pc, #24]	@ (8003a60 <vPortFree+0xc4>)
 8003a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a4a:	f7fe fcd9 	bl	8002400 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20001dd8 	.word	0x20001dd8
 8003a5c:	20001dc8 	.word	0x20001dc8
 8003a60:	20001dd4 	.word	0x20001dd4

08003a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a70:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <prvHeapInit+0xac>)
 8003a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3307      	adds	r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	4a1f      	ldr	r2, [pc, #124]	@ (8003b10 <prvHeapInit+0xac>)
 8003a94:	4413      	add	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <prvHeapInit+0xb0>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <prvHeapInit+0xb0>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4413      	add	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <prvHeapInit+0xb4>)
 8003ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ac6:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <prvHeapInit+0xb4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <prvHeapInit+0xb4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <prvHeapInit+0xb4>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <prvHeapInit+0xb8>)
 8003af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <prvHeapInit+0xbc>)
 8003afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <prvHeapInit+0xc0>)
 8003afe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200011bc 	.word	0x200011bc
 8003b14:	20001dbc 	.word	0x20001dbc
 8003b18:	20001dc4 	.word	0x20001dc4
 8003b1c:	20001dcc 	.word	0x20001dcc
 8003b20:	20001dc8 	.word	0x20001dc8
 8003b24:	20001dd8 	.word	0x20001dd8

08003b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b30:	4b27      	ldr	r3, [pc, #156]	@ (8003bd0 <prvInsertBlockIntoFreeList+0xa8>)
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e002      	b.n	8003b3c <prvInsertBlockIntoFreeList+0x14>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d8f7      	bhi.n	8003b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	4413      	add	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d108      	bne.n	8003b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d118      	bne.n	8003bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <prvInsertBlockIntoFreeList+0xac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d00d      	beq.n	8003ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e008      	b.n	8003bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <prvInsertBlockIntoFreeList+0xac>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e003      	b.n	8003bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d002      	beq.n	8003bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20001dbc 	.word	0x20001dbc
 8003bd4:	20001dc4 	.word	0x20001dc4

08003bd8 <memset>:
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4402      	add	r2, r0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d100      	bne.n	8003be2 <memset+0xa>
 8003be0:	4770      	bx	lr
 8003be2:	f803 1b01 	strb.w	r1, [r3], #1
 8003be6:	e7f9      	b.n	8003bdc <memset+0x4>

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	2600      	movs	r6, #0
 8003bec:	4d0c      	ldr	r5, [pc, #48]	@ (8003c20 <__libc_init_array+0x38>)
 8003bee:	4c0d      	ldr	r4, [pc, #52]	@ (8003c24 <__libc_init_array+0x3c>)
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	42a6      	cmp	r6, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	f000 f828 	bl	8003c4c <_init>
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	4d0a      	ldr	r5, [pc, #40]	@ (8003c28 <__libc_init_array+0x40>)
 8003c00:	4c0a      	ldr	r4, [pc, #40]	@ (8003c2c <__libc_init_array+0x44>)
 8003c02:	1b64      	subs	r4, r4, r5
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	42a6      	cmp	r6, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c10:	4798      	blx	r3
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1a:	4798      	blx	r3
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	08003cb4 	.word	0x08003cb4
 8003c24:	08003cb4 	.word	0x08003cb4
 8003c28:	08003cb4 	.word	0x08003cb4
 8003c2c:	08003cb8 	.word	0x08003cb8

08003c30 <memcpy>:
 8003c30:	440a      	add	r2, r1
 8003c32:	4291      	cmp	r1, r2
 8003c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c38:	d100      	bne.n	8003c3c <memcpy+0xc>
 8003c3a:	4770      	bx	lr
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c42:	4291      	cmp	r1, r2
 8003c44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c48:	d1f9      	bne.n	8003c3e <memcpy+0xe>
 8003c4a:	bd10      	pop	{r4, pc}

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
