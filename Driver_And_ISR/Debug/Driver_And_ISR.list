
Driver_And_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003708  08003708  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003708  08003708  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003710  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001184  20000010  08003720  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001194  08003720  00005194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad1  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002271  00000000  00000000  00010b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00012d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000863  00000000  00000000  00013870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002537  00000000  00000000  000140d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d143  00000000  00000000  0001660a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fd4  00000000  00000000  0002374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc0  00000000  00000000  000ac764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000af324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003688 	.word	0x08003688

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003688 	.word	0x08003688

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 f9bf 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f82d 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f891 	bl	8000284 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f865 	bl	8000230 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CmdUartQueue = xQueueCreate(QUEUE_LENGTH, sizeof(queue_data));
 8000166:	2200      	movs	r2, #0
 8000168:	2108      	movs	r1, #8
 800016a:	2008      	movs	r0, #8
 800016c:	f002 f89a 	bl	80022a4 <xQueueGenericCreate>
 8000170:	4603      	mov	r3, r0
 8000172:	4a0c      	ldr	r2, [pc, #48]	@ (80001a4 <main+0x54>)
 8000174:	6013      	str	r3, [r2, #0]
  assert_param(CmdUartQueue);

  assert_param(xTaskCreate(UartTaskPoll, "UartTaskPoll", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);

  if(xTaskCreate(TaskPrintf, "TaskPrintf", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) != pdPASS)
 8000176:	2300      	movs	r3, #0
 8000178:	9301      	str	r3, [sp, #4]
 800017a:	2301      	movs	r3, #1
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	2300      	movs	r3, #0
 8000180:	2280      	movs	r2, #128	@ 0x80
 8000182:	4909      	ldr	r1, [pc, #36]	@ (80001a8 <main+0x58>)
 8000184:	4809      	ldr	r0, [pc, #36]	@ (80001ac <main+0x5c>)
 8000186:	f002 fa5b 	bl	8002640 <xTaskCreate>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d007      	beq.n	80001a0 <main+0x50>
  {
	  // printf create task failed
	  HAL_UART_Transmit(&huart1, (uint8_t*)"Task_Create_Error", strlen("Task_Create_Error"), 10);
 8000190:	230a      	movs	r3, #10
 8000192:	2211      	movs	r2, #17
 8000194:	4906      	ldr	r1, [pc, #24]	@ (80001b0 <main+0x60>)
 8000196:	4807      	ldr	r0, [pc, #28]	@ (80001b4 <main+0x64>)
 8000198:	f001 f9a4 	bl	80014e4 <HAL_UART_Transmit>
	  while(1)
 800019c:	bf00      	nop
 800019e:	e7fd      	b.n	800019c <main+0x4c>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <main+0x50>
 80001a2:	bf00      	nop
 80001a4:	20000074 	.word	0x20000074
 80001a8:	080036a0 	.word	0x080036a0
 80001ac:	080002b1 	.word	0x080002b1
 80001b0:	080036ac 	.word	0x080036ac
 80001b4:	2000002c 	.word	0x2000002c

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	@ 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	@ 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f003 fa24 	bl	8003614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001da:	2302      	movs	r3, #2
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e2:	2310      	movs	r3, #16
 80001e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e6:	2300      	movs	r3, #0
 80001e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 fd18 	bl	8000c24 <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001fa:	f000 f87d 	bl	80002f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000202:	2300      	movs	r3, #0
 8000204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f000 ff86 	bl	8001128 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000222:	f000 f869 	bl	80002f8 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	@ 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000234:	4b11      	ldr	r3, [pc, #68]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 8000236:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <MX_USART1_UART_Init+0x50>)
 8000238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 800023c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000242:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800024e:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 8000256:	220c      	movs	r2, #12
 8000258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000266:	4805      	ldr	r0, [pc, #20]	@ (800027c <MX_USART1_UART_Init+0x4c>)
 8000268:	f001 f8ec 	bl	8001444 <HAL_UART_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000272:	f000 f841 	bl	80002f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000002c 	.word	0x2000002c
 8000280:	40013800 	.word	0x40013800

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028a:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <MX_GPIO_Init+0x28>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <MX_GPIO_Init+0x28>)
 8000290:	f043 0304 	orr.w	r3, r3, #4
 8000294:	6193      	str	r3, [r2, #24]
 8000296:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <MX_GPIO_Init+0x28>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f003 0304 	and.w	r3, r3, #4
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <TaskPrintf>:

		vTaskDelay(pdMS_TO_TICKS(10));
	}
}
void TaskPrintf(void *argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	uint8_t queue_data[8];
	while(1)
	{
		if(xQueueReceive(CmdUartQueue, queue_data, portMAX_DELAY) == pdTRUE)
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <TaskPrintf+0x3c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f107 0108 	add.w	r1, r7, #8
 80002c0:	f04f 32ff 	mov.w	r2, #4294967295
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 f84b 	bl	8002360 <xQueueReceive>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d1f3      	bne.n	80002b8 <TaskPrintf+0x8>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"Echo_Data: ", strlen("Echo_Data"), 10);
 80002d0:	230a      	movs	r3, #10
 80002d2:	2209      	movs	r2, #9
 80002d4:	4906      	ldr	r1, [pc, #24]	@ (80002f0 <TaskPrintf+0x40>)
 80002d6:	4807      	ldr	r0, [pc, #28]	@ (80002f4 <TaskPrintf+0x44>)
 80002d8:	f001 f904 	bl	80014e4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, queue_data, sizeof(queue_data), 10);
 80002dc:	f107 0108 	add.w	r1, r7, #8
 80002e0:	230a      	movs	r3, #10
 80002e2:	2208      	movs	r2, #8
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <TaskPrintf+0x44>)
 80002e6:	f001 f8fd 	bl	80014e4 <HAL_UART_Transmit>
		if(xQueueReceive(CmdUartQueue, queue_data, portMAX_DELAY) == pdTRUE)
 80002ea:	e7e5      	b.n	80002b8 <TaskPrintf+0x8>
 80002ec:	20000074 	.word	0x20000074
 80002f0:	080036c0 	.word	0x080036c0
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fc:	b672      	cpsid	i
}
 80002fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <Error_Handler+0x8>

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	4b18      	ldr	r3, [pc, #96]	@ (800036c <HAL_MspInit+0x68>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a17      	ldr	r2, [pc, #92]	@ (800036c <HAL_MspInit+0x68>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b15      	ldr	r3, [pc, #84]	@ (800036c <HAL_MspInit+0x68>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b12      	ldr	r3, [pc, #72]	@ (800036c <HAL_MspInit+0x68>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a11      	ldr	r2, [pc, #68]	@ (800036c <HAL_MspInit+0x68>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <HAL_MspInit+0x68>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	210f      	movs	r1, #15
 800033e:	f06f 0001 	mvn.w	r0, #1
 8000342:	f000 fa02 	bl	800074a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <HAL_MspInit+0x6c>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4a04      	ldr	r2, [pc, #16]	@ (8000370 <HAL_MspInit+0x6c>)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40010000 	.word	0x40010000

08000374 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a20      	ldr	r2, [pc, #128]	@ (8000410 <HAL_UART_MspInit+0x9c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d139      	bne.n	8000408 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000394:	4b1f      	ldr	r3, [pc, #124]	@ (8000414 <HAL_UART_MspInit+0xa0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a1e      	ldr	r2, [pc, #120]	@ (8000414 <HAL_UART_MspInit+0xa0>)
 800039a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <HAL_UART_MspInit+0xa0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <HAL_UART_MspInit+0xa0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a18      	ldr	r2, [pc, #96]	@ (8000414 <HAL_UART_MspInit+0xa0>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <HAL_UART_MspInit+0xa0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80003c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ca:	2302      	movs	r3, #2
 80003cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ce:	2303      	movs	r3, #3
 80003d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	480f      	ldr	r0, [pc, #60]	@ (8000418 <HAL_UART_MspInit+0xa4>)
 80003da:	f000 fa9f 	bl	800091c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	@ (8000418 <HAL_UART_MspInit+0xa4>)
 80003f4:	f000 fa92 	bl	800091c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2105      	movs	r1, #5
 80003fc:	2025      	movs	r0, #37	@ 0x25
 80003fe:	f000 f9a4 	bl	800074a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000402:	2025      	movs	r0, #37	@ 0x25
 8000404:	f000 f9bd 	bl	8000782 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40013800 	.word	0x40013800
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <NMI_Handler+0x4>

08000424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <BusFault_Handler+0x4>

0800043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <UsageFault_Handler+0x4>

08000444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000454:	f000 f886 	bl	8000564 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000458:	f002 fd6c 	bl	8002f34 <xTaskGetSchedulerState>
 800045c:	4603      	mov	r3, r0
 800045e:	2b01      	cmp	r3, #1
 8000460:	d001      	beq.n	8000466 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000462:	f002 fec9 	bl	80031f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000470:	4802      	ldr	r0, [pc, #8]	@ (800047c <USART1_IRQHandler+0x10>)
 8000472:	f001 f8c3 	bl	80015fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000002c 	.word	0x2000002c

08000480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800048c:	f7ff fff8 	bl	8000480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480b      	ldr	r0, [pc, #44]	@ (80004c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000492:	490c      	ldr	r1, [pc, #48]	@ (80004c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000494:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a09      	ldr	r2, [pc, #36]	@ (80004cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004a8:	4c09      	ldr	r4, [pc, #36]	@ (80004d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004b6:	f003 f8b5 	bl	8003624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff fe49 	bl	8000150 <main>
  bx lr
 80004be:	4770      	bx	lr
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004c8:	08003710 	.word	0x08003710
  ldr r2, =_sbss
 80004cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004d0:	20001194 	.word	0x20001194

080004d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC1_2_IRQHandler>
	...

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <HAL_Init+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	@ (8000500 <HAL_Init+0x28>)
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f000 f923 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ee:	200f      	movs	r0, #15
 80004f0:	f000 f808 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f4:	f7ff ff06 	bl	8000304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <HAL_InitTick+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_InitTick+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f93b 	bl	800079e <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	e00e      	b.n	8000550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80a      	bhi.n	800054e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f903 	bl	800074a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <HAL_InitTick+0x5c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000000 	.word	0x20000000
 800055c:	20000008 	.word	0x20000008
 8000560:	20000004 	.word	0x20000004

08000564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <HAL_IncTick+0x1c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <HAL_IncTick+0x20>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a03      	ldr	r2, [pc, #12]	@ (8000584 <HAL_IncTick+0x20>)
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	20000008 	.word	0x20000008
 8000584:	20000078 	.word	0x20000078

08000588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;
 800058c:	4b02      	ldr	r3, [pc, #8]	@ (8000598 <HAL_GetTick+0x10>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	20000078 	.word	0x20000078

0800059c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ce:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <__NVIC_GetPriorityGrouping+0x18>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 0307 	and.w	r3, r3, #7
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	2b00      	cmp	r3, #0
 8000610:	db0b      	blt.n	800062a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 021f 	and.w	r2, r3, #31
 8000618:	4906      	ldr	r1, [pc, #24]	@ (8000634 <__NVIC_EnableIRQ+0x34>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	095b      	lsrs	r3, r3, #5
 8000620:	2001      	movs	r0, #1
 8000622:	fa00 f202 	lsl.w	r2, r0, r2
 8000626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	@ (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	@ (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	@ 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	@ 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000700:	d301      	bcc.n	8000706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2301      	movs	r3, #1
 8000704:	e00f      	b.n	8000726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <SysTick_Config+0x40>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070e:	210f      	movs	r1, #15
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f7ff ff90 	bl	8000638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <SysTick_Config+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <SysTick_Config+0x40>)
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff2d 	bl	800059c <__NVIC_SetPriorityGrouping>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800075c:	f7ff ff42 	bl	80005e4 <__NVIC_GetPriorityGrouping>
 8000760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	6978      	ldr	r0, [r7, #20]
 8000768:	f7ff ff90 	bl	800068c <NVIC_EncodePriority>
 800076c:	4602      	mov	r2, r0
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff5f 	bl	8000638 <__NVIC_SetPriority>
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff35 	bl	8000600 <__NVIC_EnableIRQ>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffa2 	bl	80006f0 <SysTick_Config>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d008      	beq.n	80007e0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2204      	movs	r2, #4
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	e020      	b.n	8000822 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 020e 	bic.w	r2, r2, #14
 80007ee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 0201 	bic.w	r2, r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000808:	2101      	movs	r1, #1
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000820:	7bfb      	ldrb	r3, [r7, #15]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b02      	cmp	r3, #2
 8000842:	d005      	beq.n	8000850 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2204      	movs	r2, #4
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e051      	b.n	80008f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 020e 	bic.w	r2, r2, #14
 800085e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0201 	bic.w	r2, r2, #1
 800086e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a22      	ldr	r2, [pc, #136]	@ (8000900 <HAL_DMA_Abort_IT+0xd4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d029      	beq.n	80008ce <HAL_DMA_Abort_IT+0xa2>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a21      	ldr	r2, [pc, #132]	@ (8000904 <HAL_DMA_Abort_IT+0xd8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d022      	beq.n	80008ca <HAL_DMA_Abort_IT+0x9e>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1f      	ldr	r2, [pc, #124]	@ (8000908 <HAL_DMA_Abort_IT+0xdc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d01a      	beq.n	80008c4 <HAL_DMA_Abort_IT+0x98>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1e      	ldr	r2, [pc, #120]	@ (800090c <HAL_DMA_Abort_IT+0xe0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d012      	beq.n	80008be <HAL_DMA_Abort_IT+0x92>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <HAL_DMA_Abort_IT+0xe4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d00a      	beq.n	80008b8 <HAL_DMA_Abort_IT+0x8c>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <HAL_DMA_Abort_IT+0xe8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d102      	bne.n	80008b2 <HAL_DMA_Abort_IT+0x86>
 80008ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008b0:	e00e      	b.n	80008d0 <HAL_DMA_Abort_IT+0xa4>
 80008b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008b6:	e00b      	b.n	80008d0 <HAL_DMA_Abort_IT+0xa4>
 80008b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008bc:	e008      	b.n	80008d0 <HAL_DMA_Abort_IT+0xa4>
 80008be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c2:	e005      	b.n	80008d0 <HAL_DMA_Abort_IT+0xa4>
 80008c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c8:	e002      	b.n	80008d0 <HAL_DMA_Abort_IT+0xa4>
 80008ca:	2310      	movs	r3, #16
 80008cc:	e000      	b.n	80008d0 <HAL_DMA_Abort_IT+0xa4>
 80008ce:	2301      	movs	r3, #1
 80008d0:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <HAL_DMA_Abort_IT+0xec>)
 80008d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d003      	beq.n	80008f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	4798      	blx	r3
    } 
  }
  return status;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020008 	.word	0x40020008
 8000904:	4002001c 	.word	0x4002001c
 8000908:	40020030 	.word	0x40020030
 800090c:	40020044 	.word	0x40020044
 8000910:	40020058 	.word	0x40020058
 8000914:	4002006c 	.word	0x4002006c
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b08b      	sub	sp, #44	@ 0x2c
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e169      	b.n	8000c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000930:	2201      	movs	r2, #1
 8000932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	429a      	cmp	r2, r3
 800094a:	f040 8158 	bne.w	8000bfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	4a9a      	ldr	r2, [pc, #616]	@ (8000bbc <HAL_GPIO_Init+0x2a0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d05e      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000958:	4a98      	ldr	r2, [pc, #608]	@ (8000bbc <HAL_GPIO_Init+0x2a0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d875      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800095e:	4a98      	ldr	r2, [pc, #608]	@ (8000bc0 <HAL_GPIO_Init+0x2a4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d058      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000964:	4a96      	ldr	r2, [pc, #600]	@ (8000bc0 <HAL_GPIO_Init+0x2a4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d86f      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800096a:	4a96      	ldr	r2, [pc, #600]	@ (8000bc4 <HAL_GPIO_Init+0x2a8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d052      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000970:	4a94      	ldr	r2, [pc, #592]	@ (8000bc4 <HAL_GPIO_Init+0x2a8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d869      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000976:	4a94      	ldr	r2, [pc, #592]	@ (8000bc8 <HAL_GPIO_Init+0x2ac>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d04c      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 800097c:	4a92      	ldr	r2, [pc, #584]	@ (8000bc8 <HAL_GPIO_Init+0x2ac>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d863      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000982:	4a92      	ldr	r2, [pc, #584]	@ (8000bcc <HAL_GPIO_Init+0x2b0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d046      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
 8000988:	4a90      	ldr	r2, [pc, #576]	@ (8000bcc <HAL_GPIO_Init+0x2b0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d85d      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 800098e:	2b12      	cmp	r3, #18
 8000990:	d82a      	bhi.n	80009e8 <HAL_GPIO_Init+0xcc>
 8000992:	2b12      	cmp	r3, #18
 8000994:	d859      	bhi.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000996:	a201      	add	r2, pc, #4	@ (adr r2, 800099c <HAL_GPIO_Init+0x80>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000a17 	.word	0x08000a17
 80009a0:	080009f1 	.word	0x080009f1
 80009a4:	08000a03 	.word	0x08000a03
 80009a8:	08000a45 	.word	0x08000a45
 80009ac:	08000a4b 	.word	0x08000a4b
 80009b0:	08000a4b 	.word	0x08000a4b
 80009b4:	08000a4b 	.word	0x08000a4b
 80009b8:	08000a4b 	.word	0x08000a4b
 80009bc:	08000a4b 	.word	0x08000a4b
 80009c0:	08000a4b 	.word	0x08000a4b
 80009c4:	08000a4b 	.word	0x08000a4b
 80009c8:	08000a4b 	.word	0x08000a4b
 80009cc:	08000a4b 	.word	0x08000a4b
 80009d0:	08000a4b 	.word	0x08000a4b
 80009d4:	08000a4b 	.word	0x08000a4b
 80009d8:	08000a4b 	.word	0x08000a4b
 80009dc:	08000a4b 	.word	0x08000a4b
 80009e0:	080009f9 	.word	0x080009f9
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	4a79      	ldr	r2, [pc, #484]	@ (8000bd0 <HAL_GPIO_Init+0x2b4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ee:	e02c      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e029      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	3304      	adds	r3, #4
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e024      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	3308      	adds	r3, #8
 8000a08:	623b      	str	r3, [r7, #32]
          break;
 8000a0a:	e01f      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	330c      	adds	r3, #12
 8000a12:	623b      	str	r3, [r7, #32]
          break;
 8000a14:	e01a      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e013      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d105      	bne.n	8000a38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	611a      	str	r2, [r3, #16]
          break;
 8000a36:	e009      	b.n	8000a4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	615a      	str	r2, [r3, #20]
          break;
 8000a42:	e003      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x130>
          break;
 8000a4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2bff      	cmp	r3, #255	@ 0xff
 8000a50:	d801      	bhi.n	8000a56 <HAL_GPIO_Init+0x13a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	e001      	b.n	8000a5a <HAL_GPIO_Init+0x13e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2bff      	cmp	r3, #255	@ 0xff
 8000a60:	d802      	bhi.n	8000a68 <HAL_GPIO_Init+0x14c>
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x152>
 8000a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6a:	3b08      	subs	r3, #8
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	210f      	movs	r1, #15
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	401a      	ands	r2, r3
 8000a80:	6a39      	ldr	r1, [r7, #32]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80b1 	beq.w	8000bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd4 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ab4:	4a48      	ldr	r2, [pc, #288]	@ (8000bd8 <HAL_GPIO_Init+0x2bc>)
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a40      	ldr	r2, [pc, #256]	@ (8000bdc <HAL_GPIO_Init+0x2c0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1ec>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8000be0 <HAL_GPIO_Init+0x2c4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1e8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3e      	ldr	r2, [pc, #248]	@ (8000be4 <HAL_GPIO_Init+0x2c8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3d      	ldr	r2, [pc, #244]	@ (8000be8 <HAL_GPIO_Init+0x2cc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1e0>
 8000af8:	2303      	movs	r3, #3
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000afc:	2304      	movs	r3, #4
 8000afe:	e004      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e002      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <HAL_GPIO_Init+0x1ee>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b0c:	f002 0203 	and.w	r2, r2, #3
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	4093      	lsls	r3, r2
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b1a:	492f      	ldr	r1, [pc, #188]	@ (8000bd8 <HAL_GPIO_Init+0x2bc>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3302      	adds	r3, #2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b34:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b36:	689a      	ldr	r2, [r3, #8]
 8000b38:	492c      	ldr	r1, [pc, #176]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	608b      	str	r3, [r1, #8]
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b42:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4928      	ldr	r1, [pc, #160]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b5c:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	4922      	ldr	r1, [pc, #136]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60cb      	str	r3, [r1, #12]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	491e      	ldr	r1, [pc, #120]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	4918      	ldr	r1, [pc, #96]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	604b      	str	r3, [r1, #4]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4914      	ldr	r1, [pc, #80]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d021      	beq.n	8000bf0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	490e      	ldr	r1, [pc, #56]	@ (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
 8000bb8:	e021      	b.n	8000bfe <HAL_GPIO_Init+0x2e2>
 8000bba:	bf00      	nop
 8000bbc:	10320000 	.word	0x10320000
 8000bc0:	10310000 	.word	0x10310000
 8000bc4:	10220000 	.word	0x10220000
 8000bc8:	10210000 	.word	0x10210000
 8000bcc:	10120000 	.word	0x10120000
 8000bd0:	10110000 	.word	0x10110000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	40011000 	.word	0x40011000
 8000be8:	40011400 	.word	0x40011400
 8000bec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_GPIO_Init+0x304>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4909      	ldr	r1, [pc, #36]	@ (8000c20 <HAL_GPIO_Init+0x304>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	3301      	adds	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f47f ae8e 	bne.w	8000930 <HAL_GPIO_Init+0x14>
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	372c      	adds	r7, #44	@ 0x2c
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e272      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8087 	beq.w	8000d52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c44:	4b92      	ldr	r3, [pc, #584]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d00c      	beq.n	8000c6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c50:	4b8f      	ldr	r3, [pc, #572]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d112      	bne.n	8000c82 <HAL_RCC_OscConfig+0x5e>
 8000c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c68:	d10b      	bne.n	8000c82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6a:	4b89      	ldr	r3, [pc, #548]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d06c      	beq.n	8000d50 <HAL_RCC_OscConfig+0x12c>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d168      	bne.n	8000d50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e24c      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x76>
 8000c8c:	4b80      	ldr	r3, [pc, #512]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a7f      	ldr	r2, [pc, #508]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e02e      	b.n	8000cf8 <HAL_RCC_OscConfig+0xd4>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x98>
 8000ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a7a      	ldr	r2, [pc, #488]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b78      	ldr	r3, [pc, #480]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a77      	ldr	r2, [pc, #476]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e01d      	b.n	8000cf8 <HAL_RCC_OscConfig+0xd4>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xbc>
 8000cc6:	4b72      	ldr	r3, [pc, #456]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a71      	ldr	r2, [pc, #452]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b6f      	ldr	r3, [pc, #444]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e00b      	b.n	8000cf8 <HAL_RCC_OscConfig+0xd4>
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a6a      	ldr	r2, [pc, #424]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b68      	ldr	r3, [pc, #416]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a67      	ldr	r2, [pc, #412]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fc42 	bl	8000588 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fc3e 	bl	8000588 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	@ 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e200      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0xe4>
 8000d26:	e014      	b.n	8000d52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fc2e 	bl	8000588 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d30:	f7ff fc2a 	bl	8000588 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b64      	cmp	r3, #100	@ 0x64
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e1ec      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	4b53      	ldr	r3, [pc, #332]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0x10c>
 8000d4e:	e000      	b.n	8000d52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d063      	beq.n	8000e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d5e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00b      	beq.n	8000d82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d6a:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d11c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x18c>
 8000d76:	4b46      	ldr	r3, [pc, #280]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d116      	bne.n	8000db0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d82:	4b43      	ldr	r3, [pc, #268]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x176>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d001      	beq.n	8000d9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e1c0      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4939      	ldr	r1, [pc, #228]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	e03a      	b.n	8000e26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d020      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <HAL_RCC_OscConfig+0x270>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fbe3 	bl	8000588 <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fbdf 	bl	8000588 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e1a1      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4927      	ldr	r1, [pc, #156]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	600b      	str	r3, [r1, #0]
 8000df8:	e015      	b.n	8000e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fbc2 	bl	8000588 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e08:	f7ff fbbe 	bl	8000588 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e180      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d03a      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d019      	beq.n	8000e6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <HAL_RCC_OscConfig+0x274>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e40:	f7ff fba2 	bl	8000588 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e48:	f7ff fb9e 	bl	8000588 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e160      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 face 	bl	8001408 <RCC_Delay>
 8000e6c:	e01c      	b.n	8000ea8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_RCC_OscConfig+0x274>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e74:	f7ff fb88 	bl	8000588 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7a:	e00f      	b.n	8000e9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fb84 	bl	8000588 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d908      	bls.n	8000e9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e146      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	42420000 	.word	0x42420000
 8000e98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9c:	4b92      	ldr	r3, [pc, #584]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e9      	bne.n	8000e7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a6 	beq.w	8001002 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eba:	4b8b      	ldr	r3, [pc, #556]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b88      	ldr	r3, [pc, #544]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a87      	ldr	r2, [pc, #540]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b85      	ldr	r3, [pc, #532]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b82      	ldr	r3, [pc, #520]	@ (80010ec <HAL_RCC_OscConfig+0x4c8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d118      	bne.n	8000f20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eee:	4b7f      	ldr	r3, [pc, #508]	@ (80010ec <HAL_RCC_OscConfig+0x4c8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80010ec <HAL_RCC_OscConfig+0x4c8>)
 8000ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb45 	bl	8000588 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f02:	f7ff fb41 	bl	8000588 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b64      	cmp	r3, #100	@ 0x64
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e103      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	4b75      	ldr	r3, [pc, #468]	@ (80010ec <HAL_RCC_OscConfig+0x4c8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d106      	bne.n	8000f36 <HAL_RCC_OscConfig+0x312>
 8000f28:	4b6f      	ldr	r3, [pc, #444]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	e02d      	b.n	8000f92 <HAL_RCC_OscConfig+0x36e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x334>
 8000f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a69      	ldr	r2, [pc, #420]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6213      	str	r3, [r2, #32]
 8000f4a:	4b67      	ldr	r3, [pc, #412]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a66      	ldr	r2, [pc, #408]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	f023 0304 	bic.w	r3, r3, #4
 8000f54:	6213      	str	r3, [r2, #32]
 8000f56:	e01c      	b.n	8000f92 <HAL_RCC_OscConfig+0x36e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	d10c      	bne.n	8000f7a <HAL_RCC_OscConfig+0x356>
 8000f60:	4b61      	ldr	r3, [pc, #388]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a60      	ldr	r2, [pc, #384]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6213      	str	r3, [r2, #32]
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a5d      	ldr	r2, [pc, #372]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	e00b      	b.n	8000f92 <HAL_RCC_OscConfig+0x36e>
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	4b58      	ldr	r3, [pc, #352]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a57      	ldr	r2, [pc, #348]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 0304 	bic.w	r3, r3, #4
 8000f90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d015      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff faf5 	bl	8000588 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff faf1 	bl	8000588 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e0b1      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0ee      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x37e>
 8000fc4:	e014      	b.n	8000ff0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fadf 	bl	8000588 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	e00a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fce:	f7ff fadb 	bl	8000588 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e09b      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe4:	4b40      	ldr	r3, [pc, #256]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1ee      	bne.n	8000fce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d105      	bne.n	8001002 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8087 	beq.w	800111a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d061      	beq.n	80010dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d146      	bne.n	80010ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001020:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <HAL_RCC_OscConfig+0x4cc>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff faaf 	bl	8000588 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff faab 	bl	8000588 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e06d      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001040:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001054:	d108      	bne.n	8001068 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	4921      	ldr	r1, [pc, #132]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001068:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a19      	ldr	r1, [r3, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001078:	430b      	orrs	r3, r1
 800107a:	491b      	ldr	r1, [pc, #108]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <HAL_RCC_OscConfig+0x4cc>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fa7f 	bl	8000588 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fa7b 	bl	8000588 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e03d      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x46a>
 80010ac:	e035      	b.n	800111a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_RCC_OscConfig+0x4cc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fa68 	bl	8000588 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010bc:	f7ff fa64 	bl	8000588 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e026      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x498>
 80010da:	e01e      	b.n	800111a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d107      	bne.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e019      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40007000 	.word	0x40007000
 80010f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_RCC_OscConfig+0x500>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	429a      	cmp	r2, r3
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	429a      	cmp	r2, r3
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0d0      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800113c:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d910      	bls.n	800116c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114a:	4b67      	ldr	r3, [pc, #412]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 0207 	bic.w	r2, r3, #7
 8001152:	4965      	ldr	r1, [pc, #404]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a58      	ldr	r2, [pc, #352]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800118e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d040      	beq.n	8001248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d115      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d107      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e6:	4b41      	ldr	r3, [pc, #260]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e073      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06b      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f023 0203 	bic.w	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4936      	ldr	r1, [pc, #216]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001218:	f7ff f9b6 	bl	8000588 <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	e00a      	b.n	8001236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001220:	f7ff f9b2 	bl	8000588 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e053      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 020c 	and.w	r2, r3, #12
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	429a      	cmp	r2, r3
 8001246:	d1eb      	bne.n	8001220 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d210      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 0207 	bic.w	r2, r3, #7
 800125e:	4922      	ldr	r1, [pc, #136]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f821 	bl	80012fc <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c8>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_RCC_ClockConfig+0x1cc>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_ClockConfig+0x1d0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f914 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	080036dc 	.word	0x080036dc
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <HAL_RCC_GetSysClockFreq+0x94>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b04      	cmp	r3, #4
 8001324:	d002      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x30>
 8001326:	2b08      	cmp	r3, #8
 8001328:	d003      	beq.n	8001332 <HAL_RCC_GetSysClockFreq+0x36>
 800132a:	e027      	b.n	800137c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_RCC_GetSysClockFreq+0x98>)
 800132e:	613b      	str	r3, [r7, #16]
      break;
 8001330:	e027      	b.n	8001382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	0c9b      	lsrs	r3, r3, #18
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <HAL_RCC_GetSysClockFreq+0x9c>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d010      	beq.n	800136c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_RCC_GetSysClockFreq+0x94>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	0c5b      	lsrs	r3, r3, #17
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	4a11      	ldr	r2, [pc, #68]	@ (800139c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <HAL_RCC_GetSysClockFreq+0x98>)
 800135e:	fb03 f202 	mul.w	r2, r3, r2
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e004      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	613b      	str	r3, [r7, #16]
      break;
 800137a:	e002      	b.n	8001382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_RCC_GetSysClockFreq+0x98>)
 800137e:	613b      	str	r3, [r7, #16]
      break;
 8001380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001382:	693b      	ldr	r3, [r7, #16]
}
 8001384:	4618      	mov	r0, r3
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	007a1200 	.word	0x007a1200
 8001398:	080036f4 	.word	0x080036f4
 800139c:	08003704 	.word	0x08003704
 80013a0:	003d0900 	.word	0x003d0900

080013a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a8:	4b02      	ldr	r3, [pc, #8]	@ (80013b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000000 	.word	0x20000000

080013b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013bc:	f7ff fff2 	bl	80013a4 <HAL_RCC_GetHCLKFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4903      	ldr	r1, [pc, #12]	@ (80013dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	080036ec 	.word	0x080036ec

080013e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_RCC_GetHCLKFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	0adb      	lsrs	r3, r3, #11
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4903      	ldr	r1, [pc, #12]	@ (8001404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	080036ec 	.word	0x080036ec

08001408 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <RCC_Delay+0x34>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <RCC_Delay+0x38>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0a5b      	lsrs	r3, r3, #9
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001424:	bf00      	nop
  }
  while (Delay --);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	60fa      	str	r2, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f9      	bne.n	8001424 <RCC_Delay+0x1c>
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000000 	.word	0x20000000
 8001440:	10624dd3 	.word	0x10624dd3

08001444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e042      	b.n	80014dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7fe ff82 	bl	8000374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2224      	movs	r2, #36	@ 0x24
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fd63 	bl	8001f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800149c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b20      	cmp	r3, #32
 8001502:	d175      	bne.n	80015f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <HAL_UART_Transmit+0x2c>
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e06e      	b.n	80015f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2221      	movs	r2, #33	@ 0x21
 800151e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001522:	f7ff f831 	bl	8000588 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	88fa      	ldrh	r2, [r7, #6]
 8001532:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800153c:	d108      	bne.n	8001550 <HAL_UART_Transmit+0x6c>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	e003      	b.n	8001558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001558:	e02e      	b.n	80015b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2200      	movs	r2, #0
 8001562:	2180      	movs	r1, #128	@ 0x80
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 fb01 	bl	8001b6c <UART_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2220      	movs	r2, #32
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e03a      	b.n	80015f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	3302      	adds	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	e007      	b.n	80015aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1cb      	bne.n	800155a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	@ 0x40
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 facd 	bl	8001b6c <UART_WaitOnFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e006      	b.n	80015f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80015f0:	2302      	movs	r3, #2
  }
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800162e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800163a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_UART_IRQHandler+0x66>
 800164e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fbbc 	bl	8001dd8 <UART_Receive_IT>
      return;
 8001660:	e25b      	b.n	8001b1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80de 	beq.w	8001828 <HAL_UART_IRQHandler+0x22c>
 800166c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d106      	bne.n	8001686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800167c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80d1 	beq.w	8001828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_UART_IRQHandler+0xae>
 8001692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_UART_IRQHandler+0xd2>
 80016b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_UART_IRQHandler+0xf6>
 80016da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f043 0204 	orr.w	r2, r3, #4
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80016f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d011      	beq.n	8001722 <HAL_UART_IRQHandler+0x126>
 80016fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800170a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	f043 0208 	orr.w	r2, r3, #8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 81f2 	beq.w	8001b10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800172c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_UART_IRQHandler+0x14e>
 8001738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fb47 	bl	8001dd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_UART_IRQHandler+0x17a>
 800176e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d04f      	beq.n	8001816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa51 	bl	8001c1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d041      	beq.n	800180e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3314      	adds	r3, #20
 8001790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001794:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001798:	e853 3f00 	ldrex	r3, [r3]
 800179c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80017a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3314      	adds	r3, #20
 80017b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80017b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80017c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80017c6:	e841 2300 	strex	r3, r2, [r1]
 80017ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80017ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1d9      	bne.n	800178a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d013      	beq.n	8001806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e2:	4a7e      	ldr	r2, [pc, #504]	@ (80019dc <HAL_UART_IRQHandler+0x3e0>)
 80017e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f81e 	bl	800082c <HAL_DMA_Abort_IT>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001800:	4610      	mov	r0, r2
 8001802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001804:	e00e      	b.n	8001824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f99c 	bl	8001b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800180c:	e00a      	b.n	8001824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f998 	bl	8001b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001814:	e006      	b.n	8001824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f994 	bl	8001b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001822:	e175      	b.n	8001b10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001824:	bf00      	nop
    return;
 8001826:	e173      	b.n	8001b10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 814f 	bne.w	8001ad0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8148 	beq.w	8001ad0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8141 	beq.w	8001ad0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80b6 	beq.w	80019e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8145 	beq.w	8001b14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800188e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001892:	429a      	cmp	r2, r3
 8001894:	f080 813e 	bcs.w	8001b14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800189e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	f000 8088 	beq.w	80019bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	330c      	adds	r3, #12
 80018b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018ba:	e853 3f00 	ldrex	r3, [r3]
 80018be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80018c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	330c      	adds	r3, #12
 80018d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80018d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80018dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80018e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018e8:	e841 2300 	strex	r3, r2, [r1]
 80018ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80018f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1d9      	bne.n	80018ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3314      	adds	r3, #20
 80018fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001902:	e853 3f00 	ldrex	r3, [r3]
 8001906:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001908:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3314      	adds	r3, #20
 8001918:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800191c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001920:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001922:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001924:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001928:	e841 2300 	strex	r3, r2, [r1]
 800192c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800192e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e1      	bne.n	80018f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3314      	adds	r3, #20
 800193a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800193c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800193e:	e853 3f00 	ldrex	r3, [r3]
 8001942:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3314      	adds	r3, #20
 8001954:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001958:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800195a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800195e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001960:	e841 2300 	strex	r3, r2, [r1]
 8001964:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e3      	bne.n	8001934 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	330c      	adds	r3, #12
 8001980:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001984:	e853 3f00 	ldrex	r3, [r3]
 8001988:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800198a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800198c:	f023 0310 	bic.w	r3, r3, #16
 8001990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	330c      	adds	r3, #12
 800199a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800199e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80019a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80019a6:	e841 2300 	strex	r3, r2, [r1]
 80019aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80019ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1e3      	bne.n	800197a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fefd 	bl	80007b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8bf 	bl	8001b56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80019d8:	e09c      	b.n	8001b14 <HAL_UART_IRQHandler+0x518>
 80019da:	bf00      	nop
 80019dc:	08001ce3 	.word	0x08001ce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 808e 	beq.w	8001b18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80019fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8089 	beq.w	8001b18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a10:	e853 3f00 	ldrex	r3, [r3]
 8001a14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	330c      	adds	r3, #12
 8001a26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001a2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a32:	e841 2300 	strex	r3, r2, [r1]
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e3      	bne.n	8001a06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3314      	adds	r3, #20
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	e853 3f00 	ldrex	r3, [r3]
 8001a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3314      	adds	r3, #20
 8001a5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001a62:	633a      	str	r2, [r7, #48]	@ 0x30
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a6a:	e841 2300 	strex	r3, r2, [r1]
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1e3      	bne.n	8001a3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	e853 3f00 	ldrex	r3, [r3]
 8001a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f023 0310 	bic.w	r3, r3, #16
 8001a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001aa8:	61fa      	str	r2, [r7, #28]
 8001aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	e841 2300 	strex	r3, r2, [r1]
 8001ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e3      	bne.n	8001a84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f844 	bl	8001b56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ace:	e023      	b.n	8001b18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_UART_IRQHandler+0x4f4>
 8001adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f90e 	bl	8001d0a <UART_Transmit_IT>
    return;
 8001aee:	e014      	b.n	8001b1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_UART_IRQHandler+0x51e>
 8001afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f94d 	bl	8001da8 <UART_EndTransmit_IT>
    return;
 8001b0e:	e004      	b.n	8001b1a <HAL_UART_IRQHandler+0x51e>
    return;
 8001b10:	bf00      	nop
 8001b12:	e002      	b.n	8001b1a <HAL_UART_IRQHandler+0x51e>
      return;
 8001b14:	bf00      	nop
 8001b16:	e000      	b.n	8001b1a <HAL_UART_IRQHandler+0x51e>
      return;
 8001b18:	bf00      	nop
  }
}
 8001b1a:	37e8      	adds	r7, #232	@ 0xe8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7c:	e03b      	b.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d037      	beq.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7fe fcff 	bl	8000588 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	6a3a      	ldr	r2, [r7, #32]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e03a      	b.n	8001c16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d023      	beq.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d020      	beq.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b40      	cmp	r3, #64	@ 0x40
 8001bb8:	d01d      	beq.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d116      	bne.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f81d 	bl	8001c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2208      	movs	r2, #8
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d0b4      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b095      	sub	sp, #84	@ 0x54
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	e853 3f00 	ldrex	r3, [r3]
 8001c34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	330c      	adds	r3, #12
 8001c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c46:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c4e:	e841 2300 	strex	r3, r2, [r1]
 8001c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e5      	bne.n	8001c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3314      	adds	r3, #20
 8001c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	e853 3f00 	ldrex	r3, [r3]
 8001c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3314      	adds	r3, #20
 8001c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c82:	e841 2300 	strex	r3, r2, [r1]
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e5      	bne.n	8001c5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d119      	bne.n	8001cca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	330c      	adds	r3, #12
 8001c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	e853 3f00 	ldrex	r3, [r3]
 8001ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f023 0310 	bic.w	r3, r3, #16
 8001cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	330c      	adds	r3, #12
 8001cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cb6:	61ba      	str	r2, [r7, #24]
 8001cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cba:	6979      	ldr	r1, [r7, #20]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	e841 2300 	strex	r3, r2, [r1]
 8001cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1e5      	bne.n	8001c96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cd8:	bf00      	nop
 8001cda:	3754      	adds	r7, #84	@ 0x54
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff ff21 	bl	8001b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b21      	cmp	r3, #33	@ 0x21
 8001d1c:	d13e      	bne.n	8001d9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d26:	d114      	bne.n	8001d52 <UART_Transmit_IT+0x48>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d110      	bne.n	8001d52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	1c9a      	adds	r2, r3, #2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	621a      	str	r2, [r3, #32]
 8001d50:	e008      	b.n	8001d64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6211      	str	r1, [r2, #32]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4619      	mov	r1, r3
 8001d72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fea9 	bl	8001b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	@ 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b22      	cmp	r3, #34	@ 0x22
 8001dea:	f040 80ae 	bne.w	8001f4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df6:	d117      	bne.n	8001e28 <UART_Receive_IT+0x50>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d113      	bne.n	8001e28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e26:	e026      	b.n	8001e76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e3a:	d007      	beq.n	8001e4c <UART_Receive_IT+0x74>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <UART_Receive_IT+0x82>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e008      	b.n	8001e6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4619      	mov	r1, r3
 8001e84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d15d      	bne.n	8001f46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0220 	bic.w	r2, r2, #32
 8001e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d135      	bne.n	8001f3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	e853 3f00 	ldrex	r3, [r3]
 8001ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f023 0310 	bic.w	r3, r3, #16
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef6:	623a      	str	r2, [r7, #32]
 8001ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efa:	69f9      	ldr	r1, [r7, #28]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	e841 2300 	strex	r3, r2, [r1]
 8001f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e5      	bne.n	8001ed6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d10a      	bne.n	8001f2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fe0e 	bl	8001b56 <HAL_UARTEx_RxEventCallback>
 8001f3a:	e002      	b.n	8001f42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fdf8 	bl	8001b32 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e002      	b.n	8001f4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001f8e:	f023 030c 	bic.w	r3, r3, #12
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <UART_SetConfig+0x114>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d103      	bne.n	8001fc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fbc:	f7ff fa10 	bl	80013e0 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	e002      	b.n	8001fca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fc4:	f7ff f9f8 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 8001fc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009a      	lsls	r2, r3, #2
 8001fd4:	441a      	add	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	4a22      	ldr	r2, [pc, #136]	@ (800206c <UART_SetConfig+0x118>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	0119      	lsls	r1, r3, #4
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009a      	lsls	r2, r3, #2
 8001ff4:	441a      	add	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <UART_SetConfig+0x118>)
 8002002:	fba3 0302 	umull	r0, r3, r3, r2
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2064      	movs	r0, #100	@ 0x64
 800200a:	fb00 f303 	mul.w	r3, r0, r3
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	3332      	adds	r3, #50	@ 0x32
 8002014:	4a15      	ldr	r2, [pc, #84]	@ (800206c <UART_SetConfig+0x118>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002020:	4419      	add	r1, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	009a      	lsls	r2, r3, #2
 800202c:	441a      	add	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fbb2 f2f3 	udiv	r2, r2, r3
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <UART_SetConfig+0x118>)
 800203a:	fba3 0302 	umull	r0, r3, r3, r2
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2064      	movs	r0, #100	@ 0x64
 8002042:	fb00 f303 	mul.w	r3, r0, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	3332      	adds	r3, #50	@ 0x32
 800204c:	4a07      	ldr	r2, [pc, #28]	@ (800206c <UART_SetConfig+0x118>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	440a      	add	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40013800 	.word	0x40013800
 800206c:	51eb851f 	.word	0x51eb851f

08002070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0208 	add.w	r2, r3, #8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d103      	bne.n	800212c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e00c      	b.n	8002146 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3308      	adds	r3, #8
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e002      	b.n	800213a <vListInsert+0x2e>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d2f6      	bcs.n	8002134 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6892      	ldr	r2, [r2, #8]
 8002192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6852      	ldr	r2, [r2, #4]
 800219c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d103      	bne.n	80021b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021fc:	f000 ff7c 	bl	80030f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	441a      	add	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	3b01      	subs	r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	441a      	add	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	22ff      	movs	r2, #255	@ 0xff
 8002240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	22ff      	movs	r2, #255	@ 0xff
 8002248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01a      	beq.n	8002290 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3310      	adds	r3, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fd1e 	bl	8002ca0 <xTaskRemoveFromEventList>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800226a:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <xQueueGenericReset+0xd0>)
 800226c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	e009      	b.n	8002290 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3310      	adds	r3, #16
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fef5 	bl	8002070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3324      	adds	r3, #36	@ 0x24
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fef0 	bl	8002070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002290:	f000 ff62 	bl	8003158 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000ed04 	.word	0xe000ed04

080022a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	613b      	str	r3, [r7, #16]
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3350      	adds	r3, #80	@ 0x50
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 ffac 	bl	800323c <pvPortMalloc>
 80022e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d011      	beq.n	8002310 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3350      	adds	r3, #80	@ 0x50
 80022f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f805 	bl	800231a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002310:	69bb      	ldr	r3, [r7, #24]
	}
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e002      	b.n	800233c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002348:	2101      	movs	r1, #1
 800234a:	69b8      	ldr	r0, [r7, #24]
 800234c:	f7ff ff40 	bl	80021d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <xQueueReceive+0x32>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	623b      	str	r3, [r7, #32]
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <xQueueReceive+0x40>
 8002398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <xQueueReceive+0x44>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <xQueueReceive+0x46>
 80023a4:	2300      	movs	r3, #0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <xQueueReceive+0x62>
	__asm volatile
 80023aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	61fb      	str	r3, [r7, #28]
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	e7fd      	b.n	80023be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023c2:	f000 fdb7 	bl	8002f34 <xTaskGetSchedulerState>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <xQueueReceive+0x72>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <xQueueReceive+0x76>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueReceive+0x78>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <xQueueReceive+0x94>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61bb      	str	r3, [r7, #24]
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023f4:	f000 fe80 	bl	80030f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01f      	beq.n	8002444 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002408:	f000 f88c 	bl	8002524 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	1e5a      	subs	r2, r3, #1
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00f      	beq.n	800243c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	3310      	adds	r3, #16
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fc3d 	bl	8002ca0 <xTaskRemoveFromEventList>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800242c:	4b3c      	ldr	r3, [pc, #240]	@ (8002520 <xQueueReceive+0x1c0>)
 800242e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800243c:	f000 fe8c 	bl	8003158 <vPortExitCritical>
				return pdPASS;
 8002440:	2301      	movs	r3, #1
 8002442:	e069      	b.n	8002518 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800244a:	f000 fe85 	bl	8003158 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800244e:	2300      	movs	r3, #0
 8002450:	e062      	b.n	8002518 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d106      	bne.n	8002466 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fc83 	bl	8002d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002462:	2301      	movs	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002466:	f000 fe77 	bl	8003158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800246a:	f000 fa2f 	bl	80028cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800246e:	f000 fe43 	bl	80030f8 <vPortEnterCritical>
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002478:	b25b      	sxtb	r3, r3
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d103      	bne.n	8002488 <xQueueReceive+0x128>
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800248e:	b25b      	sxtb	r3, r3
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d103      	bne.n	800249e <xQueueReceive+0x13e>
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800249e:	f000 fe5b 	bl	8003158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024a2:	1d3a      	adds	r2, r7, #4
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fc72 	bl	8002d94 <xTaskCheckForTimeOut>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d123      	bne.n	80024fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b8:	f000 f8ac 	bl	8002614 <prvIsQueueEmpty>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d017      	beq.n	80024f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	3324      	adds	r3, #36	@ 0x24
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fbc2 	bl	8002c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024d2:	f000 f84d 	bl	8002570 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024d6:	f000 fa07 	bl	80028e8 <xTaskResumeAll>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d189      	bne.n	80023f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <xQueueReceive+0x1c0>)
 80024e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	e780      	b.n	80023f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80024f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024f4:	f000 f83c 	bl	8002570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024f8:	f000 f9f6 	bl	80028e8 <xTaskResumeAll>
 80024fc:	e77a      	b.n	80023f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80024fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002500:	f000 f836 	bl	8002570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002504:	f000 f9f0 	bl	80028e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800250a:	f000 f883 	bl	8002614 <prvIsQueueEmpty>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f43f af6f 	beq.w	80023f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002516:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002518:	4618      	mov	r0, r3
 800251a:	3730      	adds	r7, #48	@ 0x30
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	e000ed04 	.word	0xe000ed04

08002524 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d018      	beq.n	8002568 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	441a      	add	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d303      	bcc.n	8002558 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68d9      	ldr	r1, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	461a      	mov	r2, r3
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f001 f882 	bl	800366c <memcpy>
	}
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002578:	f000 fdbe 	bl	80030f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002582:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002584:	e011      	b.n	80025aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3324      	adds	r3, #36	@ 0x24
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fb84 	bl	8002ca0 <xTaskRemoveFromEventList>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800259e:	f000 fc5d 	bl	8002e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dce9      	bgt.n	8002586 <prvUnlockQueue+0x16>
 80025b2:	e000      	b.n	80025b6 <prvUnlockQueue+0x46>
					break;
 80025b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	22ff      	movs	r2, #255	@ 0xff
 80025ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80025be:	f000 fdcb 	bl	8003158 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025c2:	f000 fd99 	bl	80030f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025ce:	e011      	b.n	80025f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3310      	adds	r3, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fb5f 	bl	8002ca0 <xTaskRemoveFromEventList>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025e8:	f000 fc38 	bl	8002e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025ec:	7bbb      	ldrb	r3, [r7, #14]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dce9      	bgt.n	80025d0 <prvUnlockQueue+0x60>
 80025fc:	e000      	b.n	8002600 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	22ff      	movs	r2, #255	@ 0xff
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002608:	f000 fda6 	bl	8003158 <vPortExitCritical>
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800261c:	f000 fd6c 	bl	80030f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002628:	2301      	movs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e001      	b.n	8002632 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002632:	f000 fd91 	bl	8003158 <vPortExitCritical>

	return xReturn;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	@ 0x30
 8002644:	af04      	add	r7, sp, #16
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fdf1 	bl	800323c <pvPortMalloc>
 800265a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002662:	205c      	movs	r0, #92	@ 0x5c
 8002664:	f000 fdea 	bl	800323c <pvPortMalloc>
 8002668:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30
 8002676:	e005      	b.n	8002684 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f000 fead 	bl	80033d8 <vPortFree>
 800267e:	e001      	b.n	8002684 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	2300      	movs	r3, #0
 8002696:	9303      	str	r3, [sp, #12]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f80e 	bl	80026ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026ae:	69f8      	ldr	r0, [r7, #28]
 80026b0:	f000 f89c 	bl	80027ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e002      	b.n	80026c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026c0:	69bb      	ldr	r3, [r7, #24]
	}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b088      	sub	sp, #32
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	461a      	mov	r2, r3
 80026e2:	21a5      	movs	r1, #165	@ 0xa5
 80026e4:	f000 ff96 	bl	8003614 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026f2:	3b01      	subs	r3, #1
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f023 0307 	bic.w	r3, r3, #7
 8002700:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	617b      	str	r3, [r7, #20]
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01f      	beq.n	800276a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e012      	b.n	8002756 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	7819      	ldrb	r1, [r3, #0]
 8002738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	3334      	adds	r3, #52	@ 0x34
 8002740:	460a      	mov	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d9e9      	bls.n	8002730 <prvInitialiseNewTask+0x66>
 800275c:	e000      	b.n	8002760 <prvInitialiseNewTask+0x96>
			{
				break;
 800275e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002768:	e003      	b.n	8002772 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002774:	2b37      	cmp	r3, #55	@ 0x37
 8002776:	d901      	bls.n	800277c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002778:	2337      	movs	r3, #55	@ 0x37
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002780:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002786:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fc8b 	bl	80020ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	3318      	adds	r3, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fc86 	bl	80020ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80027ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	2200      	movs	r2, #0
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	69b8      	ldr	r0, [r7, #24]
 80027cc:	f000 fc24 	bl	8003018 <pxPortInitialiseStack>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027f4:	f000 fc80 	bl	80030f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <prvAddNewTaskToReadyList+0xc4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a2c      	ldr	r2, [pc, #176]	@ (80028b0 <prvAddNewTaskToReadyList+0xc4>)
 8002800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002802:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800280a:	4a2a      	ldr	r2, [pc, #168]	@ (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002810:	4b27      	ldr	r3, [pc, #156]	@ (80028b0 <prvAddNewTaskToReadyList+0xc4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d110      	bne.n	800283a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002818:	f000 fb2c 	bl	8002e74 <prvInitialiseTaskLists>
 800281c:	e00d      	b.n	800283a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800281e:	4b26      	ldr	r3, [pc, #152]	@ (80028b8 <prvAddNewTaskToReadyList+0xcc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002826:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	429a      	cmp	r2, r3
 8002832:	d802      	bhi.n	800283a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002834:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <prvAddNewTaskToReadyList+0xd0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a1e      	ldr	r2, [pc, #120]	@ (80028bc <prvAddNewTaskToReadyList+0xd0>)
 8002842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <prvAddNewTaskToReadyList+0xd0>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <prvAddNewTaskToReadyList+0xd4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d903      	bls.n	8002860 <prvAddNewTaskToReadyList+0x74>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <prvAddNewTaskToReadyList+0xd4>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <prvAddNewTaskToReadyList+0xd8>)
 800286e:	441a      	add	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7ff fc25 	bl	80020c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800287c:	f000 fc6c 	bl	8003158 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <prvAddNewTaskToReadyList+0xcc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <prvAddNewTaskToReadyList+0xc8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	429a      	cmp	r2, r3
 8002894:	d207      	bcs.n	80028a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <prvAddNewTaskToReadyList+0xdc>)
 8002898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000054c 	.word	0x2000054c
 80028b4:	2000007c 	.word	0x2000007c
 80028b8:	20000558 	.word	0x20000558
 80028bc:	20000568 	.word	0x20000568
 80028c0:	20000554 	.word	0x20000554
 80028c4:	20000080 	.word	0x20000080
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <vTaskSuspendAll+0x18>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	4a03      	ldr	r2, [pc, #12]	@ (80028e4 <vTaskSuspendAll+0x18>)
 80028d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000570 	.word	0x20000570

080028e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028f6:	4b42      	ldr	r3, [pc, #264]	@ (8002a00 <xTaskResumeAll+0x118>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <xTaskResumeAll+0x2e>
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	603b      	str	r3, [r7, #0]
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002916:	f000 fbef 	bl	80030f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800291a:	4b39      	ldr	r3, [pc, #228]	@ (8002a00 <xTaskResumeAll+0x118>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a37      	ldr	r2, [pc, #220]	@ (8002a00 <xTaskResumeAll+0x118>)
 8002922:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002924:	4b36      	ldr	r3, [pc, #216]	@ (8002a00 <xTaskResumeAll+0x118>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d162      	bne.n	80029f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <xTaskResumeAll+0x11c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05e      	beq.n	80029f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002934:	e02f      	b.n	8002996 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002936:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <xTaskResumeAll+0x120>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3318      	adds	r3, #24
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fc1a 	bl	800217c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3304      	adds	r3, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fc15 	bl	800217c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <xTaskResumeAll+0x124>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d903      	bls.n	8002966 <xTaskResumeAll+0x7e>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <xTaskResumeAll+0x124>)
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <xTaskResumeAll+0x128>)
 8002974:	441a      	add	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3304      	adds	r3, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f7ff fba2 	bl	80020c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002986:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <xTaskResumeAll+0x12c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	429a      	cmp	r2, r3
 800298e:	d302      	bcc.n	8002996 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <xTaskResumeAll+0x130>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002996:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <xTaskResumeAll+0x120>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cb      	bne.n	8002936 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029a4:	f000 faa6 	bl	8002ef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029a8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a1c <xTaskResumeAll+0x134>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d010      	beq.n	80029d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029b4:	f000 f836 	bl	8002a24 <xTaskIncrementTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <xTaskResumeAll+0x130>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f1      	bne.n	80029b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <xTaskResumeAll+0x134>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <xTaskResumeAll+0x130>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <xTaskResumeAll+0x138>)
 80029e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029f2:	f000 fbb1 	bl	8003158 <vPortExitCritical>

	return xAlreadyYielded;
 80029f6:	68bb      	ldr	r3, [r7, #8]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000570 	.word	0x20000570
 8002a04:	2000054c 	.word	0x2000054c
 8002a08:	20000510 	.word	0x20000510
 8002a0c:	20000554 	.word	0x20000554
 8002a10:	20000080 	.word	0x20000080
 8002a14:	2000007c 	.word	0x2000007c
 8002a18:	20000560 	.word	0x20000560
 8002a1c:	2000055c 	.word	0x2000055c
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8002b6c <xTaskIncrementTick+0x148>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8090 	bne.w	8002b58 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a38:	4b4d      	ldr	r3, [pc, #308]	@ (8002b70 <xTaskIncrementTick+0x14c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a40:	4a4b      	ldr	r2, [pc, #300]	@ (8002b70 <xTaskIncrementTick+0x14c>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d121      	bne.n	8002a90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a4c:	4b49      	ldr	r3, [pc, #292]	@ (8002b74 <xTaskIncrementTick+0x150>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	603b      	str	r3, [r7, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <xTaskIncrementTick+0x46>
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <xTaskIncrementTick+0x150>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b40      	ldr	r3, [pc, #256]	@ (8002b78 <xTaskIncrementTick+0x154>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3e      	ldr	r2, [pc, #248]	@ (8002b74 <xTaskIncrementTick+0x150>)
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b78 <xTaskIncrementTick+0x154>)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b3e      	ldr	r3, [pc, #248]	@ (8002b7c <xTaskIncrementTick+0x158>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	4a3c      	ldr	r2, [pc, #240]	@ (8002b7c <xTaskIncrementTick+0x158>)
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	f000 fa32 	bl	8002ef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a90:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <xTaskIncrementTick+0x15c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d349      	bcc.n	8002b2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a9a:	4b36      	ldr	r3, [pc, #216]	@ (8002b74 <xTaskIncrementTick+0x150>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa4:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <xTaskIncrementTick+0x15c>)
 8002aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aaa:	601a      	str	r2, [r3, #0]
					break;
 8002aac:	e03f      	b.n	8002b2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aae:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <xTaskIncrementTick+0x150>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d203      	bcs.n	8002ace <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8002b80 <xTaskIncrementTick+0x15c>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002acc:	e02f      	b.n	8002b2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fb52 	bl	800217c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fb49 	bl	800217c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aee:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <xTaskIncrementTick+0x160>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d903      	bls.n	8002afe <xTaskIncrementTick+0xda>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	4a22      	ldr	r2, [pc, #136]	@ (8002b84 <xTaskIncrementTick+0x160>)
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <xTaskIncrementTick+0x164>)
 8002b0c:	441a      	add	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7ff fad6 	bl	80020c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <xTaskIncrementTick+0x168>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3b8      	bcc.n	8002a9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b2c:	e7b5      	b.n	8002a9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b2e:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <xTaskIncrementTick+0x168>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b34:	4914      	ldr	r1, [pc, #80]	@ (8002b88 <xTaskIncrementTick+0x164>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d901      	bls.n	8002b4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <xTaskIncrementTick+0x16c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e004      	b.n	8002b62 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002b58:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <xTaskIncrementTick+0x170>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <xTaskIncrementTick+0x170>)
 8002b60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002b62:	697b      	ldr	r3, [r7, #20]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000570 	.word	0x20000570
 8002b70:	20000550 	.word	0x20000550
 8002b74:	20000508 	.word	0x20000508
 8002b78:	2000050c 	.word	0x2000050c
 8002b7c:	20000564 	.word	0x20000564
 8002b80:	2000056c 	.word	0x2000056c
 8002b84:	20000554 	.word	0x20000554
 8002b88:	20000080 	.word	0x20000080
 8002b8c:	2000007c 	.word	0x2000007c
 8002b90:	20000560 	.word	0x20000560
 8002b94:	2000055c 	.word	0x2000055c

08002b98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b9e:	4b28      	ldr	r3, [pc, #160]	@ (8002c40 <vTaskSwitchContext+0xa8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ba6:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <vTaskSwitchContext+0xac>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002bac:	e042      	b.n	8002c34 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002bae:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <vTaskSwitchContext+0xac>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb4:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <vTaskSwitchContext+0xb0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e011      	b.n	8002be0 <vTaskSwitchContext+0x48>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <vTaskSwitchContext+0x42>
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	607b      	str	r3, [r7, #4]
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	e7fd      	b.n	8002bd6 <vTaskSwitchContext+0x3e>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	491a      	ldr	r1, [pc, #104]	@ (8002c4c <vTaskSwitchContext+0xb4>)
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0e3      	beq.n	8002bbc <vTaskSwitchContext+0x24>
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <vTaskSwitchContext+0xb4>)
 8002c00:	4413      	add	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3308      	adds	r3, #8
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d104      	bne.n	8002c24 <vTaskSwitchContext+0x8c>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <vTaskSwitchContext+0xb8>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4a06      	ldr	r2, [pc, #24]	@ (8002c48 <vTaskSwitchContext+0xb0>)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000570 	.word	0x20000570
 8002c44:	20000560 	.word	0x20000560
 8002c48:	20000554 	.word	0x20000554
 8002c4c:	20000080 	.word	0x20000080
 8002c50:	2000007c 	.word	0x2000007c

08002c54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	60fb      	str	r3, [r7, #12]
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <vTaskPlaceOnEventList+0x48>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3318      	adds	r3, #24
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fa41 	bl	800210c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	6838      	ldr	r0, [r7, #0]
 8002c8e:	f000 f96f 	bl	8002f70 <prvAddCurrentTaskToDelayedList>
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000007c 	.word	0x2000007c

08002ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60fb      	str	r3, [r7, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	3318      	adds	r3, #24
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fa52 	bl	800217c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <xTaskRemoveFromEventList+0xb0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11d      	bne.n	8002d1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fa49 	bl	800217c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <xTaskRemoveFromEventList+0xb4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d903      	bls.n	8002cfe <xTaskRemoveFromEventList+0x5e>
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	4a16      	ldr	r2, [pc, #88]	@ (8002d54 <xTaskRemoveFromEventList+0xb4>)
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <xTaskRemoveFromEventList+0xb8>)
 8002d0c:	441a      	add	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3304      	adds	r3, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f7ff f9d6 	bl	80020c6 <vListInsertEnd>
 8002d1a:	e005      	b.n	8002d28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	3318      	adds	r3, #24
 8002d20:	4619      	mov	r1, r3
 8002d22:	480e      	ldr	r0, [pc, #56]	@ (8002d5c <xTaskRemoveFromEventList+0xbc>)
 8002d24:	f7ff f9cf 	bl	80020c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <xTaskRemoveFromEventList+0xc0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d905      	bls.n	8002d42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d36:	2301      	movs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <xTaskRemoveFromEventList+0xc4>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e001      	b.n	8002d46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002d46:	697b      	ldr	r3, [r7, #20]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000570 	.word	0x20000570
 8002d54:	20000554 	.word	0x20000554
 8002d58:	20000080 	.word	0x20000080
 8002d5c:	20000510 	.word	0x20000510
 8002d60:	2000007c 	.word	0x2000007c
 8002d64:	20000560 	.word	0x20000560

08002d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <vTaskInternalSetTimeOutState+0x24>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <vTaskInternalSetTimeOutState+0x28>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	605a      	str	r2, [r3, #4]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000564 	.word	0x20000564
 8002d90:	20000550 	.word	0x20000550

08002d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	613b      	str	r3, [r7, #16]
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	60fb      	str	r3, [r7, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002dda:	f000 f98d 	bl	80030f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <xTaskCheckForTimeOut+0xc0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d102      	bne.n	8002dfe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e023      	b.n	8002e46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <xTaskCheckForTimeOut+0xc4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d007      	beq.n	8002e1a <xTaskCheckForTimeOut+0x86>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e015      	b.n	8002e46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d20b      	bcs.n	8002e3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff99 	bl	8002d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e004      	b.n	8002e46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e46:	f000 f987 	bl	8003158 <vPortExitCritical>

	return xReturn;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000550 	.word	0x20000550
 8002e58:	20000564 	.word	0x20000564

08002e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <vTaskMissedYield+0x14>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000560 	.word	0x20000560

08002e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	e00c      	b.n	8002e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <prvInitialiseTaskLists+0x60>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f8ee 	bl	8002070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3301      	adds	r3, #1
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b37      	cmp	r3, #55	@ 0x37
 8002e9e:	d9ef      	bls.n	8002e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ea0:	480d      	ldr	r0, [pc, #52]	@ (8002ed8 <prvInitialiseTaskLists+0x64>)
 8002ea2:	f7ff f8e5 	bl	8002070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ea6:	480d      	ldr	r0, [pc, #52]	@ (8002edc <prvInitialiseTaskLists+0x68>)
 8002ea8:	f7ff f8e2 	bl	8002070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002eac:	480c      	ldr	r0, [pc, #48]	@ (8002ee0 <prvInitialiseTaskLists+0x6c>)
 8002eae:	f7ff f8df 	bl	8002070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002eb2:	480c      	ldr	r0, [pc, #48]	@ (8002ee4 <prvInitialiseTaskLists+0x70>)
 8002eb4:	f7ff f8dc 	bl	8002070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002eb8:	480b      	ldr	r0, [pc, #44]	@ (8002ee8 <prvInitialiseTaskLists+0x74>)
 8002eba:	f7ff f8d9 	bl	8002070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <prvInitialiseTaskLists+0x78>)
 8002ec0:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <prvInitialiseTaskLists+0x64>)
 8002ec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <prvInitialiseTaskLists+0x7c>)
 8002ec6:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <prvInitialiseTaskLists+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000080 	.word	0x20000080
 8002ed8:	200004e0 	.word	0x200004e0
 8002edc:	200004f4 	.word	0x200004f4
 8002ee0:	20000510 	.word	0x20000510
 8002ee4:	20000524 	.word	0x20000524
 8002ee8:	20000538 	.word	0x20000538
 8002eec:	20000508 	.word	0x20000508
 8002ef0:	2000050c 	.word	0x2000050c

08002ef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <prvResetNextTaskUnblockTime+0x38>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <prvResetNextTaskUnblockTime+0x3c>)
 8002f06:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f0c:	e008      	b.n	8002f20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <prvResetNextTaskUnblockTime+0x38>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <prvResetNextTaskUnblockTime+0x3c>)
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000508 	.word	0x20000508
 8002f30:	2000056c 	.word	0x2000056c

08002f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <xTaskGetSchedulerState+0x34>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f42:	2301      	movs	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e008      	b.n	8002f5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f48:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <xTaskGetSchedulerState+0x38>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f50:	2302      	movs	r3, #2
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	e001      	b.n	8002f5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f5a:	687b      	ldr	r3, [r7, #4]
	}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000558 	.word	0x20000558
 8002f6c:	20000570 	.word	0x20000570

08002f70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f7a:	4b21      	ldr	r3, [pc, #132]	@ (8003000 <prvAddCurrentTaskToDelayedList+0x90>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f80:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f8f8 	bl	800217c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d10a      	bne.n	8002faa <prvAddCurrentTaskToDelayedList+0x3a>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4819      	ldr	r0, [pc, #100]	@ (8003008 <prvAddCurrentTaskToDelayedList+0x98>)
 8002fa4:	f7ff f88f 	bl	80020c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fa8:	e026      	b.n	8002ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <prvAddCurrentTaskToDelayedList+0x94>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d209      	bcs.n	8002fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <prvAddCurrentTaskToDelayedList+0x94>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7ff f89c 	bl	800210c <vListInsert>
}
 8002fd4:	e010      	b.n	8002ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <prvAddCurrentTaskToDelayedList+0x94>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f7ff f892 	bl	800210c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d202      	bcs.n	8002ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000550 	.word	0x20000550
 8003004:	2000007c 	.word	0x2000007c
 8003008:	20000538 	.word	0x20000538
 800300c:	2000050c 	.word	0x2000050c
 8003010:	20000508 	.word	0x20000508
 8003014:	2000056c 	.word	0x2000056c

08003018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3b04      	subs	r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b04      	subs	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f023 0201 	bic.w	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b04      	subs	r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003048:	4a08      	ldr	r2, [pc, #32]	@ (800306c <pxPortInitialiseStack+0x54>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3b14      	subs	r3, #20
 8003052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3b20      	subs	r3, #32
 800305e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003060:	68fb      	ldr	r3, [r7, #12]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	08003071 	.word	0x08003071

08003070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <prvTaskExitError+0x54>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d00b      	beq.n	800309c <prvTaskExitError+0x2c>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	60fb      	str	r3, [r7, #12]
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <prvTaskExitError+0x28>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	60bb      	str	r3, [r7, #8]
}
 80030ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80030b0:	bf00      	nop
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0fc      	beq.n	80030b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	2000000c 	.word	0x2000000c
	...

080030d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80030d0:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <pxCurrentTCBConst2>)
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	6808      	ldr	r0, [r1, #0]
 80030d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030da:	f380 8809 	msr	PSP, r0
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f04f 0000 	mov.w	r0, #0
 80030e6:	f380 8811 	msr	BASEPRI, r0
 80030ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80030ee:	4770      	bx	lr

080030f0 <pxCurrentTCBConst2>:
 80030f0:	2000007c 	.word	0x2000007c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop

080030f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	607b      	str	r3, [r7, #4]
}
 8003110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003112:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <vPortEnterCritical+0x58>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <vPortEnterCritical+0x58>)
 800311a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <vPortEnterCritical+0x58>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d110      	bne.n	8003146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <vPortEnterCritical+0x5c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <vPortEnterCritical+0x4e>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	603b      	str	r3, [r7, #0]
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	e7fd      	b.n	8003142 <vPortEnterCritical+0x4a>
	}
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	2000000c 	.word	0x2000000c
 8003154:	e000ed04 	.word	0xe000ed04

08003158 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800315e:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <vPortExitCritical+0x50>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <vPortExitCritical+0x26>
	__asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	607b      	str	r3, [r7, #4]
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	e7fd      	b.n	800317a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800317e:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <vPortExitCritical+0x50>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a08      	ldr	r2, [pc, #32]	@ (80031a8 <vPortExitCritical+0x50>)
 8003186:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <vPortExitCritical+0x50>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <vPortExitCritical+0x44>
 8003190:	2300      	movs	r3, #0
 8003192:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800319a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	00000000 	.word	0x00000000

080031b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031b0:	f3ef 8009 	mrs	r0, PSP
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <pxCurrentTCBConst>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031c0:	6010      	str	r0, [r2, #0]
 80031c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80031c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80031ca:	f380 8811 	msr	BASEPRI, r0
 80031ce:	f7ff fce3 	bl	8002b98 <vTaskSwitchContext>
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f380 8811 	msr	BASEPRI, r0
 80031da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	6808      	ldr	r0, [r1, #0]
 80031e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031e6:	f380 8809 	msr	PSP, r0
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	4770      	bx	lr

080031f0 <pxCurrentTCBConst>:
 80031f0:	2000007c 	.word	0x2000007c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop

080031f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	607b      	str	r3, [r7, #4]
}
 8003210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003212:	f7ff fc07 	bl	8002a24 <xTaskIncrementTick>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <xPortSysTickHandler+0x40>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f383 8811 	msr	BASEPRI, r3
}
 800322e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003248:	f7ff fb40 	bl	80028cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800324c:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <pvPortMalloc+0x184>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003254:	f000 f924 	bl	80034a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003258:	4b5a      	ldr	r3, [pc, #360]	@ (80033c4 <pvPortMalloc+0x188>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8095 	bne.w	8003390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01e      	beq.n	80032aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800326c:	2208      	movs	r2, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	2b00      	cmp	r3, #0
 800327c:	d015      	beq.n	80032aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f023 0307 	bic.w	r3, r3, #7
 8003284:	3308      	adds	r3, #8
 8003286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <pvPortMalloc+0x6e>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	617b      	str	r3, [r7, #20]
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d06f      	beq.n	8003390 <pvPortMalloc+0x154>
 80032b0:	4b45      	ldr	r3, [pc, #276]	@ (80033c8 <pvPortMalloc+0x18c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d86a      	bhi.n	8003390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032ba:	4b44      	ldr	r3, [pc, #272]	@ (80033cc <pvPortMalloc+0x190>)
 80032bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032be:	4b43      	ldr	r3, [pc, #268]	@ (80033cc <pvPortMalloc+0x190>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032c4:	e004      	b.n	80032d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d903      	bls.n	80032e2 <pvPortMalloc+0xa6>
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f1      	bne.n	80032c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032e2:	4b37      	ldr	r3, [pc, #220]	@ (80033c0 <pvPortMalloc+0x184>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d051      	beq.n	8003390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	4413      	add	r3, r2
 80032f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	2308      	movs	r3, #8
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	429a      	cmp	r2, r3
 800330c:	d920      	bls.n	8003350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <pvPortMalloc+0xfc>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	613b      	str	r3, [r7, #16]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad2      	subs	r2, r2, r3
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800334a:	69b8      	ldr	r0, [r7, #24]
 800334c:	f000 f90a 	bl	8003564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <pvPortMalloc+0x18c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <pvPortMalloc+0x18c>)
 800335c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800335e:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <pvPortMalloc+0x18c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <pvPortMalloc+0x194>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d203      	bcs.n	8003372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800336a:	4b17      	ldr	r3, [pc, #92]	@ (80033c8 <pvPortMalloc+0x18c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <pvPortMalloc+0x194>)
 8003370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <pvPortMalloc+0x188>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	431a      	orrs	r2, r3
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <pvPortMalloc+0x198>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <pvPortMalloc+0x198>)
 800338e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003390:	f7ff faaa 	bl	80028e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <pvPortMalloc+0x17a>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	60fb      	str	r3, [r7, #12]
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	e7fd      	b.n	80033b2 <pvPortMalloc+0x176>
	return pvReturn;
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	2000117c 	.word	0x2000117c
 80033c4:	20001190 	.word	0x20001190
 80033c8:	20001180 	.word	0x20001180
 80033cc:	20001174 	.word	0x20001174
 80033d0:	20001184 	.word	0x20001184
 80033d4:	20001188 	.word	0x20001188

080033d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04f      	beq.n	800348a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033ea:	2308      	movs	r3, #8
 80033ec:	425b      	negs	r3, r3
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <vPortFree+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <vPortFree+0x46>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	60fb      	str	r3, [r7, #12]
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <vPortFree+0x66>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	60bb      	str	r3, [r7, #8]
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <vPortFree+0xbc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01e      	beq.n	800348a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11a      	bne.n	800348a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4b0e      	ldr	r3, [pc, #56]	@ (8003494 <vPortFree+0xbc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003464:	f7ff fa32 	bl	80028cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <vPortFree+0xc0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4413      	add	r3, r2
 8003472:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <vPortFree+0xc0>)
 8003474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003476:	6938      	ldr	r0, [r7, #16]
 8003478:	f000 f874 	bl	8003564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <vPortFree+0xc4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a06      	ldr	r2, [pc, #24]	@ (800349c <vPortFree+0xc4>)
 8003484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003486:	f7ff fa2f 	bl	80028e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20001190 	.word	0x20001190
 8003498:	20001180 	.word	0x20001180
 800349c:	2000118c 	.word	0x2000118c

080034a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <prvHeapInit+0xac>)
 80034ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3307      	adds	r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <prvHeapInit+0xac>)
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <prvHeapInit+0xb0>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034de:	4b1c      	ldr	r3, [pc, #112]	@ (8003550 <prvHeapInit+0xb0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034ec:	2208      	movs	r2, #8
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0307 	bic.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <prvHeapInit+0xb4>)
 8003500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003502:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <prvHeapInit+0xb4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <prvHeapInit+0xb4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <prvHeapInit+0xb4>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <prvHeapInit+0xb8>)
 800352e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a09      	ldr	r2, [pc, #36]	@ (800355c <prvHeapInit+0xbc>)
 8003536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <prvHeapInit+0xc0>)
 800353a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800353e:	601a      	str	r2, [r3, #0]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000574 	.word	0x20000574
 8003550:	20001174 	.word	0x20001174
 8003554:	2000117c 	.word	0x2000117c
 8003558:	20001184 	.word	0x20001184
 800355c:	20001180 	.word	0x20001180
 8003560:	20001190 	.word	0x20001190

08003564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <prvInsertBlockIntoFreeList+0xa8>)
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e002      	b.n	8003578 <prvInsertBlockIntoFreeList+0x14>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d8f7      	bhi.n	8003572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d108      	bne.n	80035a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d118      	bne.n	80035ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <prvInsertBlockIntoFreeList+0xac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d00d      	beq.n	80035e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e008      	b.n	80035f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <prvInsertBlockIntoFreeList+0xac>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e003      	b.n	80035f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d002      	beq.n	8003602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	20001174 	.word	0x20001174
 8003610:	2000117c 	.word	0x2000117c

08003614 <memset>:
 8003614:	4603      	mov	r3, r0
 8003616:	4402      	add	r2, r0
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	f803 1b01 	strb.w	r1, [r3], #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <__libc_init_array>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	2600      	movs	r6, #0
 8003628:	4d0c      	ldr	r5, [pc, #48]	@ (800365c <__libc_init_array+0x38>)
 800362a:	4c0d      	ldr	r4, [pc, #52]	@ (8003660 <__libc_init_array+0x3c>)
 800362c:	1b64      	subs	r4, r4, r5
 800362e:	10a4      	asrs	r4, r4, #2
 8003630:	42a6      	cmp	r6, r4
 8003632:	d109      	bne.n	8003648 <__libc_init_array+0x24>
 8003634:	f000 f828 	bl	8003688 <_init>
 8003638:	2600      	movs	r6, #0
 800363a:	4d0a      	ldr	r5, [pc, #40]	@ (8003664 <__libc_init_array+0x40>)
 800363c:	4c0a      	ldr	r4, [pc, #40]	@ (8003668 <__libc_init_array+0x44>)
 800363e:	1b64      	subs	r4, r4, r5
 8003640:	10a4      	asrs	r4, r4, #2
 8003642:	42a6      	cmp	r6, r4
 8003644:	d105      	bne.n	8003652 <__libc_init_array+0x2e>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	f855 3b04 	ldr.w	r3, [r5], #4
 800364c:	4798      	blx	r3
 800364e:	3601      	adds	r6, #1
 8003650:	e7ee      	b.n	8003630 <__libc_init_array+0xc>
 8003652:	f855 3b04 	ldr.w	r3, [r5], #4
 8003656:	4798      	blx	r3
 8003658:	3601      	adds	r6, #1
 800365a:	e7f2      	b.n	8003642 <__libc_init_array+0x1e>
 800365c:	08003708 	.word	0x08003708
 8003660:	08003708 	.word	0x08003708
 8003664:	08003708 	.word	0x08003708
 8003668:	0800370c 	.word	0x0800370c

0800366c <memcpy>:
 800366c:	440a      	add	r2, r1
 800366e:	4291      	cmp	r1, r2
 8003670:	f100 33ff 	add.w	r3, r0, #4294967295
 8003674:	d100      	bne.n	8003678 <memcpy+0xc>
 8003676:	4770      	bx	lr
 8003678:	b510      	push	{r4, lr}
 800367a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800367e:	4291      	cmp	r1, r2
 8003680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003684:	d1f9      	bne.n	800367a <memcpy+0xe>
 8003686:	bd10      	pop	{r4, pc}

08003688 <_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr

08003694 <_fini>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr
