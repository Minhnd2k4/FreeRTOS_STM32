
Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002174  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002284  08002284  00003284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b4  080022b4  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080022b4  080022b4  00004028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080022b4  080022b4  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022b4  080022b4  000032b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022b8  080022b8  000032b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080022bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  20000028  080022e4  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  080022e4  00004160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f36  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a73  00000000  00000000  00009f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000572  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a7c  00000000  00000000  0000c6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009247  00000000  00000000  0000e156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008605a  00000000  00000000  0001739d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d3f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b14  00000000  00000000  0009d43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	0800226c 	.word	0x0800226c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	0800226c 	.word	0x0800226c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 f9d1 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f817 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f851 	bl	8000204 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  if(xTaskCreate(recvTask, "recvTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) != pdPASS)
 8000162:	2300      	movs	r3, #0
 8000164:	9301      	str	r3, [sp, #4]
 8000166:	2301      	movs	r3, #1
 8000168:	9300      	str	r3, [sp, #0]
 800016a:	2300      	movs	r3, #0
 800016c:	2280      	movs	r2, #128	@ 0x80
 800016e:	4905      	ldr	r1, [pc, #20]	@ (8000184 <main+0x34>)
 8000170:	4805      	ldr	r0, [pc, #20]	@ (8000188 <main+0x38>)
 8000172:	f001 f932 	bl	80013da <xTaskCreate>
 8000176:	4603      	mov	r3, r0
 8000178:	2b01      	cmp	r3, #1
 800017a:	d001      	beq.n	8000180 <main+0x30>
  {
	  // SEGGER_SYSVIEW_Printf(" Printf task create failed")
	  while(1)
 800017c:	bf00      	nop
 800017e:	e7fd      	b.n	800017c <main+0x2c>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000180:	e7fe      	b.n	8000180 <main+0x30>
 8000182:	bf00      	nop
 8000184:	08002284 	.word	0x08002284
 8000188:	080002ad 	.word	0x080002ad

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	@ 0x40
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	@ 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f002 f83a 	bl	8002214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ae:	2302      	movs	r3, #2
 80001b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b6:	2310      	movs	r3, #16
 80001b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fc7c 	bl	8000ac0 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ce:	f000 f8a3 	bl	8000318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 feea 	bl	8000fc4 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f6:	f000 f88f 	bl	8000318 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	@ 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	f107 0308 	add.w	r3, r7, #8
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000218:	4b21      	ldr	r3, [pc, #132]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a20      	ldr	r2, [pc, #128]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b1e      	ldr	r3, [pc, #120]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0310 	and.w	r3, r3, #16
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a1a      	ldr	r2, [pc, #104]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000236:	f043 0304 	orr.w	r3, r3, #4
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0304 	and.w	r3, r3, #4
 8000244:	603b      	str	r3, [r7, #0]
 8000246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024e:	4815      	ldr	r0, [pc, #84]	@ (80002a4 <MX_GPIO_Init+0xa0>)
 8000250:	f000 fc1e 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2106      	movs	r1, #6
 8000258:	4813      	ldr	r0, [pc, #76]	@ (80002a8 <MX_GPIO_Init+0xa4>)
 800025a:	f000 fc19 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800025e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	2301      	movs	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2302      	movs	r3, #2
 800026e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000270:	f107 0308 	add.w	r3, r7, #8
 8000274:	4619      	mov	r1, r3
 8000276:	480b      	ldr	r0, [pc, #44]	@ (80002a4 <MX_GPIO_Init+0xa0>)
 8000278:	f000 fa86 	bl	8000788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800027c:	2306      	movs	r3, #6
 800027e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000280:	2301      	movs	r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000288:	2302      	movs	r3, #2
 800028a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028c:	f107 0308 	add.w	r3, r7, #8
 8000290:	4619      	mov	r1, r3
 8000292:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_GPIO_Init+0xa4>)
 8000294:	f000 fa78 	bl	8000788 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000298:	bf00      	nop
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40011000 	.word	0x40011000
 80002a8:	40010800 	.word	0x40010800

080002ac <recvTask>:

/* USER CODE BEGIN 4 */
void recvTask(void *NotUsed)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint32_t notificationvalue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80002b4:	f04f 31ff 	mov.w	r1, #4294967295
 80002b8:	2001      	movs	r0, #1
 80002ba:	f001 fc15 	bl	8001ae8 <ulTaskNotifyTake>
 80002be:	60f8      	str	r0, [r7, #12]
		if((notificationvalue & RED_LED_MASK) != 0)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d003      	beq.n	80002d2 <recvTask+0x26>
			RedLED.On();
 80002ca:	4b10      	ldr	r3, [pc, #64]	@ (800030c <recvTask+0x60>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4798      	blx	r3
 80002d0:	e002      	b.n	80002d8 <recvTask+0x2c>
		else
			RedLED.Off();
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <recvTask+0x60>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	4798      	blx	r3

		if((notificationvalue & BLUE_LED_MASK) != 0)
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f003 0303 	and.w	r3, r3, #3
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d003      	beq.n	80002ea <recvTask+0x3e>
			BlueLED.On();
 80002e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <recvTask+0x64>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4798      	blx	r3
 80002e8:	e002      	b.n	80002f0 <recvTask+0x44>
		else
			BlueLED.Off();
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <recvTask+0x64>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4798      	blx	r3

		if((notificationvalue & GREEN_LED_MASK) != 0)
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d003      	beq.n	8000302 <recvTask+0x56>
			GreenLED.On();
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <recvTask+0x68>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4798      	blx	r3
 8000300:	e7d8      	b.n	80002b4 <recvTask+0x8>
		else
			GreenLED.Off();
 8000302:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <recvTask+0x68>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	4798      	blx	r3
	{
 8000308:	e7d4      	b.n	80002b4 <recvTask+0x8>
 800030a:	bf00      	nop
 800030c:	2000000c 	.word	0x2000000c
 8000310:	20000014 	.word	0x20000014
 8000314:	20000004 	.word	0x20000004

08000318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031c:	b672      	cpsid	i
}
 800031e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <Error_Handler+0x8>

08000324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800032a:	4b18      	ldr	r3, [pc, #96]	@ (800038c <HAL_MspInit+0x68>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a17      	ldr	r2, [pc, #92]	@ (800038c <HAL_MspInit+0x68>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b15      	ldr	r3, [pc, #84]	@ (800038c <HAL_MspInit+0x68>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	4b12      	ldr	r3, [pc, #72]	@ (800038c <HAL_MspInit+0x68>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a11      	ldr	r2, [pc, #68]	@ (800038c <HAL_MspInit+0x68>)
 8000348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <HAL_MspInit+0x68>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	210f      	movs	r1, #15
 800035e:	f06f 0001 	mvn.w	r0, #1
 8000362:	f000 f9e8 	bl	8000736 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000366:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <HAL_MspInit+0x6c>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	4a04      	ldr	r2, [pc, #16]	@ (8000390 <HAL_MspInit+0x6c>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000

08000394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <NMI_Handler+0x4>

0800039c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <HardFault_Handler+0x4>

080003a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <MemManage_Handler+0x4>

080003ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <BusFault_Handler+0x4>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <UsageFault_Handler+0x4>

080003bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003cc:	f000 f8dc 	bl	8000588 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80003d0:	f001 fb6c 	bl	8001aac <xTaskGetSchedulerState>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d001      	beq.n	80003de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80003da:	f001 fd0d 	bl	8001df8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003f0:	f7ff fff7 	bl	80003e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480b      	ldr	r0, [pc, #44]	@ (8000424 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003f6:	490c      	ldr	r1, [pc, #48]	@ (8000428 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003f8:	4a0c      	ldr	r2, [pc, #48]	@ (800042c <LoopFillZerobss+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a09      	ldr	r2, [pc, #36]	@ (8000430 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800040c:	4c09      	ldr	r4, [pc, #36]	@ (8000434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800041a:	f001 ff03 	bl	8002224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff fe97 	bl	8000150 <main>
  bx lr
 8000422:	4770      	bx	lr
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800042c:	080022bc 	.word	0x080022bc
  ldr r2, =_sbss
 8000430:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000434:	20001160 	.word	0x20001160

08000438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC1_2_IRQHandler>

0800043a <Set_Pin>:
 *  Created on: Oct 2, 2025
 *      Author: dangm
 */
#include "Gpio_Config.h"

void Set_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	460b      	mov	r3, r1
 8000444:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000446:	887b      	ldrh	r3, [r7, #2]
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 fb1f 	bl	8000a90 <HAL_GPIO_WritePin>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <Reset_Pin>:

void Reset_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	460b      	mov	r3, r1
 8000464:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000466:	887b      	ldrh	r3, [r7, #2]
 8000468:	2200      	movs	r2, #0
 800046a:	4619      	mov	r1, r3
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 fb0f 	bl	8000a90 <HAL_GPIO_WritePin>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <GreenLed_On>:
 *      Author: dangm
 */

#include "My_Gpio.h"

void GreenLed_On(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 8000480:	2102      	movs	r1, #2
 8000482:	4802      	ldr	r0, [pc, #8]	@ (800048c <GreenLed_On+0x10>)
 8000484:	f7ff ffd9 	bl	800043a <Set_Pin>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010800 	.word	0x40010800

08000490 <GreenLed_Off>:

void GreenLed_Off(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 8000494:	2102      	movs	r1, #2
 8000496:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <GreenLed_Off+0x10>)
 8000498:	f7ff ffdf 	bl	800045a <Reset_Pin>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010800 	.word	0x40010800

080004a4 <RedLed_On>:

LED_t GreenLED = {GreenLed_On , GreenLed_Off};

void RedLed_On(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_RED, GPIO_LED_RED);
 80004a8:	2104      	movs	r1, #4
 80004aa:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <RedLed_On+0x10>)
 80004ac:	f7ff ffc5 	bl	800043a <Set_Pin>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40010800 	.word	0x40010800

080004b8 <RedLed_Off>:

void RedLed_Off(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_RED, GPIO_LED_RED);
 80004bc:	2104      	movs	r1, #4
 80004be:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <RedLed_Off+0x10>)
 80004c0:	f7ff ffcb 	bl	800045a <Reset_Pin>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010800 	.word	0x40010800

080004cc <BlueLed_On>:

LED_t RedLED = { RedLed_On, RedLed_Off};

void BlueLed_On(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_BLUE, GPIO_LED_BLUE);
 80004d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <BlueLed_On+0x14>)
 80004d6:	f7ff ffb0 	bl	800043a <Set_Pin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40011000 	.word	0x40011000

080004e4 <BlueLed_Off>:

void BlueLed_Off(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_BLUE, GPIO_LED_BLUE);
 80004e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <BlueLed_Off+0x14>)
 80004ee:	f7ff ffb4 	bl	800045a <Reset_Pin>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40011000 	.word	0x40011000

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <HAL_Init+0x28>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	@ (8000524 <HAL_Init+0x28>)
 8000506:	f043 0310 	orr.w	r3, r3, #16
 800050a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f907 	bl	8000720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f000 f808 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f7ff ff04 	bl	8000324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40022000 	.word	0x40022000

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f911 	bl	800076e <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295
 8000564:	f000 f8e7 	bl	8000736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000000 	.word	0x20000000
 8000580:	20000020 	.word	0x20000020
 8000584:	2000001c 	.word	0x2000001c

08000588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <HAL_IncTick+0x1c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_IncTick+0x20>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a03      	ldr	r2, [pc, #12]	@ (80005a8 <HAL_IncTick+0x20>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000020 	.word	0x20000020
 80005a8:	20000044 	.word	0x20000044

080005ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b02      	ldr	r3, [pc, #8]	@ (80005bc <HAL_GetTick+0x10>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	20000044 	.word	0x20000044

080005c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	@ (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	@ (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	@ 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	@ 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006ec:	d301      	bcc.n	80006f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ee:	2301      	movs	r3, #1
 80006f0:	e00f      	b.n	8000712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <SysTick_Config+0x40>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006fa:	210f      	movs	r1, #15
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	f7ff ff90 	bl	8000624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <SysTick_Config+0x40>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	4b04      	ldr	r3, [pc, #16]	@ (800071c <SysTick_Config+0x40>)
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	e000e010 	.word	0xe000e010

08000720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff49 	bl	80005c0 <__NVIC_SetPriorityGrouping>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000736:	b580      	push	{r7, lr}
 8000738:	b086      	sub	sp, #24
 800073a:	af00      	add	r7, sp, #0
 800073c:	4603      	mov	r3, r0
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000748:	f7ff ff5e 	bl	8000608 <__NVIC_GetPriorityGrouping>
 800074c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	68b9      	ldr	r1, [r7, #8]
 8000752:	6978      	ldr	r0, [r7, #20]
 8000754:	f7ff ff90 	bl	8000678 <NVIC_EncodePriority>
 8000758:	4602      	mov	r2, r0
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff5f 	bl	8000624 <__NVIC_SetPriority>
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffb0 	bl	80006dc <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000788:	b480      	push	{r7}
 800078a:	b08b      	sub	sp, #44	@ 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079a:	e169      	b.n	8000a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800079c:	2201      	movs	r2, #1
 800079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	69fa      	ldr	r2, [r7, #28]
 80007ac:	4013      	ands	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 8158 	bne.w	8000a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4a9a      	ldr	r2, [pc, #616]	@ (8000a28 <HAL_GPIO_Init+0x2a0>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d05e      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007c4:	4a98      	ldr	r2, [pc, #608]	@ (8000a28 <HAL_GPIO_Init+0x2a0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d875      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007ca:	4a98      	ldr	r2, [pc, #608]	@ (8000a2c <HAL_GPIO_Init+0x2a4>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d058      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007d0:	4a96      	ldr	r2, [pc, #600]	@ (8000a2c <HAL_GPIO_Init+0x2a4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d86f      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007d6:	4a96      	ldr	r2, [pc, #600]	@ (8000a30 <HAL_GPIO_Init+0x2a8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d052      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007dc:	4a94      	ldr	r2, [pc, #592]	@ (8000a30 <HAL_GPIO_Init+0x2a8>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d869      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007e2:	4a94      	ldr	r2, [pc, #592]	@ (8000a34 <HAL_GPIO_Init+0x2ac>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d04c      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007e8:	4a92      	ldr	r2, [pc, #584]	@ (8000a34 <HAL_GPIO_Init+0x2ac>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d863      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007ee:	4a92      	ldr	r2, [pc, #584]	@ (8000a38 <HAL_GPIO_Init+0x2b0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d046      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007f4:	4a90      	ldr	r2, [pc, #576]	@ (8000a38 <HAL_GPIO_Init+0x2b0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d85d      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d82a      	bhi.n	8000854 <HAL_GPIO_Init+0xcc>
 80007fe:	2b12      	cmp	r3, #18
 8000800:	d859      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 8000802:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <HAL_GPIO_Init+0x80>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000883 	.word	0x08000883
 800080c:	0800085d 	.word	0x0800085d
 8000810:	0800086f 	.word	0x0800086f
 8000814:	080008b1 	.word	0x080008b1
 8000818:	080008b7 	.word	0x080008b7
 800081c:	080008b7 	.word	0x080008b7
 8000820:	080008b7 	.word	0x080008b7
 8000824:	080008b7 	.word	0x080008b7
 8000828:	080008b7 	.word	0x080008b7
 800082c:	080008b7 	.word	0x080008b7
 8000830:	080008b7 	.word	0x080008b7
 8000834:	080008b7 	.word	0x080008b7
 8000838:	080008b7 	.word	0x080008b7
 800083c:	080008b7 	.word	0x080008b7
 8000840:	080008b7 	.word	0x080008b7
 8000844:	080008b7 	.word	0x080008b7
 8000848:	080008b7 	.word	0x080008b7
 800084c:	08000865 	.word	0x08000865
 8000850:	08000879 	.word	0x08000879
 8000854:	4a79      	ldr	r2, [pc, #484]	@ (8000a3c <HAL_GPIO_Init+0x2b4>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d013      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800085a:	e02c      	b.n	80008b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e029      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	3304      	adds	r3, #4
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e024      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	3308      	adds	r3, #8
 8000874:	623b      	str	r3, [r7, #32]
          break;
 8000876:	e01f      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	330c      	adds	r3, #12
 800087e:	623b      	str	r3, [r7, #32]
          break;
 8000880:	e01a      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800088a:	2304      	movs	r3, #4
 800088c:	623b      	str	r3, [r7, #32]
          break;
 800088e:	e013      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d105      	bne.n	80008a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000898:	2308      	movs	r3, #8
 800089a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	611a      	str	r2, [r3, #16]
          break;
 80008a2:	e009      	b.n	80008b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	615a      	str	r2, [r3, #20]
          break;
 80008ae:	e003      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
          break;
 80008b4:	e000      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          break;
 80008b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	2bff      	cmp	r3, #255	@ 0xff
 80008bc:	d801      	bhi.n	80008c2 <HAL_GPIO_Init+0x13a>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	e001      	b.n	80008c6 <HAL_GPIO_Init+0x13e>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3304      	adds	r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2bff      	cmp	r3, #255	@ 0xff
 80008cc:	d802      	bhi.n	80008d4 <HAL_GPIO_Init+0x14c>
 80008ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	e002      	b.n	80008da <HAL_GPIO_Init+0x152>
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	3b08      	subs	r3, #8
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	210f      	movs	r1, #15
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	401a      	ands	r2, r3
 80008ec:	6a39      	ldr	r1, [r7, #32]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	431a      	orrs	r2, r3
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 80b1 	beq.w	8000a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000908:	4b4d      	ldr	r3, [pc, #308]	@ (8000a40 <HAL_GPIO_Init+0x2b8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a4c      	ldr	r2, [pc, #304]	@ (8000a40 <HAL_GPIO_Init+0x2b8>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b4a      	ldr	r3, [pc, #296]	@ (8000a40 <HAL_GPIO_Init+0x2b8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000920:	4a48      	ldr	r2, [pc, #288]	@ (8000a44 <HAL_GPIO_Init+0x2bc>)
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	3302      	adds	r3, #2
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800092e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a40      	ldr	r2, [pc, #256]	@ (8000a48 <HAL_GPIO_Init+0x2c0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d013      	beq.n	8000974 <HAL_GPIO_Init+0x1ec>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a4c <HAL_GPIO_Init+0x2c4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00d      	beq.n	8000970 <HAL_GPIO_Init+0x1e8>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3e      	ldr	r2, [pc, #248]	@ (8000a50 <HAL_GPIO_Init+0x2c8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x1e4>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a54 <HAL_GPIO_Init+0x2cc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <HAL_GPIO_Init+0x1e0>
 8000964:	2303      	movs	r3, #3
 8000966:	e006      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000968:	2304      	movs	r3, #4
 800096a:	e004      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 800096c:	2302      	movs	r3, #2
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000974:	2300      	movs	r3, #0
 8000976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000978:	f002 0203 	and.w	r2, r2, #3
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	4093      	lsls	r3, r2
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000986:	492f      	ldr	r1, [pc, #188]	@ (8000a44 <HAL_GPIO_Init+0x2bc>)
 8000988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	492c      	ldr	r1, [pc, #176]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	608b      	str	r3, [r1, #8]
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	4928      	ldr	r1, [pc, #160]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	4922      	ldr	r1, [pc, #136]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60cb      	str	r3, [r1, #12]
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009d8:	68da      	ldr	r2, [r3, #12]
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	43db      	mvns	r3, r3
 80009de:	491e      	ldr	r1, [pc, #120]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009f0:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	4918      	ldr	r1, [pc, #96]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	604b      	str	r3, [r1, #4]
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	4914      	ldr	r1, [pc, #80]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d021      	beq.n	8000a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	490e      	ldr	r1, [pc, #56]	@ (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
 8000a24:	e021      	b.n	8000a6a <HAL_GPIO_Init+0x2e2>
 8000a26:	bf00      	nop
 8000a28:	10320000 	.word	0x10320000
 8000a2c:	10310000 	.word	0x10310000
 8000a30:	10220000 	.word	0x10220000
 8000a34:	10210000 	.word	0x10210000
 8000a38:	10120000 	.word	0x10120000
 8000a3c:	10110000 	.word	0x10110000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40011400 	.word	0x40011400
 8000a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <HAL_GPIO_Init+0x304>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4909      	ldr	r1, [pc, #36]	@ (8000a8c <HAL_GPIO_Init+0x304>)
 8000a66:	4013      	ands	r3, r2
 8000a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f47f ae8e 	bne.w	800079c <HAL_GPIO_Init+0x14>
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	372c      	adds	r7, #44	@ 0x2c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40010400 	.word	0x40010400

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aac:	e003      	b.n	8000ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	611a      	str	r2, [r3, #16]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e272      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 8087 	beq.w	8000bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae0:	4b92      	ldr	r3, [pc, #584]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d00c      	beq.n	8000b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aec:	4b8f      	ldr	r3, [pc, #572]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d112      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
 8000af8:	4b8c      	ldr	r3, [pc, #560]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b04:	d10b      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b06:	4b89      	ldr	r3, [pc, #548]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d06c      	beq.n	8000bec <HAL_RCC_OscConfig+0x12c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d168      	bne.n	8000bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e24c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b26:	d106      	bne.n	8000b36 <HAL_RCC_OscConfig+0x76>
 8000b28:	4b80      	ldr	r3, [pc, #512]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e02e      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_OscConfig+0x98>
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a7a      	ldr	r2, [pc, #488]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b78      	ldr	r3, [pc, #480]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a77      	ldr	r2, [pc, #476]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e01d      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0xbc>
 8000b62:	4b72      	ldr	r3, [pc, #456]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a71      	ldr	r2, [pc, #452]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a6e      	ldr	r2, [pc, #440]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e00b      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a6a      	ldr	r2, [pc, #424]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b68      	ldr	r3, [pc, #416]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a67      	ldr	r2, [pc, #412]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fd06 	bl	80005ac <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fd02 	bl	80005ac <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b64      	cmp	r3, #100	@ 0x64
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e200      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f0      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe4>
 8000bc2:	e014      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fcf2 	bl	80005ac <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fcee 	bl	80005ac <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	@ 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e1ec      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bde:	4b53      	ldr	r3, [pc, #332]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f0      	bne.n	8000bcc <HAL_RCC_OscConfig+0x10c>
 8000bea:	e000      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d063      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c06:	4b49      	ldr	r3, [pc, #292]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d11c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
 8000c12:	4b46      	ldr	r3, [pc, #280]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d116      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	4b43      	ldr	r3, [pc, #268]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e1c0      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c36:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4939      	ldr	r1, [pc, #228]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	e03a      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d020      	beq.n	8000c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c54:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fca7 	bl	80005ac <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c62:	f7ff fca3 	bl	80005ac <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e1a1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4927      	ldr	r1, [pc, #156]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
 8000c94:	e015      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fc86 	bl	80005ac <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc82 	bl	80005ac <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e180      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d03a      	beq.n	8000d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d019      	beq.n	8000d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc66 	bl	80005ac <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc62 	bl	80005ac <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e160      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 fa9c 	bl	8001240 <RCC_Delay>
 8000d08:	e01c      	b.n	8000d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d10:	f7ff fc4c 	bl	80005ac <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d16:	e00f      	b.n	8000d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc48 	bl	80005ac <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d908      	bls.n	8000d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e146      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	42420000 	.word	0x42420000
 8000d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d38:	4b92      	ldr	r3, [pc, #584]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e9      	bne.n	8000d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80a6 	beq.w	8000e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d56:	4b8b      	ldr	r3, [pc, #556]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b88      	ldr	r3, [pc, #544]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a87      	ldr	r2, [pc, #540]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b85      	ldr	r3, [pc, #532]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b82      	ldr	r3, [pc, #520]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d118      	bne.n	8000dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fc09 	bl	80005ac <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9e:	f7ff fc05 	bl	80005ac <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	@ 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e103      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db0:	4b75      	ldr	r3, [pc, #468]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x312>
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6213      	str	r3, [r2, #32]
 8000dd0:	e02d      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x334>
 8000dda:	4b6a      	ldr	r3, [pc, #424]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a69      	ldr	r2, [pc, #420]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6213      	str	r3, [r2, #32]
 8000de6:	4b67      	ldr	r3, [pc, #412]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	4a66      	ldr	r2, [pc, #408]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	6213      	str	r3, [r2, #32]
 8000df2:	e01c      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x356>
 8000dfc:	4b61      	ldr	r3, [pc, #388]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a60      	ldr	r2, [pc, #384]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6213      	str	r3, [r2, #32]
 8000e08:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e00b      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000e16:	4b5b      	ldr	r3, [pc, #364]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4a57      	ldr	r2, [pc, #348]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fbb9 	bl	80005ac <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fbb5 	bl	80005ac <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e0b1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	4b4b      	ldr	r3, [pc, #300]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ee      	beq.n	8000e3e <HAL_RCC_OscConfig+0x37e>
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fba3 	bl	80005ac <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb9f 	bl	80005ac <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e09b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	4b40      	ldr	r3, [pc, #256]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ee      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d105      	bne.n	8000e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e92:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a3b      	ldr	r2, [pc, #236]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d061      	beq.n	8000f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d146      	bne.n	8000f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebc:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb73 	bl	80005ac <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fb6f 	bl	80005ac <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e06d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef0:	d108      	bne.n	8000f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4921      	ldr	r1, [pc, #132]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a19      	ldr	r1, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f14:	430b      	orrs	r3, r1
 8000f16:	491b      	ldr	r1, [pc, #108]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb43 	bl	80005ac <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb3f 	bl	80005ac <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e03d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46a>
 8000f48:	e035      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb2c 	bl	80005ac <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fb28 	bl	80005ac <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e026      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x498>
 8000f76:	e01e      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d107      	bne.n	8000f90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e019      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_RCC_OscConfig+0x500>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0d0      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d910      	bls.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 0207 	bic.w	r2, r3, #7
 8000fee:	4965      	ldr	r1, [pc, #404]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d001      	beq.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0b8      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001020:	4b59      	ldr	r3, [pc, #356]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a58      	ldr	r2, [pc, #352]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800102a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a52      	ldr	r2, [pc, #328]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001044:	4b50      	ldr	r3, [pc, #320]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	494d      	ldr	r1, [pc, #308]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d040      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b47      	ldr	r3, [pc, #284]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d115      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e07f      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001082:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e073      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e06b      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f023 0203 	bic.w	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4936      	ldr	r1, [pc, #216]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fa7a 	bl	80005ac <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fa76 	bl	80005ac <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e053      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 020c 	and.w	r2, r3, #12
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1eb      	bne.n	80010bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d210      	bcs.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 0207 	bic.w	r2, r3, #7
 80010fa:	4922      	ldr	r1, [pc, #136]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e032      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4916      	ldr	r1, [pc, #88]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	490e      	ldr	r1, [pc, #56]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001152:	f000 f821 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 8001156:	4602      	mov	r2, r0
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	490a      	ldr	r1, [pc, #40]	@ (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <HAL_RCC_ClockConfig+0x1cc>)
 800116c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_RCC_ClockConfig+0x1d0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d8 	bl	8000528 <HAL_InitTick>

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	08002290 	.word	0x08002290
 8001190:	20000000 	.word	0x20000000
 8001194:	2000001c 	.word	0x2000001c

08001198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <HAL_RCC_GetSysClockFreq+0x94>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d002      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x30>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x36>
 80011c6:	e027      	b.n	8001218 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 80011ca:	613b      	str	r3, [r7, #16]
      break;
 80011cc:	e027      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d010      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_RCC_GetSysClockFreq+0x94>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	0c5b      	lsrs	r3, r3, #17
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 80011fa:	fb03 f202 	mul.w	r2, r3, r2
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e004      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0c      	ldr	r2, [pc, #48]	@ (800123c <HAL_RCC_GetSysClockFreq+0xa4>)
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	613b      	str	r3, [r7, #16]
      break;
 8001216:	e002      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 800121a:	613b      	str	r3, [r7, #16]
      break;
 800121c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800121e:	693b      	ldr	r3, [r7, #16]
}
 8001220:	4618      	mov	r0, r3
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	007a1200 	.word	0x007a1200
 8001234:	080022a0 	.word	0x080022a0
 8001238:	080022b0 	.word	0x080022b0
 800123c:	003d0900 	.word	0x003d0900

08001240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <RCC_Delay+0x34>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <RCC_Delay+0x38>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0a5b      	lsrs	r3, r3, #9
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800125c:	bf00      	nop
  }
  while (Delay --);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f9      	bne.n	800125c <RCC_Delay+0x1c>
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000000 	.word	0x20000000
 8001278:	10624dd3 	.word	0x10624dd3

0800127c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f103 0208 	add.w	r2, r3, #8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0208 	add.w	r2, r3, #8
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f103 0208 	add.w	r2, r3, #8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132e:	d103      	bne.n	8001338 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e00c      	b.n	8001352 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3308      	adds	r3, #8
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e002      	b.n	8001346 <vListInsert+0x2e>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	429a      	cmp	r2, r3
 8001350:	d2f6      	bcs.n	8001340 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6892      	ldr	r2, [r2, #8]
 800139e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6852      	ldr	r2, [r2, #4]
 80013a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d103      	bne.n	80013bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b08c      	sub	sp, #48	@ 0x30
 80013de:	af04      	add	r7, sp, #16
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fd24 	bl	8001e3c <pvPortMalloc>
 80013f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00e      	beq.n	800141a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80013fc:	205c      	movs	r0, #92	@ 0x5c
 80013fe:	f000 fd1d 	bl	8001e3c <pvPortMalloc>
 8001402:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001410:	e005      	b.n	800141e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f000 fde0 	bl	8001fd8 <vPortFree>
 8001418:	e001      	b.n	800141e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d017      	beq.n	8001454 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	2300      	movs	r3, #0
 8001430:	9303      	str	r3, [sp, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f000 f80e 	bl	8001464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001448:	69f8      	ldr	r0, [r7, #28]
 800144a:	f000 f89b 	bl	8001584 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	e002      	b.n	800145a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800145a:	69bb      	ldr	r3, [r7, #24]
	}
 800145c:	4618      	mov	r0, r3
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001474:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	461a      	mov	r2, r3
 800147c:	21a5      	movs	r1, #165	@ 0xa5
 800147e:	f000 fec9 	bl	8002214 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800148c:	3b01      	subs	r3, #1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f023 0307 	bic.w	r3, r3, #7
 800149a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014aa:	f383 8811 	msr	BASEPRI, r3
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	f3bf 8f4f 	dsb	sy
 80014b6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	e7fd      	b.n	80014ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01f      	beq.n	8001504 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	e012      	b.n	80014f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	7819      	ldrb	r1, [r3, #0]
 80014d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	3334      	adds	r3, #52	@ 0x34
 80014da:	460a      	mov	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d9e9      	bls.n	80014ca <prvInitialiseNewTask+0x66>
 80014f6:	e000      	b.n	80014fa <prvInitialiseNewTask+0x96>
			{
				break;
 80014f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80014fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001502:	e003      	b.n	800150c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800150c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150e:	2b37      	cmp	r3, #55	@ 0x37
 8001510:	d901      	bls.n	8001516 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001512:	2337      	movs	r3, #55	@ 0x37
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800151c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001520:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001524:	2200      	movs	r2, #0
 8001526:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152a:	3304      	adds	r3, #4
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fec4 	bl	80012ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001534:	3318      	adds	r3, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff febf 	bl	80012ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800153c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800153e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001540:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800154a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800154c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800154e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001554:	2200      	movs	r2, #0
 8001556:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	68f9      	ldr	r1, [r7, #12]
 8001564:	69b8      	ldr	r0, [r7, #24]
 8001566:	f000 fb5b 	bl	8001c20 <pxPortInitialiseStack>
 800156a:	4602      	mov	r2, r0
 800156c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800157a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800158c:	f000 fbb4 	bl	8001cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001590:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <prvAddNewTaskToReadyList+0xc4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a2c      	ldr	r2, [pc, #176]	@ (8001648 <prvAddNewTaskToReadyList+0xc4>)
 8001598:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <prvAddNewTaskToReadyList+0xc8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80015a2:	4a2a      	ldr	r2, [pc, #168]	@ (800164c <prvAddNewTaskToReadyList+0xc8>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <prvAddNewTaskToReadyList+0xc4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d110      	bne.n	80015d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80015b0:	f000 fa1c 	bl	80019ec <prvInitialiseTaskLists>
 80015b4:	e00d      	b.n	80015d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <prvAddNewTaskToReadyList+0xcc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <prvAddNewTaskToReadyList+0xc8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d802      	bhi.n	80015d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80015cc:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <prvAddNewTaskToReadyList+0xc8>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <prvAddNewTaskToReadyList+0xd0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <prvAddNewTaskToReadyList+0xd0>)
 80015da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <prvAddNewTaskToReadyList+0xd0>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <prvAddNewTaskToReadyList+0xd4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d903      	bls.n	80015f8 <prvAddNewTaskToReadyList+0x74>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f4:	4a18      	ldr	r2, [pc, #96]	@ (8001658 <prvAddNewTaskToReadyList+0xd4>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4a15      	ldr	r2, [pc, #84]	@ (800165c <prvAddNewTaskToReadyList+0xd8>)
 8001606:	441a      	add	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3304      	adds	r3, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff fe5f 	bl	80012d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001614:	f000 fba0 	bl	8001d58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <prvAddNewTaskToReadyList+0xcc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00e      	beq.n	800163e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <prvAddNewTaskToReadyList+0xc8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	429a      	cmp	r2, r3
 800162c:	d207      	bcs.n	800163e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <prvAddNewTaskToReadyList+0xdc>)
 8001630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000518 	.word	0x20000518
 800164c:	20000048 	.word	0x20000048
 8001650:	20000524 	.word	0x20000524
 8001654:	20000534 	.word	0x20000534
 8001658:	20000520 	.word	0x20000520
 800165c:	2000004c 	.word	0x2000004c
 8001660:	e000ed04 	.word	0xe000ed04

08001664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <vTaskSuspendAll+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a03      	ldr	r2, [pc, #12]	@ (800167c <vTaskSuspendAll+0x18>)
 8001670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000053c 	.word	0x2000053c

08001680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800168e:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <xTaskResumeAll+0x118>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10b      	bne.n	80016ae <xTaskResumeAll+0x2e>
	__asm volatile
 8001696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	603b      	str	r3, [r7, #0]
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	e7fd      	b.n	80016aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80016ae:	f000 fb23 	bl	8001cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80016b2:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <xTaskResumeAll+0x118>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	4a37      	ldr	r2, [pc, #220]	@ (8001798 <xTaskResumeAll+0x118>)
 80016ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <xTaskResumeAll+0x118>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d162      	bne.n	800178a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016c4:	4b35      	ldr	r3, [pc, #212]	@ (800179c <xTaskResumeAll+0x11c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d05e      	beq.n	800178a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016cc:	e02f      	b.n	800172e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <xTaskResumeAll+0x120>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3318      	adds	r3, #24
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe54 	bl	8001388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3304      	adds	r3, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe4f 	bl	8001388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <xTaskResumeAll+0x124>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d903      	bls.n	80016fe <xTaskResumeAll+0x7e>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fa:	4a2a      	ldr	r2, [pc, #168]	@ (80017a4 <xTaskResumeAll+0x124>)
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4a27      	ldr	r2, [pc, #156]	@ (80017a8 <xTaskResumeAll+0x128>)
 800170c:	441a      	add	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff fddc 	bl	80012d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <xTaskResumeAll+0x12c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	429a      	cmp	r2, r3
 8001726:	d302      	bcc.n	800172e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8001728:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <xTaskResumeAll+0x130>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <xTaskResumeAll+0x120>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1cb      	bne.n	80016ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800173c:	f000 f996 	bl	8001a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <xTaskResumeAll+0x134>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800174c:	f000 f836 	bl	80017bc <xTaskIncrementTick>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <xTaskResumeAll+0x130>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f1      	bne.n	800174c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <xTaskResumeAll+0x134>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <xTaskResumeAll+0x130>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <xTaskResumeAll+0x138>)
 800177c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800178a:	f000 fae5 	bl	8001d58 <vPortExitCritical>

	return xAlreadyYielded;
 800178e:	68bb      	ldr	r3, [r7, #8]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000053c 	.word	0x2000053c
 800179c:	20000518 	.word	0x20000518
 80017a0:	200004dc 	.word	0x200004dc
 80017a4:	20000520 	.word	0x20000520
 80017a8:	2000004c 	.word	0x2000004c
 80017ac:	20000048 	.word	0x20000048
 80017b0:	2000052c 	.word	0x2000052c
 80017b4:	20000528 	.word	0x20000528
 80017b8:	e000ed04 	.word	0xe000ed04

080017bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001904 <xTaskIncrementTick+0x148>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 8090 	bne.w	80018f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80017d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001908 <xTaskIncrementTick+0x14c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80017d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001908 <xTaskIncrementTick+0x14c>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80017e4:	4b49      	ldr	r3, [pc, #292]	@ (800190c <xTaskIncrementTick+0x150>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <xTaskIncrementTick+0x4a>
	__asm volatile
 80017ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	603b      	str	r3, [r7, #0]
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	e7fd      	b.n	8001802 <xTaskIncrementTick+0x46>
 8001806:	4b41      	ldr	r3, [pc, #260]	@ (800190c <xTaskIncrementTick+0x150>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <xTaskIncrementTick+0x154>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3e      	ldr	r2, [pc, #248]	@ (800190c <xTaskIncrementTick+0x150>)
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4a3e      	ldr	r2, [pc, #248]	@ (8001910 <xTaskIncrementTick+0x154>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b3e      	ldr	r3, [pc, #248]	@ (8001914 <xTaskIncrementTick+0x158>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a3c      	ldr	r2, [pc, #240]	@ (8001914 <xTaskIncrementTick+0x158>)
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	f000 f922 	bl	8001a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001828:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <xTaskIncrementTick+0x15c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	429a      	cmp	r2, r3
 8001830:	d349      	bcc.n	80018c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001832:	4b36      	ldr	r3, [pc, #216]	@ (800190c <xTaskIncrementTick+0x150>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d104      	bne.n	8001846 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800183c:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <xTaskIncrementTick+0x15c>)
 800183e:	f04f 32ff 	mov.w	r2, #4294967295
 8001842:	601a      	str	r2, [r3, #0]
					break;
 8001844:	e03f      	b.n	80018c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <xTaskIncrementTick+0x150>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	d203      	bcs.n	8001866 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800185e:	4a2e      	ldr	r2, [pc, #184]	@ (8001918 <xTaskIncrementTick+0x15c>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001864:	e02f      	b.n	80018c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3304      	adds	r3, #4
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fd8c 	bl	8001388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3318      	adds	r3, #24
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fd83 	bl	8001388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <xTaskIncrementTick+0x160>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d903      	bls.n	8001896 <xTaskIncrementTick+0xda>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	4a22      	ldr	r2, [pc, #136]	@ (800191c <xTaskIncrementTick+0x160>)
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001920 <xTaskIncrementTick+0x164>)
 80018a4:	441a      	add	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3304      	adds	r3, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7ff fd10 	bl	80012d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <xTaskIncrementTick+0x168>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3b8      	bcc.n	8001832 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018c4:	e7b5      	b.n	8001832 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <xTaskIncrementTick+0x168>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018cc:	4914      	ldr	r1, [pc, #80]	@ (8001920 <xTaskIncrementTick+0x164>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d901      	bls.n	80018e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <xTaskIncrementTick+0x16c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e004      	b.n	80018fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <xTaskIncrementTick+0x170>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <xTaskIncrementTick+0x170>)
 80018f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80018fa:	697b      	ldr	r3, [r7, #20]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000053c 	.word	0x2000053c
 8001908:	2000051c 	.word	0x2000051c
 800190c:	200004d4 	.word	0x200004d4
 8001910:	200004d8 	.word	0x200004d8
 8001914:	20000530 	.word	0x20000530
 8001918:	20000538 	.word	0x20000538
 800191c:	20000520 	.word	0x20000520
 8001920:	2000004c 	.word	0x2000004c
 8001924:	20000048 	.word	0x20000048
 8001928:	2000052c 	.word	0x2000052c
 800192c:	20000528 	.word	0x20000528

08001930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001936:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <vTaskSwitchContext+0xa8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <vTaskSwitchContext+0xac>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001944:	e042      	b.n	80019cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <vTaskSwitchContext+0xac>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <vTaskSwitchContext+0xb0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e011      	b.n	8001978 <vTaskSwitchContext+0x48>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10b      	bne.n	8001972 <vTaskSwitchContext+0x42>
	__asm volatile
 800195a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	607b      	str	r3, [r7, #4]
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	e7fd      	b.n	800196e <vTaskSwitchContext+0x3e>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3b01      	subs	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	491a      	ldr	r1, [pc, #104]	@ (80019e4 <vTaskSwitchContext+0xb4>)
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0e3      	beq.n	8001954 <vTaskSwitchContext+0x24>
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <vTaskSwitchContext+0xb4>)
 8001998:	4413      	add	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3308      	adds	r3, #8
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d104      	bne.n	80019bc <vTaskSwitchContext+0x8c>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <vTaskSwitchContext+0xb8>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <vTaskSwitchContext+0xb0>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000053c 	.word	0x2000053c
 80019dc:	2000052c 	.word	0x2000052c
 80019e0:	20000520 	.word	0x20000520
 80019e4:	2000004c 	.word	0x2000004c
 80019e8:	20000048 	.word	0x20000048

080019ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	e00c      	b.n	8001a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <prvInitialiseTaskLists+0x60>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fc38 	bl	800127c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b37      	cmp	r3, #55	@ 0x37
 8001a16:	d9ef      	bls.n	80019f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001a18:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <prvInitialiseTaskLists+0x64>)
 8001a1a:	f7ff fc2f 	bl	800127c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <prvInitialiseTaskLists+0x68>)
 8001a20:	f7ff fc2c 	bl	800127c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a24:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <prvInitialiseTaskLists+0x6c>)
 8001a26:	f7ff fc29 	bl	800127c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001a2a:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <prvInitialiseTaskLists+0x70>)
 8001a2c:	f7ff fc26 	bl	800127c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <prvInitialiseTaskLists+0x74>)
 8001a32:	f7ff fc23 	bl	800127c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <prvInitialiseTaskLists+0x78>)
 8001a38:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <prvInitialiseTaskLists+0x64>)
 8001a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <prvInitialiseTaskLists+0x7c>)
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <prvInitialiseTaskLists+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000004c 	.word	0x2000004c
 8001a50:	200004ac 	.word	0x200004ac
 8001a54:	200004c0 	.word	0x200004c0
 8001a58:	200004dc 	.word	0x200004dc
 8001a5c:	200004f0 	.word	0x200004f0
 8001a60:	20000504 	.word	0x20000504
 8001a64:	200004d4 	.word	0x200004d4
 8001a68:	200004d8 	.word	0x200004d8

08001a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <prvResetNextTaskUnblockTime+0x38>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d104      	bne.n	8001a86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001a84:	e008      	b.n	8001a98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <prvResetNextTaskUnblockTime+0x38>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200004d4 	.word	0x200004d4
 8001aa8:	20000538 	.word	0x20000538

08001aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <xTaskGetSchedulerState+0x34>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001aba:	2301      	movs	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	e008      	b.n	8001ad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <xTaskGetSchedulerState+0x38>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e001      	b.n	8001ad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001ad2:	687b      	ldr	r3, [r7, #4]
	}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000524 	.word	0x20000524
 8001ae4:	2000053c 	.word	0x2000053c

08001ae8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8001af2:	f000 f901 	bl	8001cf8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <ulTaskNotifyTake+0x88>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d113      	bne.n	8001b28 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <ulTaskNotifyTake+0x88>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b10:	2101      	movs	r1, #1
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f000 f830 	bl	8001b78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <ulTaskNotifyTake+0x8c>)
 8001b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001b28:	f000 f916 	bl	8001d58 <vPortExitCritical>

		taskENTER_CRITICAL();
 8001b2c:	f000 f8e4 	bl	8001cf8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <ulTaskNotifyTake+0x88>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b36:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <ulTaskNotifyTake+0x88>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b4c:	e004      	b.n	8001b58 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <ulTaskNotifyTake+0x88>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	3a01      	subs	r2, #1
 8001b56:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <ulTaskNotifyTake+0x88>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8001b62:	f000 f8f9 	bl	8001d58 <vPortExitCritical>

		return ulReturn;
 8001b66:	68fb      	ldr	r3, [r7, #12]
	}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000048 	.word	0x20000048
 8001b74:	e000ed04 	.word	0xe000ed04

08001b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b82:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <prvAddCurrentTaskToDelayedList+0x90>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbfa 	bl	8001388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d10a      	bne.n	8001bb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4819      	ldr	r0, [pc, #100]	@ (8001c10 <prvAddCurrentTaskToDelayedList+0x98>)
 8001bac:	f7ff fb91 	bl	80012d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001bb0:	e026      	b.n	8001c00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d209      	bcs.n	8001bde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f7ff fb9e 	bl	8001318 <vListInsert>
}
 8001bdc:	e010      	b.n	8001c00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3304      	adds	r3, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff fb94 	bl	8001318 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d202      	bcs.n	8001c00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001bfa:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000051c 	.word	0x2000051c
 8001c0c:	20000048 	.word	0x20000048
 8001c10:	20000504 	.word	0x20000504
 8001c14:	200004d8 	.word	0x200004d8
 8001c18:	200004d4 	.word	0x200004d4
 8001c1c:	20000538 	.word	0x20000538

08001c20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3b04      	subs	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f023 0201 	bic.w	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3b04      	subs	r3, #4
 8001c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001c50:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <pxPortInitialiseStack+0x54>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b14      	subs	r3, #20
 8001c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b20      	subs	r3, #32
 8001c66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	08001c79 	.word	0x08001c79

08001c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <prvTaskExitError+0x54>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8a:	d00b      	beq.n	8001ca4 <prvTaskExitError+0x2c>
	__asm volatile
 8001c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	60fb      	str	r3, [r7, #12]
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <prvTaskExitError+0x28>
	__asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	60bb      	str	r3, [r7, #8]
}
 8001cb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001cb8:	bf00      	nop
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0fc      	beq.n	8001cba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000024 	.word	0x20000024

08001cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <pxCurrentTCBConst2>)
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	6808      	ldr	r0, [r1, #0]
 8001cd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cda:	f380 8809 	msr	PSP, r0
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f380 8811 	msr	BASEPRI, r0
 8001cea:	f04e 0e0d 	orr.w	lr, lr, #13
 8001cee:	4770      	bx	lr

08001cf0 <pxCurrentTCBConst2>:
 8001cf0:	20000048 	.word	0x20000048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop

08001cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8001cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	607b      	str	r3, [r7, #4]
}
 8001d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <vPortEnterCritical+0x58>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <vPortEnterCritical+0x58>)
 8001d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <vPortEnterCritical+0x58>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d110      	bne.n	8001d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <vPortEnterCritical+0x5c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8001d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	603b      	str	r3, [r7, #0]
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	e7fd      	b.n	8001d42 <vPortEnterCritical+0x4a>
	}
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000024 	.word	0x20000024
 8001d54:	e000ed04 	.word	0xe000ed04

08001d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <vPortExitCritical+0x50>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10b      	bne.n	8001d7e <vPortExitCritical+0x26>
	__asm volatile
 8001d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6a:	f383 8811 	msr	BASEPRI, r3
 8001d6e:	f3bf 8f6f 	isb	sy
 8001d72:	f3bf 8f4f 	dsb	sy
 8001d76:	607b      	str	r3, [r7, #4]
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	e7fd      	b.n	8001d7a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <vPortExitCritical+0x50>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4a08      	ldr	r2, [pc, #32]	@ (8001da8 <vPortExitCritical+0x50>)
 8001d86:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <vPortExitCritical+0x50>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <vPortExitCritical+0x44>
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d9a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000024 	.word	0x20000024
 8001dac:	00000000 	.word	0x00000000

08001db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001db0:	f3ef 8009 	mrs	r0, PSP
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <pxCurrentTCBConst>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dc0:	6010      	str	r0, [r2, #0]
 8001dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001dc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001dca:	f380 8811 	msr	BASEPRI, r0
 8001dce:	f7ff fdaf 	bl	8001930 <vTaskSwitchContext>
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f380 8811 	msr	BASEPRI, r0
 8001dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	6808      	ldr	r0, [r1, #0]
 8001de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001de6:	f380 8809 	msr	PSP, r0
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	4770      	bx	lr

08001df0 <pxCurrentTCBConst>:
 8001df0:	20000048 	.word	0x20000048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop

08001df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8001dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	607b      	str	r3, [r7, #4]
}
 8001e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001e12:	f7ff fcd3 	bl	80017bc <xTaskIncrementTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <xPortSysTickHandler+0x40>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f383 8811 	msr	BASEPRI, r3
}
 8001e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	e000ed04 	.word	0xe000ed04

08001e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001e48:	f7ff fc0c 	bl	8001664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc0 <pvPortMalloc+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001e54:	f000 f924 	bl	80020a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e58:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc4 <pvPortMalloc+0x188>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 8095 	bne.w	8001f90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01e      	beq.n	8001eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f023 0307 	bic.w	r3, r3, #7
 8001e84:	3308      	adds	r3, #8
 8001e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <pvPortMalloc+0x6e>
	__asm volatile
 8001e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	f3bf 8f6f 	isb	sy
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	617b      	str	r3, [r7, #20]
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d06f      	beq.n	8001f90 <pvPortMalloc+0x154>
 8001eb0:	4b45      	ldr	r3, [pc, #276]	@ (8001fc8 <pvPortMalloc+0x18c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d86a      	bhi.n	8001f90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001eba:	4b44      	ldr	r3, [pc, #272]	@ (8001fcc <pvPortMalloc+0x190>)
 8001ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001ebe:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <pvPortMalloc+0x190>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ec4:	e004      	b.n	8001ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d903      	bls.n	8001ee2 <pvPortMalloc+0xa6>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f1      	bne.n	8001ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <pvPortMalloc+0x184>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d051      	beq.n	8001f90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	4413      	add	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad2      	subs	r2, r2, r3
 8001f06:	2308      	movs	r3, #8
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d920      	bls.n	8001f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <pvPortMalloc+0xfc>
	__asm volatile
 8001f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	613b      	str	r3, [r7, #16]
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f4a:	69b8      	ldr	r0, [r7, #24]
 8001f4c:	f000 f90a 	bl	8002164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <pvPortMalloc+0x18c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc8 <pvPortMalloc+0x18c>)
 8001f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <pvPortMalloc+0x18c>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <pvPortMalloc+0x194>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d203      	bcs.n	8001f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <pvPortMalloc+0x18c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a18      	ldr	r2, [pc, #96]	@ (8001fd0 <pvPortMalloc+0x194>)
 8001f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <pvPortMalloc+0x188>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <pvPortMalloc+0x198>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <pvPortMalloc+0x198>)
 8001f8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001f90:	f7ff fb76 	bl	8001680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <pvPortMalloc+0x17a>
	__asm volatile
 8001f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	60fb      	str	r3, [r7, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	e7fd      	b.n	8001fb2 <pvPortMalloc+0x176>
	return pvReturn;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	@ 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20001148 	.word	0x20001148
 8001fc4:	2000115c 	.word	0x2000115c
 8001fc8:	2000114c 	.word	0x2000114c
 8001fcc:	20001140 	.word	0x20001140
 8001fd0:	20001150 	.word	0x20001150
 8001fd4:	20001154 	.word	0x20001154

08001fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d04f      	beq.n	800208a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001fea:	2308      	movs	r3, #8
 8001fec:	425b      	negs	r3, r3
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <vPortFree+0xbc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10b      	bne.n	800201e <vPortFree+0x46>
	__asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	60fb      	str	r3, [r7, #12]
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	e7fd      	b.n	800201a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <vPortFree+0x66>
	__asm volatile
 8002026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	60bb      	str	r3, [r7, #8]
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	e7fd      	b.n	800203a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <vPortFree+0xbc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01e      	beq.n	800208a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11a      	bne.n	800208a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <vPortFree+0xbc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002064:	f7ff fafe 	bl	8001664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <vPortFree+0xc0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4413      	add	r3, r2
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <vPortFree+0xc0>)
 8002074:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002076:	6938      	ldr	r0, [r7, #16]
 8002078:	f000 f874 	bl	8002164 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <vPortFree+0xc4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a06      	ldr	r2, [pc, #24]	@ (800209c <vPortFree+0xc4>)
 8002084:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002086:	f7ff fafb 	bl	8001680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000115c 	.word	0x2000115c
 8002098:	2000114c 	.word	0x2000114c
 800209c:	20001158 	.word	0x20001158

080020a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <prvHeapInit+0xac>)
 80020ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3307      	adds	r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0307 	bic.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <prvHeapInit+0xac>)
 80020d0:	4413      	add	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <prvHeapInit+0xb0>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <prvHeapInit+0xb0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80020ec:	2208      	movs	r2, #8
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0307 	bic.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <prvHeapInit+0xb4>)
 8002100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <prvHeapInit+0xb4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <prvHeapInit+0xb4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <prvHeapInit+0xb4>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <prvHeapInit+0xb8>)
 800212e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a09      	ldr	r2, [pc, #36]	@ (800215c <prvHeapInit+0xbc>)
 8002136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <prvHeapInit+0xc0>)
 800213a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000540 	.word	0x20000540
 8002150:	20001140 	.word	0x20001140
 8002154:	20001148 	.word	0x20001148
 8002158:	20001150 	.word	0x20001150
 800215c:	2000114c 	.word	0x2000114c
 8002160:	2000115c 	.word	0x2000115c

08002164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800216c:	4b27      	ldr	r3, [pc, #156]	@ (800220c <prvInsertBlockIntoFreeList+0xa8>)
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e002      	b.n	8002178 <prvInsertBlockIntoFreeList+0x14>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d8f7      	bhi.n	8002172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d108      	bne.n	80021a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	441a      	add	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	441a      	add	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d118      	bne.n	80021ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <prvInsertBlockIntoFreeList+0xac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d00d      	beq.n	80021e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	441a      	add	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e008      	b.n	80021f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <prvInsertBlockIntoFreeList+0xac>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e003      	b.n	80021f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d002      	beq.n	8002202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20001140 	.word	0x20001140
 8002210:	20001148 	.word	0x20001148

08002214 <memset>:
 8002214:	4603      	mov	r3, r0
 8002216:	4402      	add	r2, r0
 8002218:	4293      	cmp	r3, r2
 800221a:	d100      	bne.n	800221e <memset+0xa>
 800221c:	4770      	bx	lr
 800221e:	f803 1b01 	strb.w	r1, [r3], #1
 8002222:	e7f9      	b.n	8002218 <memset+0x4>

08002224 <__libc_init_array>:
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	2600      	movs	r6, #0
 8002228:	4d0c      	ldr	r5, [pc, #48]	@ (800225c <__libc_init_array+0x38>)
 800222a:	4c0d      	ldr	r4, [pc, #52]	@ (8002260 <__libc_init_array+0x3c>)
 800222c:	1b64      	subs	r4, r4, r5
 800222e:	10a4      	asrs	r4, r4, #2
 8002230:	42a6      	cmp	r6, r4
 8002232:	d109      	bne.n	8002248 <__libc_init_array+0x24>
 8002234:	f000 f81a 	bl	800226c <_init>
 8002238:	2600      	movs	r6, #0
 800223a:	4d0a      	ldr	r5, [pc, #40]	@ (8002264 <__libc_init_array+0x40>)
 800223c:	4c0a      	ldr	r4, [pc, #40]	@ (8002268 <__libc_init_array+0x44>)
 800223e:	1b64      	subs	r4, r4, r5
 8002240:	10a4      	asrs	r4, r4, #2
 8002242:	42a6      	cmp	r6, r4
 8002244:	d105      	bne.n	8002252 <__libc_init_array+0x2e>
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	f855 3b04 	ldr.w	r3, [r5], #4
 800224c:	4798      	blx	r3
 800224e:	3601      	adds	r6, #1
 8002250:	e7ee      	b.n	8002230 <__libc_init_array+0xc>
 8002252:	f855 3b04 	ldr.w	r3, [r5], #4
 8002256:	4798      	blx	r3
 8002258:	3601      	adds	r6, #1
 800225a:	e7f2      	b.n	8002242 <__libc_init_array+0x1e>
 800225c:	080022b4 	.word	0x080022b4
 8002260:	080022b4 	.word	0x080022b4
 8002264:	080022b4 	.word	0x080022b4
 8002268:	080022b8 	.word	0x080022b8

0800226c <_init>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	bf00      	nop
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr

08002278 <_fini>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	bf00      	nop
 800227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227e:	bc08      	pop	{r3}
 8002280:	469e      	mov	lr, r3
 8002282:	4770      	bx	lr
