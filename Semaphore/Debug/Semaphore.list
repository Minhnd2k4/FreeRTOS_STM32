
Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004094  08004094  00005094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d8  080040d8  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080040d8  080040d8  00006020  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080040d8  080040d8  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080040e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001970  20000020  08004100  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  08004100  00006990  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c990  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026de  00000000  00000000  000129d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000150b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000957  00000000  00000000  00015d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000265b  00000000  00000000  00016687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ded6  00000000  00000000  00018ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089064  00000000  00000000  00026bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afc1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003178  00000000  00000000  000afc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b2dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	0800407c 	.word	0x0800407c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	0800407c 	.word	0x0800407c

08000150 <main>:
void TaskC(void *argument);

SemaphoreHandle_t MutexPtr = NULL;

int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8

	HAL_Init();
 8000156:	f000 f9e9 	bl	800052c <HAL_Init>
	SystemClock_Config();
 800015a:	f000 f87e 	bl	800025a <SystemClock_Config>
	MX_GPIO_Init();
 800015e:	f000 f8b7 	bl	80002d0 <MX_GPIO_Init>

	MutexPtr = xSemaphoreCreateMutex();
 8000162:	2001      	movs	r0, #1
 8000164:	f001 fae3 	bl	800172e <xQueueCreateMutex>
 8000168:	4603      	mov	r3, r0
 800016a:	4a0a      	ldr	r2, [pc, #40]	@ (8000194 <main+0x44>)
 800016c:	6013      	str	r3, [r2, #0]
	assert_param(MutexPtr != NULL);

	if(xTaskCreate(TaskA, "TaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) != pdPASS)
 800016e:	2300      	movs	r3, #0
 8000170:	9301      	str	r3, [sp, #4]
 8000172:	2303      	movs	r3, #3
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	2300      	movs	r3, #0
 8000178:	2280      	movs	r2, #128	@ 0x80
 800017a:	4907      	ldr	r1, [pc, #28]	@ (8000198 <main+0x48>)
 800017c:	4807      	ldr	r0, [pc, #28]	@ (800019c <main+0x4c>)
 800017e:	f002 f865 	bl	800224c <xTaskCreate>
 8000182:	4603      	mov	r3, r0
 8000184:	2b01      	cmp	r3, #1
 8000186:	d001      	beq.n	800018c <main+0x3c>
	{
		// Printf via SEGGER or UART to notice TaskCreate failed
		// SEGGER_SYSVIEW_Printf("");
		while(1)
 8000188:	bf00      	nop
 800018a:	e7fd      	b.n	8000188 <main+0x38>
	}

	assert_param(xTaskCreate(TaskB, "TaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
	assert_param(xTaskCreate(TaskC, "TaskC", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);

	vTaskStartScheduler();
 800018c:	f002 f9da 	bl	8002544 <vTaskStartScheduler>
	while(1)
 8000190:	bf00      	nop
 8000192:	e7fd      	b.n	8000190 <main+0x40>
 8000194:	2000003c 	.word	0x2000003c
 8000198:	08004094 	.word	0x08004094
 800019c:	080001a1 	.word	0x080001a1

080001a0 <TaskA>:

	}
}

void TaskA(void *argument)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// SEGGER_SYSVIEW_Printf("attempt to take Semaphore");
		if(xSemaphoreTake(MutexPtr, 200 / portTICK_PERIOD_MS) == pdPASS)
 80001a8:	4b11      	ldr	r3, [pc, #68]	@ (80001f0 <TaskA+0x50>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	21c8      	movs	r1, #200	@ 0xc8
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fd58 	bl	8001c64 <xQueueSemaphoreTake>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d10d      	bne.n	80001d6 <TaskA+0x36>
		{
			RedLED.Off();
 80001ba:	4b0e      	ldr	r3, [pc, #56]	@ (80001f4 <TaskA+0x54>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4798      	blx	r3
			// SEGGER_SYSVIEW_Printf("take sem success");
			BlinkTwice(&GreenLED);
 80001c0:	480d      	ldr	r0, [pc, #52]	@ (80001f8 <TaskA+0x58>)
 80001c2:	f000 f81b 	bl	80001fc <BlinkTwice>
			xSemaphoreGive(MutexPtr);
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <TaskA+0x50>)
 80001c8:	6818      	ldr	r0, [r3, #0]
 80001ca:	2300      	movs	r3, #0
 80001cc:	2200      	movs	r2, #0
 80001ce:	2100      	movs	r1, #0
 80001d0:	f001 fac6 	bl	8001760 <xQueueGenericSend>
 80001d4:	e002      	b.n	80001dc <TaskA+0x3c>
		}
		else
		{
			RedLED.On();
 80001d6:	4b07      	ldr	r3, [pc, #28]	@ (80001f4 <TaskA+0x54>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4798      	blx	r3
			// SEGGER_SYSVIEW_Printf("take sem failed in time");

		}
		vTaskDelay(stmrand(5, 20));
 80001dc:	2114      	movs	r1, #20
 80001de:	2005      	movs	r0, #5
 80001e0:	f000 f82a 	bl	8000238 <stmrand>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 f976 	bl	80024d8 <vTaskDelay>
		if(xSemaphoreTake(MutexPtr, 200 / portTICK_PERIOD_MS) == pdPASS)
 80001ec:	e7dc      	b.n	80001a8 <TaskA+0x8>
 80001ee:	bf00      	nop
 80001f0:	2000003c 	.word	0x2000003c
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	20000004 	.word	0x20000004

080001fc <BlinkTwice>:
				vTaskDelay(stmrand(5, 20));
	}
}

static void BlinkTwice(LED_t *led)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]
 8000208:	e00e      	b.n	8000228 <BlinkTwice+0x2c>
	{
		led->On();
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4798      	blx	r3
		vTaskDelay(43 / portTICK_PERIOD_MS);
 8000210:	202b      	movs	r0, #43	@ 0x2b
 8000212:	f002 f961 	bl	80024d8 <vTaskDelay>
		led->Off();
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4798      	blx	r3
		vTaskDelay(43 / portTICK_PERIOD_MS);
 800021c:	202b      	movs	r0, #43	@ 0x2b
 800021e:	f002 f95b 	bl	80024d8 <vTaskDelay>
	for(uint8_t i = 0; i < 2; i++)
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	3301      	adds	r3, #1
 8000226:	73fb      	strb	r3, [r7, #15]
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d9ed      	bls.n	800020a <BlinkTwice+0xe>
	}
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <stmrand>:
		uint8_t NotCare = i % 4;
	}
}

uint8_t stmrand(int min, int max)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	// This is function to get random value from min to max
	// This is function prototype and this function failed but no have idea
	return (min + max)/2;
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	4413      	add	r3, r2
 8000248:	0fda      	lsrs	r2, r3, #31
 800024a:	4413      	add	r3, r2
 800024c:	105b      	asrs	r3, r3, #1
 800024e:	b2db      	uxtb	r3, r3
}
 8000250:	4618      	mov	r0, r3
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr

0800025a <SystemClock_Config>:

static void SystemClock_Config(void)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b090      	sub	sp, #64	@ 0x40
 800025e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	2228      	movs	r2, #40	@ 0x28
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f003 fecd 	bl	8004008 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]

	RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState       		= RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue 	= RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState 			= RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	637b      	str	r3, [r7, #52]	@ 0x34
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fc2d 	bl	8000af0 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x46>
	{
		Error_Handler();
 800029c:	f000 f86c 	bl	8000378 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
								| RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fe9b 	bl	8000ff4 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 80002c4:	f000 f858 	bl	8000378 <Error_Handler>
	}
}
 80002c8:	bf00      	nop
 80002ca:	3740      	adds	r7, #64	@ 0x40
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b21      	ldr	r3, [pc, #132]	@ (800036c <MX_GPIO_Init+0x9c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a20      	ldr	r2, [pc, #128]	@ (800036c <MX_GPIO_Init+0x9c>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b1e      	ldr	r3, [pc, #120]	@ (800036c <MX_GPIO_Init+0x9c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b1b      	ldr	r3, [pc, #108]	@ (800036c <MX_GPIO_Init+0x9c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1a      	ldr	r2, [pc, #104]	@ (800036c <MX_GPIO_Init+0x9c>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <MX_GPIO_Init+0x9c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin 	= GPIO_PIN_13;
 8000314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000318:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	4619      	mov	r1, r3
 800032c:	4810      	ldr	r0, [pc, #64]	@ (8000370 <MX_GPIO_Init+0xa0>)
 800032e:	f000 fa43 	bl	80007b8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <MX_GPIO_Init+0xa0>)
 800033a:	f000 fbc1 	bl	8000ac0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin  	= GPIO_PIN_1 | GPIO_PIN_2;
 800033e:	2306      	movs	r3, #6
 8000340:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2302      	movs	r3, #2
 800034c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4807      	ldr	r0, [pc, #28]	@ (8000374 <MX_GPIO_Init+0xa4>)
 8000356:	f000 fa2f 	bl	80007b8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2106      	movs	r1, #6
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_GPIO_Init+0xa4>)
 8000360:	f000 fbae 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	3718      	adds	r7, #24
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40021000 	.word	0x40021000
 8000370:	40011000 	.word	0x40011000
 8000374:	40010800 	.word	0x40010800

08000378 <Error_Handler>:

void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
	__disable_irq();
	// printf to notice Error_Handler via UART or SEGGER_SYSVIEW
	while(1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <Error_Handler+0x8>

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <HAL_MspInit+0x68>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a17      	ldr	r2, [pc, #92]	@ (80003ec <HAL_MspInit+0x68>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <HAL_MspInit+0x68>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <HAL_MspInit+0x68>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <HAL_MspInit+0x68>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <HAL_MspInit+0x68>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	210f      	movs	r1, #15
 80003be:	f06f 0001 	mvn.w	r0, #1
 80003c2:	f000 f9d0 	bl	8000766 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <HAL_MspInit+0x6c>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <HAL_MspInit+0x6c>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <NMI_Handler+0x4>

080003fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <MemManage_Handler+0x4>

0800040c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <UsageFault_Handler+0x4>

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042c:	f000 f8c4 	bl	80005b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000430:	f002 fcd4 	bl	8002ddc <xTaskGetSchedulerState>
 8000434:	4603      	mov	r3, r0
 8000436:	2b01      	cmp	r3, #1
 8000438:	d001      	beq.n	800043e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800043a:	f003 fb75 	bl	8003b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}

08000442 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
	...

08000450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000450:	f7ff fff7 	bl	8000442 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480b      	ldr	r0, [pc, #44]	@ (8000484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000456:	490c      	ldr	r1, [pc, #48]	@ (8000488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <LoopFillZerobss+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a09      	ldr	r2, [pc, #36]	@ (8000490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800046c:	4c09      	ldr	r4, [pc, #36]	@ (8000494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047a:	f003 fdcd 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff fe67 	bl	8000150 <main>
  bx lr
 8000482:	4770      	bx	lr
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800048c:	080040e0 	.word	0x080040e0
  ldr r2, =_sbss
 8000490:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000494:	20001990 	.word	0x20001990

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>

0800049a <Set_Pin>:
 *  Created on: Sep 30, 2025
 *      Author: dangm
 */
#include "Gpio_Config.h"

void Set_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	460b      	mov	r3, r1
 80004a4:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80004a6:	887b      	ldrh	r3, [r7, #2]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f000 fb07 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <Reset_Pin>:

void Reset_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80004c6:	887b      	ldrh	r3, [r7, #2]
 80004c8:	2200      	movs	r2, #0
 80004ca:	4619      	mov	r1, r3
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 faf7 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <GreenLed_On>:
 *      Author: dangm
 */

#include "My_Gpio.h"

void GreenLed_On(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 80004e0:	2102      	movs	r1, #2
 80004e2:	4802      	ldr	r0, [pc, #8]	@ (80004ec <GreenLed_On+0x10>)
 80004e4:	f7ff ffd9 	bl	800049a <Set_Pin>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010800 	.word	0x40010800

080004f0 <GreenLed_Off>:

void GreenLed_Off(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 80004f4:	2102      	movs	r1, #2
 80004f6:	4802      	ldr	r0, [pc, #8]	@ (8000500 <GreenLed_Off+0x10>)
 80004f8:	f7ff ffdf 	bl	80004ba <Reset_Pin>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800

08000504 <RedLed_On>:

LED_t GreenLED = {GreenLed_On , GreenLed_Off};

void RedLed_On(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_RED, GPIO_LED_RED);
 8000508:	2104      	movs	r1, #4
 800050a:	4802      	ldr	r0, [pc, #8]	@ (8000514 <RedLed_On+0x10>)
 800050c:	f7ff ffc5 	bl	800049a <Set_Pin>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010800 	.word	0x40010800

08000518 <RedLed_Off>:

void RedLed_Off(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_RED, GPIO_LED_RED);
 800051c:	2104      	movs	r1, #4
 800051e:	4802      	ldr	r0, [pc, #8]	@ (8000528 <RedLed_Off+0x10>)
 8000520:	f7ff ffcb 	bl	80004ba <Reset_Pin>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010800 	.word	0x40010800

0800052c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <HAL_Init+0x28>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <HAL_Init+0x28>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f907 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	200f      	movs	r0, #15
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f7ff ff1c 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40022000 	.word	0x40022000

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f911 	bl	800079e <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f8e7 	bl	8000766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000018 	.word	0x20000018
 80005b4:	20000014 	.word	0x20000014

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <HAL_IncTick+0x1c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_IncTick+0x20>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a03      	ldr	r2, [pc, #12]	@ (80005d8 <HAL_IncTick+0x20>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000018 	.word	0x20000018
 80005d8:	20000040 	.word	0x20000040

080005dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <HAL_GetTick+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000040 	.word	0x20000040

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	@ (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	@ (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	@ 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	@ 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ff90 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff49 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff5e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff90 	bl	80006a8 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5f 	bl	8000654 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffb0 	bl	800070c <SysTick_Config>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b08b      	sub	sp, #44	@ 0x2c
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e169      	b.n	8000aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007cc:	2201      	movs	r2, #1
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4013      	ands	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	f040 8158 	bne.w	8000a9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a9a      	ldr	r2, [pc, #616]	@ (8000a58 <HAL_GPIO_Init+0x2a0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d05e      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 80007f4:	4a98      	ldr	r2, [pc, #608]	@ (8000a58 <HAL_GPIO_Init+0x2a0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d875      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 80007fa:	4a98      	ldr	r2, [pc, #608]	@ (8000a5c <HAL_GPIO_Init+0x2a4>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d058      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 8000800:	4a96      	ldr	r2, [pc, #600]	@ (8000a5c <HAL_GPIO_Init+0x2a4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d86f      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 8000806:	4a96      	ldr	r2, [pc, #600]	@ (8000a60 <HAL_GPIO_Init+0x2a8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d052      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 800080c:	4a94      	ldr	r2, [pc, #592]	@ (8000a60 <HAL_GPIO_Init+0x2a8>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d869      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 8000812:	4a94      	ldr	r2, [pc, #592]	@ (8000a64 <HAL_GPIO_Init+0x2ac>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d04c      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 8000818:	4a92      	ldr	r2, [pc, #584]	@ (8000a64 <HAL_GPIO_Init+0x2ac>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d863      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 800081e:	4a92      	ldr	r2, [pc, #584]	@ (8000a68 <HAL_GPIO_Init+0x2b0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d046      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
 8000824:	4a90      	ldr	r2, [pc, #576]	@ (8000a68 <HAL_GPIO_Init+0x2b0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d85d      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 800082a:	2b12      	cmp	r3, #18
 800082c:	d82a      	bhi.n	8000884 <HAL_GPIO_Init+0xcc>
 800082e:	2b12      	cmp	r3, #18
 8000830:	d859      	bhi.n	80008e6 <HAL_GPIO_Init+0x12e>
 8000832:	a201      	add	r2, pc, #4	@ (adr r2, 8000838 <HAL_GPIO_Init+0x80>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	080008b3 	.word	0x080008b3
 800083c:	0800088d 	.word	0x0800088d
 8000840:	0800089f 	.word	0x0800089f
 8000844:	080008e1 	.word	0x080008e1
 8000848:	080008e7 	.word	0x080008e7
 800084c:	080008e7 	.word	0x080008e7
 8000850:	080008e7 	.word	0x080008e7
 8000854:	080008e7 	.word	0x080008e7
 8000858:	080008e7 	.word	0x080008e7
 800085c:	080008e7 	.word	0x080008e7
 8000860:	080008e7 	.word	0x080008e7
 8000864:	080008e7 	.word	0x080008e7
 8000868:	080008e7 	.word	0x080008e7
 800086c:	080008e7 	.word	0x080008e7
 8000870:	080008e7 	.word	0x080008e7
 8000874:	080008e7 	.word	0x080008e7
 8000878:	080008e7 	.word	0x080008e7
 800087c:	08000895 	.word	0x08000895
 8000880:	080008a9 	.word	0x080008a9
 8000884:	4a79      	ldr	r2, [pc, #484]	@ (8000a6c <HAL_GPIO_Init+0x2b4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d013      	beq.n	80008b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800088a:	e02c      	b.n	80008e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	623b      	str	r3, [r7, #32]
          break;
 8000892:	e029      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	3304      	adds	r3, #4
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	e024      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	3308      	adds	r3, #8
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e01f      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	330c      	adds	r3, #12
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e01a      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ba:	2304      	movs	r3, #4
 80008bc:	623b      	str	r3, [r7, #32]
          break;
 80008be:	e013      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d105      	bne.n	80008d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c8:	2308      	movs	r3, #8
 80008ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	611a      	str	r2, [r3, #16]
          break;
 80008d2:	e009      	b.n	80008e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d4:	2308      	movs	r3, #8
 80008d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	615a      	str	r2, [r3, #20]
          break;
 80008de:	e003      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e000      	b.n	80008e8 <HAL_GPIO_Init+0x130>
          break;
 80008e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2bff      	cmp	r3, #255	@ 0xff
 80008ec:	d801      	bhi.n	80008f2 <HAL_GPIO_Init+0x13a>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	e001      	b.n	80008f6 <HAL_GPIO_Init+0x13e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3304      	adds	r3, #4
 80008f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	2bff      	cmp	r3, #255	@ 0xff
 80008fc:	d802      	bhi.n	8000904 <HAL_GPIO_Init+0x14c>
 80008fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	e002      	b.n	800090a <HAL_GPIO_Init+0x152>
 8000904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000906:	3b08      	subs	r3, #8
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	210f      	movs	r1, #15
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	401a      	ands	r2, r3
 800091c:	6a39      	ldr	r1, [r7, #32]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	431a      	orrs	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 80b1 	beq.w	8000a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000938:	4b4d      	ldr	r3, [pc, #308]	@ (8000a70 <HAL_GPIO_Init+0x2b8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a4c      	ldr	r2, [pc, #304]	@ (8000a70 <HAL_GPIO_Init+0x2b8>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b4a      	ldr	r3, [pc, #296]	@ (8000a70 <HAL_GPIO_Init+0x2b8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000950:	4a48      	ldr	r2, [pc, #288]	@ (8000a74 <HAL_GPIO_Init+0x2bc>)
 8000952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	3302      	adds	r3, #2
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	220f      	movs	r2, #15
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a40      	ldr	r2, [pc, #256]	@ (8000a78 <HAL_GPIO_Init+0x2c0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d013      	beq.n	80009a4 <HAL_GPIO_Init+0x1ec>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a7c <HAL_GPIO_Init+0x2c4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d00d      	beq.n	80009a0 <HAL_GPIO_Init+0x1e8>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a3e      	ldr	r2, [pc, #248]	@ (8000a80 <HAL_GPIO_Init+0x2c8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0x1e4>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a84 <HAL_GPIO_Init+0x2cc>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d101      	bne.n	8000998 <HAL_GPIO_Init+0x1e0>
 8000994:	2303      	movs	r3, #3
 8000996:	e006      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 8000998:	2304      	movs	r3, #4
 800099a:	e004      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 800099c:	2302      	movs	r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <HAL_GPIO_Init+0x1ee>
 80009a4:	2300      	movs	r3, #0
 80009a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009a8:	f002 0203 	and.w	r2, r2, #3
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	4093      	lsls	r3, r2
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009b6:	492f      	ldr	r1, [pc, #188]	@ (8000a74 <HAL_GPIO_Init+0x2bc>)
 80009b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	492c      	ldr	r1, [pc, #176]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	608b      	str	r3, [r1, #8]
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	4928      	ldr	r1, [pc, #160]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009f8:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	4922      	ldr	r1, [pc, #136]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	60cb      	str	r3, [r1, #12]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	491e      	ldr	r1, [pc, #120]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a20:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4918      	ldr	r1, [pc, #96]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	604b      	str	r3, [r1, #4]
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4914      	ldr	r1, [pc, #80]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d021      	beq.n	8000a8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	490e      	ldr	r1, [pc, #56]	@ (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
 8000a54:	e021      	b.n	8000a9a <HAL_GPIO_Init+0x2e2>
 8000a56:	bf00      	nop
 8000a58:	10320000 	.word	0x10320000
 8000a5c:	10310000 	.word	0x10310000
 8000a60:	10220000 	.word	0x10220000
 8000a64:	10210000 	.word	0x10210000
 8000a68:	10120000 	.word	0x10120000
 8000a6c:	10110000 	.word	0x10110000
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	40010c00 	.word	0x40010c00
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40011400 	.word	0x40011400
 8000a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <HAL_GPIO_Init+0x304>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	4909      	ldr	r1, [pc, #36]	@ (8000abc <HAL_GPIO_Init+0x304>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f47f ae8e 	bne.w	80007cc <HAL_GPIO_Init+0x14>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	372c      	adds	r7, #44	@ 0x2c
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40010400 	.word	0x40010400

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000adc:	e003      	b.n	8000ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	041a      	lsls	r2, r3, #16
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	611a      	str	r2, [r3, #16]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e272      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 8087 	beq.w	8000c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b10:	4b92      	ldr	r3, [pc, #584]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 030c 	and.w	r3, r3, #12
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d00c      	beq.n	8000b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 030c 	and.w	r3, r3, #12
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d112      	bne.n	8000b4e <HAL_RCC_OscConfig+0x5e>
 8000b28:	4b8c      	ldr	r3, [pc, #560]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b34:	d10b      	bne.n	8000b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b36:	4b89      	ldr	r3, [pc, #548]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d06c      	beq.n	8000c1c <HAL_RCC_OscConfig+0x12c>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d168      	bne.n	8000c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e24c      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b56:	d106      	bne.n	8000b66 <HAL_RCC_OscConfig+0x76>
 8000b58:	4b80      	ldr	r3, [pc, #512]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	e02e      	b.n	8000bc4 <HAL_RCC_OscConfig+0xd4>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10c      	bne.n	8000b88 <HAL_RCC_OscConfig+0x98>
 8000b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a7a      	ldr	r2, [pc, #488]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b78      	ldr	r3, [pc, #480]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a77      	ldr	r2, [pc, #476]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e01d      	b.n	8000bc4 <HAL_RCC_OscConfig+0xd4>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b90:	d10c      	bne.n	8000bac <HAL_RCC_OscConfig+0xbc>
 8000b92:	4b72      	ldr	r3, [pc, #456]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a71      	ldr	r2, [pc, #452]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e00b      	b.n	8000bc4 <HAL_RCC_OscConfig+0xd4>
 8000bac:	4b6b      	ldr	r3, [pc, #428]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b68      	ldr	r3, [pc, #416]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a67      	ldr	r2, [pc, #412]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d013      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fd06 	bl	80005dc <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fd02 	bl	80005dc <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	@ 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e200      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xe4>
 8000bf2:	e014      	b.n	8000c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fcf2 	bl	80005dc <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fcee 	bl	80005dc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	@ 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e1ec      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	4b53      	ldr	r3, [pc, #332]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0x10c>
 8000c1a:	e000      	b.n	8000c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d063      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c36:	4b49      	ldr	r3, [pc, #292]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d11c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x18c>
 8000c42:	4b46      	ldr	r3, [pc, #280]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d116      	bne.n	8000c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <HAL_RCC_OscConfig+0x176>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d001      	beq.n	8000c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e1c0      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c66:	4b3d      	ldr	r3, [pc, #244]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4939      	ldr	r1, [pc, #228]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7a:	e03a      	b.n	8000cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d020      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c84:	4b36      	ldr	r3, [pc, #216]	@ (8000d60 <HAL_RCC_OscConfig+0x270>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8a:	f7ff fca7 	bl	80005dc <HAL_GetTick>
 8000c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c92:	f7ff fca3 	bl	80005dc <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e1a1      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f0      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4927      	ldr	r1, [pc, #156]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e015      	b.n	8000cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc6:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <HAL_RCC_OscConfig+0x270>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc86 	bl	80005dc <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc82 	bl	80005dc <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e180      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d03a      	beq.n	8000d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d019      	beq.n	8000d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <HAL_RCC_OscConfig+0x274>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fc66 	bl	80005dc <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d14:	f7ff fc62 	bl	80005dc <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e160      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fa9c 	bl	8001270 <RCC_Delay>
 8000d38:	e01c      	b.n	8000d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_RCC_OscConfig+0x274>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d40:	f7ff fc4c 	bl	80005dc <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d46:	e00f      	b.n	8000d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc48 	bl	80005dc <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d908      	bls.n	8000d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e146      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	42420000 	.word	0x42420000
 8000d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d68:	4b92      	ldr	r3, [pc, #584]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1e9      	bne.n	8000d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80a6 	beq.w	8000ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d86:	4b8b      	ldr	r3, [pc, #556]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10d      	bne.n	8000dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b88      	ldr	r3, [pc, #544]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a87      	ldr	r2, [pc, #540]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b85      	ldr	r3, [pc, #532]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000daa:	2301      	movs	r3, #1
 8000dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	4b82      	ldr	r3, [pc, #520]	@ (8000fb8 <HAL_RCC_OscConfig+0x4c8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d118      	bne.n	8000dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dba:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb8 <HAL_RCC_OscConfig+0x4c8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8000fb8 <HAL_RCC_OscConfig+0x4c8>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fc09 	bl	80005dc <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dce:	f7ff fc05 	bl	80005dc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b64      	cmp	r3, #100	@ 0x64
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e103      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	4b75      	ldr	r3, [pc, #468]	@ (8000fb8 <HAL_RCC_OscConfig+0x4c8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x312>
 8000df4:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a6e      	ldr	r2, [pc, #440]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	e02d      	b.n	8000e5e <HAL_RCC_OscConfig+0x36e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x334>
 8000e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4a69      	ldr	r2, [pc, #420]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	f023 0301 	bic.w	r3, r3, #1
 8000e14:	6213      	str	r3, [r2, #32]
 8000e16:	4b67      	ldr	r3, [pc, #412]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a66      	ldr	r2, [pc, #408]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	f023 0304 	bic.w	r3, r3, #4
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	e01c      	b.n	8000e5e <HAL_RCC_OscConfig+0x36e>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d10c      	bne.n	8000e46 <HAL_RCC_OscConfig+0x356>
 8000e2c:	4b61      	ldr	r3, [pc, #388]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	4a60      	ldr	r2, [pc, #384]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6213      	str	r3, [r2, #32]
 8000e38:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6213      	str	r3, [r2, #32]
 8000e44:	e00b      	b.n	8000e5e <HAL_RCC_OscConfig+0x36e>
 8000e46:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6213      	str	r3, [r2, #32]
 8000e52:	4b58      	ldr	r3, [pc, #352]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a57      	ldr	r2, [pc, #348]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d015      	beq.n	8000e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fbb9 	bl	80005dc <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6c:	e00a      	b.n	8000e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fbb5 	bl	80005dc <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e0b1      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e84:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0ee      	beq.n	8000e6e <HAL_RCC_OscConfig+0x37e>
 8000e90:	e014      	b.n	8000ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fba3 	bl	80005dc <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e98:	e00a      	b.n	8000eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e9a:	f7ff fb9f 	bl	80005dc <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e09b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb0:	4b40      	ldr	r3, [pc, #256]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1ee      	bne.n	8000e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d105      	bne.n	8000ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8087 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d061      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d146      	bne.n	8000f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eec:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <HAL_RCC_OscConfig+0x4cc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fb73 	bl	80005dc <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000efa:	f7ff fb6f 	bl	80005dc <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e06d      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0c:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f0      	bne.n	8000efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f20:	d108      	bne.n	8000f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	4921      	ldr	r1, [pc, #132]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a19      	ldr	r1, [r3, #32]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f44:	430b      	orrs	r3, r1
 8000f46:	491b      	ldr	r1, [pc, #108]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <HAL_RCC_OscConfig+0x4cc>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fb43 	bl	80005dc <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff fb3f 	bl	80005dc <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e03d      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x46a>
 8000f78:	e035      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_RCC_OscConfig+0x4cc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb2c 	bl	80005dc <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f88:	f7ff fb28 	bl	80005dc <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e026      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x498>
 8000fa6:	e01e      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d107      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e019      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_RCC_OscConfig+0x500>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0d0      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001008:	4b6a      	ldr	r3, [pc, #424]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d910      	bls.n	8001038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001016:	4b67      	ldr	r3, [pc, #412]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 0207 	bic.w	r2, r3, #7
 800101e:	4965      	ldr	r1, [pc, #404]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	4b63      	ldr	r3, [pc, #396]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0b8      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001050:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a58      	ldr	r2, [pc, #352]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800105a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001068:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001074:	4b50      	ldr	r3, [pc, #320]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	494d      	ldr	r1, [pc, #308]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d040      	beq.n	8001114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d107      	bne.n	80010aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d115      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e07f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	4b41      	ldr	r3, [pc, #260]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e073      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e06b      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d2:	4b39      	ldr	r3, [pc, #228]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f023 0203 	bic.w	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4936      	ldr	r1, [pc, #216]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010e4:	f7ff fa7a 	bl	80005dc <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ec:	f7ff fa76 	bl	80005dc <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e053      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 020c 	and.w	r2, r3, #12
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	429a      	cmp	r2, r3
 8001112:	d1eb      	bne.n	80010ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d210      	bcs.n	8001144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 0207 	bic.w	r2, r3, #7
 800112a:	4922      	ldr	r1, [pc, #136]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e032      	b.n	80011aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4916      	ldr	r1, [pc, #88]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001182:	f000 f821 	bl	80011c8 <HAL_RCC_GetSysClockFreq>
 8001186:	4602      	mov	r2, r0
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	490a      	ldr	r1, [pc, #40]	@ (80011bc <HAL_RCC_ClockConfig+0x1c8>)
 8001194:	5ccb      	ldrb	r3, [r1, r3]
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <HAL_RCC_ClockConfig+0x1cc>)
 800119c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_RCC_ClockConfig+0x1d0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9d8 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	080040b4 	.word	0x080040b4
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000014 	.word	0x20000014

080011c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <HAL_RCC_GetSysClockFreq+0x94>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d002      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x30>
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_GetSysClockFreq+0x36>
 80011f6:	e027      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 80011fa:	613b      	str	r3, [r7, #16]
      break;
 80011fc:	e027      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	0c9b      	lsrs	r3, r3, #18
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d010      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_RCC_GetSysClockFreq+0x94>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	0c5b      	lsrs	r3, r3, #17
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 800122a:	fb03 f202 	mul.w	r2, r3, r2
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e004      	b.n	8001242 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <HAL_RCC_GetSysClockFreq+0xa4>)
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	613b      	str	r3, [r7, #16]
      break;
 8001246:	e002      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 800124a:	613b      	str	r3, [r7, #16]
      break;
 800124c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800124e:	693b      	ldr	r3, [r7, #16]
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	007a1200 	.word	0x007a1200
 8001264:	080040c4 	.word	0x080040c4
 8001268:	080040d4 	.word	0x080040d4
 800126c:	003d0900 	.word	0x003d0900

08001270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <RCC_Delay+0x34>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <RCC_Delay+0x38>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0a5b      	lsrs	r3, r3, #9
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800128c:	bf00      	nop
  }
  while (Delay --);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	60fa      	str	r2, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <RCC_Delay+0x1c>
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000000 	.word	0x20000000
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4a06      	ldr	r2, [pc, #24]	@ (80012d4 <vApplicationGetIdleTaskMemory+0x28>)
 80012bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	601a      	str	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000044 	.word	0x20000044
 80012d8:	200000a0 	.word	0x200000a0

080012dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <vApplicationGetTimerTaskMemory+0x2c>)
 80012ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4a06      	ldr	r2, [pc, #24]	@ (800130c <vApplicationGetTimerTaskMemory+0x30>)
 80012f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012fa:	601a      	str	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200002a0 	.word	0x200002a0
 800130c:	200002fc 	.word	0x200002fc

08001310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f103 0208 	add.w	r2, r3, #8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 0208 	add.w	r2, r3, #8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f103 0208 	add.w	r2, r3, #8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c2:	d103      	bne.n	80013cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e00c      	b.n	80013e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3308      	adds	r3, #8
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e002      	b.n	80013da <vListInsert+0x2e>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d2f6      	bcs.n	80013d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6892      	ldr	r2, [r2, #8]
 8001432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6852      	ldr	r2, [r2, #4]
 800143c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d103      	bne.n	8001450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1e5a      	subs	r2, r3, #1
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
	...

08001470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10b      	bne.n	800149c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001488:	f383 8811 	msr	BASEPRI, r3
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	f3bf 8f4f 	dsb	sy
 8001494:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800149c:	f002 fac6 	bl	8003a2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	441a      	add	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014cc:	3b01      	subs	r3, #1
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	441a      	add	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	22ff      	movs	r2, #255	@ 0xff
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	22ff      	movs	r2, #255	@ 0xff
 80014e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d114      	bne.n	800151c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01a      	beq.n	8001530 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3310      	adds	r3, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 faac 	bl	8002a5c <xTaskRemoveFromEventList>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d012      	beq.n	8001530 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <xQueueGenericReset+0xd0>)
 800150c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	f3bf 8f6f 	isb	sy
 800151a:	e009      	b.n	8001530 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3310      	adds	r3, #16
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fef5 	bl	8001310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3324      	adds	r3, #36	@ 0x24
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fef0 	bl	8001310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001530:	f002 faac 	bl	8003a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	@ 0x38
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10b      	bne.n	8001570 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10b      	bne.n	800158e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <xQueueGenericCreateStatic+0x56>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <xQueueGenericCreateStatic+0x5a>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <xQueueGenericCreateStatic+0x5c>
 800159e:	2300      	movs	r3, #0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10b      	bne.n	80015bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80015a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015a8:	f383 8811 	msr	BASEPRI, r3
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	623b      	str	r3, [r7, #32]
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <xQueueGenericCreateStatic+0x84>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <xQueueGenericCreateStatic+0x88>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <xQueueGenericCreateStatic+0x8a>
 80015cc:	2300      	movs	r3, #0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10b      	bne.n	80015ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80015d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	61fb      	str	r3, [r7, #28]
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	e7fd      	b.n	80015e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80015ea:	2350      	movs	r3, #80	@ 0x50
 80015ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b50      	cmp	r3, #80	@ 0x50
 80015f2:	d00b      	beq.n	800160c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80015f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	61bb      	str	r3, [r7, #24]
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800160c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001620:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f840 	bl	80016b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001636:	4618      	mov	r0, r3
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800163e:	b580      	push	{r7, lr}
 8001640:	b08a      	sub	sp, #40	@ 0x28
 8001642:	af02      	add	r7, sp, #8
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	4613      	mov	r3, r2
 800164a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10b      	bne.n	800166a <xQueueGenericCreate+0x2c>
	__asm volatile
 8001652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	f3bf 8f6f 	isb	sy
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	613b      	str	r3, [r7, #16]
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	e7fd      	b.n	8001666 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	3350      	adds	r3, #80	@ 0x50
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fad9 	bl	8003c30 <pvPortMalloc>
 800167e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d011      	beq.n	80016aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3350      	adds	r3, #80	@ 0x50
 800168e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f805 	bl	80016b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80016aa:	69bb      	ldr	r3, [r7, #24]
	}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e002      	b.n	80016d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016e2:	2101      	movs	r1, #1
 80016e4:	69b8      	ldr	r0, [r7, #24]
 80016e6:	f7ff fec3 	bl	8001470 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800171a:	2300      	movs	r3, #0
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f81d 	bl	8001760 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	461a      	mov	r2, r3
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff79 	bl	800163e <xQueueGenericCreate>
 800174c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff ffd3 	bl	80016fa <prvInitialiseMutex>

		return xNewQueue;
 8001754:	68fb      	ldr	r3, [r7, #12]
	}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08e      	sub	sp, #56	@ 0x38
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10b      	bne.n	8001794 <xQueueGenericSend+0x34>
	__asm volatile
 800177c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <xQueueGenericSend+0x42>
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <xQueueGenericSend+0x46>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <xQueueGenericSend+0x48>
 80017a6:	2300      	movs	r3, #0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10b      	bne.n	80017c4 <xQueueGenericSend+0x64>
	__asm volatile
 80017ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d103      	bne.n	80017d2 <xQueueGenericSend+0x72>
 80017ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <xQueueGenericSend+0x76>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <xQueueGenericSend+0x78>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10b      	bne.n	80017f4 <xQueueGenericSend+0x94>
	__asm volatile
 80017dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017e0:	f383 8811 	msr	BASEPRI, r3
 80017e4:	f3bf 8f6f 	isb	sy
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	623b      	str	r3, [r7, #32]
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017f4:	f001 faf2 	bl	8002ddc <xTaskGetSchedulerState>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <xQueueGenericSend+0xa4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <xQueueGenericSend+0xa8>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <xQueueGenericSend+0xaa>
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10b      	bne.n	8001826 <xQueueGenericSend+0xc6>
	__asm volatile
 800180e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	61fb      	str	r3, [r7, #28]
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001826:	f002 f901 	bl	8003a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800182a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800182e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001832:	429a      	cmp	r2, r3
 8001834:	d302      	bcc.n	800183c <xQueueGenericSend+0xdc>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d129      	bne.n	8001890 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001842:	f000 fb36 	bl	8001eb2 <prvCopyDataToQueue>
 8001846:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	2b00      	cmp	r3, #0
 800184e:	d010      	beq.n	8001872 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001852:	3324      	adds	r3, #36	@ 0x24
 8001854:	4618      	mov	r0, r3
 8001856:	f001 f901 	bl	8002a5c <xTaskRemoveFromEventList>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001860:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <xQueueGenericSend+0x200>)
 8001862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	f3bf 8f6f 	isb	sy
 8001870:	e00a      	b.n	8001888 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001878:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <xQueueGenericSend+0x200>)
 800187a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001888:	f002 f900 	bl	8003a8c <vPortExitCritical>
				return pdPASS;
 800188c:	2301      	movs	r3, #1
 800188e:	e063      	b.n	8001958 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001896:	f002 f8f9 	bl	8003a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800189a:	2300      	movs	r3, #0
 800189c:	e05c      	b.n	8001958 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800189e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 f93b 	bl	8002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80018b2:	f002 f8eb 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80018b6:	f000 fead 	bl	8002614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80018ba:	f002 f8b7 	bl	8003a2c <vPortEnterCritical>
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ca:	d103      	bne.n	80018d4 <xQueueGenericSend+0x174>
 80018cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d103      	bne.n	80018ea <xQueueGenericSend+0x18a>
 80018e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018ea:	f002 f8cf 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018ee:	1d3a      	adds	r2, r7, #4
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 f92a 	bl	8002b50 <xTaskCheckForTimeOut>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d124      	bne.n	800194c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001904:	f000 fbcd 	bl	80020a2 <prvIsQueueFull>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d018      	beq.n	8001940 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800190e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001910:	3310      	adds	r3, #16
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f001 f84e 	bl	80029b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800191c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800191e:	f000 fb58 	bl	8001fd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001922:	f000 fe85 	bl	8002630 <xTaskResumeAll>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f af7c 	bne.w	8001826 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <xQueueGenericSend+0x200>)
 8001930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	f3bf 8f6f 	isb	sy
 800193e:	e772      	b.n	8001826 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001942:	f000 fb46 	bl	8001fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001946:	f000 fe73 	bl	8002630 <xTaskResumeAll>
 800194a:	e76c      	b.n	8001826 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800194c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800194e:	f000 fb40 	bl	8001fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001952:	f000 fe6d 	bl	8002630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001958:	4618      	mov	r0, r3
 800195a:	3738      	adds	r7, #56	@ 0x38
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	e000ed04 	.word	0xe000ed04

08001964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b090      	sub	sp, #64	@ 0x40
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10b      	bne.n	8001994 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800197c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001980:	f383 8811 	msr	BASEPRI, r3
 8001984:	f3bf 8f6f 	isb	sy
 8001988:	f3bf 8f4f 	dsb	sy
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <xQueueGenericSendFromISR+0x3e>
 800199a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <xQueueGenericSendFromISR+0x42>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <xQueueGenericSendFromISR+0x44>
 80019a6:	2300      	movs	r3, #0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80019ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019b0:	f383 8811 	msr	BASEPRI, r3
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d103      	bne.n	80019d2 <xQueueGenericSendFromISR+0x6e>
 80019ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <xQueueGenericSendFromISR+0x72>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <xQueueGenericSendFromISR+0x74>
 80019d6:	2300      	movs	r3, #0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10b      	bne.n	80019f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80019dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	623b      	str	r3, [r7, #32]
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80019f4:	f002 f8dc 	bl	8003bb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80019f8:	f3ef 8211 	mrs	r2, BASEPRI
 80019fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	61fa      	str	r2, [r7, #28]
 8001a0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d302      	bcc.n	8001a26 <xQueueGenericSendFromISR+0xc2>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d12f      	bne.n	8001a86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a3c:	f000 fa39 	bl	8001eb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001a40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d112      	bne.n	8001a70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a54:	3324      	adds	r3, #36	@ 0x24
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 f800 	bl	8002a5c <xTaskRemoveFromEventList>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00e      	beq.n	8001a80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001a70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001a80:	2301      	movs	r3, #1
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001a84:	e001      	b.n	8001a8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3740      	adds	r7, #64	@ 0x40
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <xQueueReceive+0x32>
	__asm volatile
 8001aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	623b      	str	r3, [r7, #32]
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <xQueueReceive+0x40>
 8001ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <xQueueReceive+0x44>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <xQueueReceive+0x46>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10b      	bne.n	8001b02 <xQueueReceive+0x62>
	__asm volatile
 8001aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aee:	f383 8811 	msr	BASEPRI, r3
 8001af2:	f3bf 8f6f 	isb	sy
 8001af6:	f3bf 8f4f 	dsb	sy
 8001afa:	61fb      	str	r3, [r7, #28]
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	e7fd      	b.n	8001afe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b02:	f001 f96b 	bl	8002ddc <xTaskGetSchedulerState>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <xQueueReceive+0x72>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <xQueueReceive+0x76>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <xQueueReceive+0x78>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10b      	bne.n	8001b34 <xQueueReceive+0x94>
	__asm volatile
 8001b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b20:	f383 8811 	msr	BASEPRI, r3
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	61bb      	str	r3, [r7, #24]
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001b34:	f001 ff7a 	bl	8003a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01f      	beq.n	8001b84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b48:	f000 fa1d 	bl	8001f86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00f      	beq.n	8001b7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5e:	3310      	adds	r3, #16
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 ff7b 	bl	8002a5c <xTaskRemoveFromEventList>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c60 <xQueueReceive+0x1c0>)
 8001b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001b7c:	f001 ff86 	bl	8003a8c <vPortExitCritical>
				return pdPASS;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e069      	b.n	8001c58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b8a:	f001 ff7f 	bl	8003a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e062      	b.n	8001c58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 ffc1 	bl	8002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ba6:	f001 ff71 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001baa:	f000 fd33 	bl	8002614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bae:	f001 ff3d 	bl	8003a2c <vPortEnterCritical>
 8001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d103      	bne.n	8001bc8 <xQueueReceive+0x128>
 8001bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d103      	bne.n	8001bde <xQueueReceive+0x13e>
 8001bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001bde:	f001 ff55 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001be2:	1d3a      	adds	r2, r7, #4
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 ffb0 	bl	8002b50 <xTaskCheckForTimeOut>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d123      	bne.n	8001c3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bf8:	f000 fa3d 	bl	8002076 <prvIsQueueEmpty>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d017      	beq.n	8001c32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	3324      	adds	r3, #36	@ 0x24
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fed4 	bl	80029b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c12:	f000 f9de 	bl	8001fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c16:	f000 fd0b 	bl	8002630 <xTaskResumeAll>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d189      	bne.n	8001b34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <xQueueReceive+0x1c0>)
 8001c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	e780      	b.n	8001b34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c34:	f000 f9cd 	bl	8001fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c38:	f000 fcfa 	bl	8002630 <xTaskResumeAll>
 8001c3c:	e77a      	b.n	8001b34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c40:	f000 f9c7 	bl	8001fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c44:	f000 fcf4 	bl	8002630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c4a:	f000 fa14 	bl	8002076 <prvIsQueueEmpty>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f43f af6f 	beq.w	8001b34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001c56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	@ 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	e000ed04 	.word	0xe000ed04

08001c64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	@ 0x38
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10b      	bne.n	8001c98 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8001c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	623b      	str	r3, [r7, #32]
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8001ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca4:	f383 8811 	msr	BASEPRI, r3
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	61fb      	str	r3, [r7, #28]
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cb8:	f001 f890 	bl	8002ddc <xTaskGetSchedulerState>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <xQueueSemaphoreTake+0x64>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <xQueueSemaphoreTake+0x68>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <xQueueSemaphoreTake+0x6a>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <xQueueSemaphoreTake+0x86>
	__asm volatile
 8001cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	61bb      	str	r3, [r7, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	e7fd      	b.n	8001ce6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cea:	f001 fe9f 	bl	8003a2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d024      	beq.n	8001d44 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001d0a:	f001 f9e1 	bl	80030d0 <pvTaskIncrementMutexHeldCount>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00f      	beq.n	8001d3c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1e:	3310      	adds	r3, #16
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fe9b 	bl	8002a5c <xTaskRemoveFromEventList>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001d2c:	4b54      	ldr	r3, [pc, #336]	@ (8001e80 <xQueueSemaphoreTake+0x21c>)
 8001d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001d3c:	f001 fea6 	bl	8003a8c <vPortExitCritical>
				return pdPASS;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e098      	b.n	8001e76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d112      	bne.n	8001d70 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	617b      	str	r3, [r7, #20]
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001d68:	f001 fe90 	bl	8003a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e082      	b.n	8001e76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fed2 	bl	8002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d84:	f001 fe82 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d88:	f000 fc44 	bl	8002614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d8c:	f001 fe4e 	bl	8003a2c <vPortEnterCritical>
 8001d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d103      	bne.n	8001da6 <xQueueSemaphoreTake+0x142>
 8001d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d103      	bne.n	8001dbc <xQueueSemaphoreTake+0x158>
 8001db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001dbc:	f001 fe66 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dc0:	463a      	mov	r2, r7
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fec1 	bl	8002b50 <xTaskCheckForTimeOut>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d132      	bne.n	8001e3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001dd6:	f000 f94e 	bl	8002076 <prvIsQueueEmpty>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8001de8:	f001 fe20 	bl	8003a2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 f811 	bl	8002e18 <xTaskPriorityInherit>
 8001df6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8001df8:	f001 fe48 	bl	8003a8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	3324      	adds	r3, #36	@ 0x24
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fdd7 	bl	80029b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e0c:	f000 f8e1 	bl	8001fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e10:	f000 fc0e 	bl	8002630 <xTaskResumeAll>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f af67 	bne.w	8001cea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8001e1c:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <xQueueSemaphoreTake+0x21c>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	e75d      	b.n	8001cea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001e2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e30:	f000 f8cf 	bl	8001fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e34:	f000 fbfc 	bl	8002630 <xTaskResumeAll>
 8001e38:	e757      	b.n	8001cea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001e3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e3c:	f000 f8c9 	bl	8001fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e40:	f000 fbf6 	bl	8002630 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e46:	f000 f916 	bl	8002076 <prvIsQueueEmpty>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f43f af4c 	beq.w	8001cea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00d      	beq.n	8001e74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8001e58:	f001 fde8 	bl	8003a2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001e5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e5e:	f000 f811 	bl	8001e84 <prvGetDisinheritPriorityAfterTimeout>
 8001e62:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f8ac 	bl	8002fc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001e70:	f001 fe0c 	bl	8003a8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001e74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3738      	adds	r7, #56	@ 0x38
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000ed04 	.word	0xe000ed04

08001e84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e001      	b.n	8001ea6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d14d      	bne.n	8001f74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 f803 	bl	8002ee8 <xTaskPriorityDisinherit>
 8001ee2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	e043      	b.n	8001f74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d119      	bne.n	8001f26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6858      	ldr	r0, [r3, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	461a      	mov	r2, r3
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	f002 f8af 	bl	8004060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	441a      	add	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d32b      	bcc.n	8001f74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	e026      	b.n	8001f74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68d8      	ldr	r0, [r3, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	f002 f895 	bl	8004060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	425b      	negs	r3, r3
 8001f40:	441a      	add	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d207      	bcs.n	8001f62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	441a      	add	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d105      	bne.n	8001f74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001f7c:	697b      	ldr	r3, [r7, #20]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d018      	beq.n	8001fca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d303      	bcc.n	8001fba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6838      	ldr	r0, [r7, #0]
 8001fc6:	f002 f84b 	bl	8004060 <memcpy>
	}
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001fda:	f001 fd27 	bl	8003a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fe6:	e011      	b.n	800200c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3324      	adds	r3, #36	@ 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fd31 	bl	8002a5c <xTaskRemoveFromEventList>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002000:	f000 fe0a 	bl	8002c18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	3b01      	subs	r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dce9      	bgt.n	8001fe8 <prvUnlockQueue+0x16>
 8002014:	e000      	b.n	8002018 <prvUnlockQueue+0x46>
					break;
 8002016:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	22ff      	movs	r2, #255	@ 0xff
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002020:	f001 fd34 	bl	8003a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002024:	f001 fd02 	bl	8003a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800202e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002030:	e011      	b.n	8002056 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3310      	adds	r3, #16
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd0c 	bl	8002a5c <xTaskRemoveFromEventList>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800204a:	f000 fde5 	bl	8002c18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800204e:	7bbb      	ldrb	r3, [r7, #14]
 8002050:	3b01      	subs	r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dce9      	bgt.n	8002032 <prvUnlockQueue+0x60>
 800205e:	e000      	b.n	8002062 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002060:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	22ff      	movs	r2, #255	@ 0xff
 8002066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800206a:	f001 fd0f 	bl	8003a8c <vPortExitCritical>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800207e:	f001 fcd5 	bl	8003a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800208a:	2301      	movs	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e001      	b.n	8002094 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002094:	f001 fcfa 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 8002098:	68fb      	ldr	r3, [r7, #12]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020aa:	f001 fcbf 	bl	8003a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d102      	bne.n	80020c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e001      	b.n	80020c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020c4:	f001 fce2 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e014      	b.n	800210e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80020e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002120 <vQueueAddToRegistry+0x4c>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80020f0:	490b      	ldr	r1, [pc, #44]	@ (8002120 <vQueueAddToRegistry+0x4c>)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80020fa:	4a09      	ldr	r2, [pc, #36]	@ (8002120 <vQueueAddToRegistry+0x4c>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002106:	e006      	b.n	8002116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b07      	cmp	r3, #7
 8002112:	d9e7      	bls.n	80020e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	200006fc 	.word	0x200006fc

08002124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002134:	f001 fc7a 	bl	8003a2c <vPortEnterCritical>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800213e:	b25b      	sxtb	r3, r3
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d103      	bne.n	800214e <vQueueWaitForMessageRestricted+0x2a>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002154:	b25b      	sxtb	r3, r3
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d103      	bne.n	8002164 <vQueueWaitForMessageRestricted+0x40>
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002164:	f001 fc92 	bl	8003a8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216c:	2b00      	cmp	r3, #0
 800216e:	d106      	bne.n	800217e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3324      	adds	r3, #36	@ 0x24
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fc43 	bl	8002a04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff27 	bl	8001fd2 <prvUnlockQueue>
	}
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	@ 0x38
 8002190:	af04      	add	r7, sp, #16
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	623b      	str	r3, [r7, #32]
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	61fb      	str	r3, [r7, #28]
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	e7fd      	b.n	80021d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021d6:	235c      	movs	r3, #92	@ 0x5c
 80021d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80021de:	d00b      	beq.n	80021f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80021e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	61bb      	str	r3, [r7, #24]
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80021f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80021fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01e      	beq.n	800223e <xTaskCreateStatic+0xb2>
 8002200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01b      	beq.n	800223e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002218:	2300      	movs	r3, #0
 800221a:	9303      	str	r3, [sp, #12]
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	9302      	str	r3, [sp, #8]
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f850 	bl	80022d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002236:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002238:	f000 f8de 	bl	80023f8 <prvAddNewTaskToReadyList>
 800223c:	e001      	b.n	8002242 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002242:	697b      	ldr	r3, [r7, #20]
	}
 8002244:	4618      	mov	r0, r3
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	@ 0x30
 8002250:	af04      	add	r7, sp, #16
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fce5 	bl	8003c30 <pvPortMalloc>
 8002266:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800226e:	205c      	movs	r0, #92	@ 0x5c
 8002270:	f001 fcde 	bl	8003c30 <pvPortMalloc>
 8002274:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
 8002282:	e005      	b.n	8002290 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f001 fda1 	bl	8003dcc <vPortFree>
 800228a:	e001      	b.n	8002290 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d017      	beq.n	80022c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f80e 	bl	80022d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022ba:	69f8      	ldr	r0, [r7, #28]
 80022bc:	f000 f89c 	bl	80023f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	e002      	b.n	80022cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022cc:	69bb      	ldr	r3, [r7, #24]
	}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	21a5      	movs	r1, #165	@ 0xa5
 80022f0:	f001 fe8a 	bl	8004008 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022fe:	3b01      	subs	r3, #1
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f023 0307 	bic.w	r3, r3, #7
 800230c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00b      	beq.n	8002330 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	617b      	str	r3, [r7, #20]
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01f      	beq.n	8002376 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e012      	b.n	8002362 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	7819      	ldrb	r1, [r3, #0]
 8002344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	3334      	adds	r3, #52	@ 0x34
 800234c:	460a      	mov	r2, r1
 800234e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d9e9      	bls.n	800233c <prvInitialiseNewTask+0x66>
 8002368:	e000      	b.n	800236c <prvInitialiseNewTask+0x96>
			{
				break;
 800236a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800236c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002374:	e003      	b.n	800237e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	2b37      	cmp	r3, #55	@ 0x37
 8002382:	d901      	bls.n	8002388 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002384:	2337      	movs	r3, #55	@ 0x37
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002392:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	2200      	movs	r2, #0
 8002398:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	3304      	adds	r3, #4
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe ffd5 	bl	800134e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a6:	3318      	adds	r3, #24
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe ffd0 	bl	800134e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	2200      	movs	r2, #0
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	69b8      	ldr	r0, [r7, #24]
 80023d8:	f001 fa3a 	bl	8003850 <pxPortInitialiseStack>
 80023dc:	4602      	mov	r2, r0
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002400:	f001 fb14 	bl	8003a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002404:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <prvAddNewTaskToReadyList+0xc4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a2c      	ldr	r2, [pc, #176]	@ (80024bc <prvAddNewTaskToReadyList+0xc4>)
 800240c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800240e:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <prvAddNewTaskToReadyList+0xc8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002416:	4a2a      	ldr	r2, [pc, #168]	@ (80024c0 <prvAddNewTaskToReadyList+0xc8>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800241c:	4b27      	ldr	r3, [pc, #156]	@ (80024bc <prvAddNewTaskToReadyList+0xc4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d110      	bne.n	8002446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002424:	f000 fc1c 	bl	8002c60 <prvInitialiseTaskLists>
 8002428:	e00d      	b.n	8002446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800242a:	4b26      	ldr	r3, [pc, #152]	@ (80024c4 <prvAddNewTaskToReadyList+0xcc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002432:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <prvAddNewTaskToReadyList+0xc8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	429a      	cmp	r2, r3
 800243e:	d802      	bhi.n	8002446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002440:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <prvAddNewTaskToReadyList+0xc8>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <prvAddNewTaskToReadyList+0xd0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <prvAddNewTaskToReadyList+0xd0>)
 800244e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <prvAddNewTaskToReadyList+0xd0>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245c:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <prvAddNewTaskToReadyList+0xd4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d903      	bls.n	800246c <prvAddNewTaskToReadyList+0x74>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <prvAddNewTaskToReadyList+0xd4>)
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <prvAddNewTaskToReadyList+0xd8>)
 800247a:	441a      	add	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f7fe ff6f 	bl	8001366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002488:	f001 fb00 	bl	8003a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <prvAddNewTaskToReadyList+0xcc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002494:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <prvAddNewTaskToReadyList+0xc8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d207      	bcs.n	80024b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <prvAddNewTaskToReadyList+0xdc>)
 80024a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000c10 	.word	0x20000c10
 80024c0:	2000073c 	.word	0x2000073c
 80024c4:	20000c1c 	.word	0x20000c1c
 80024c8:	20000c2c 	.word	0x20000c2c
 80024cc:	20000c18 	.word	0x20000c18
 80024d0:	20000740 	.word	0x20000740
 80024d4:	e000ed04 	.word	0xe000ed04

080024d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <vTaskDelay+0x64>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <vTaskDelay+0x32>
	__asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	60bb      	str	r3, [r7, #8]
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	e7fd      	b.n	8002506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800250a:	f000 f883 	bl	8002614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800250e:	2100      	movs	r1, #0
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fdf1 	bl	80030f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002516:	f000 f88b 	bl	8002630 <xTaskResumeAll>
 800251a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002522:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <vTaskDelay+0x68>)
 8002524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000c38 	.word	0x20000c38
 8002540:	e000ed04 	.word	0xe000ed04

08002544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002552:	463a      	mov	r2, r7
 8002554:	1d39      	adds	r1, r7, #4
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fea6 	bl	80012ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	9202      	str	r2, [sp, #8]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	460a      	mov	r2, r1
 8002572:	4922      	ldr	r1, [pc, #136]	@ (80025fc <vTaskStartScheduler+0xb8>)
 8002574:	4822      	ldr	r0, [pc, #136]	@ (8002600 <vTaskStartScheduler+0xbc>)
 8002576:	f7ff fe09 	bl	800218c <xTaskCreateStatic>
 800257a:	4603      	mov	r3, r0
 800257c:	4a21      	ldr	r2, [pc, #132]	@ (8002604 <vTaskStartScheduler+0xc0>)
 800257e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002580:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <vTaskStartScheduler+0xc0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002588:	2301      	movs	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e001      	b.n	8002592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002598:	f000 fe02 	bl	80031a0 <xTimerCreateTimerTask>
 800259c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d116      	bne.n	80025d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	613b      	str	r3, [r7, #16]
}
 80025b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <vTaskStartScheduler+0xc4>)
 80025ba:	f04f 32ff 	mov.w	r2, #4294967295
 80025be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025c0:	4b12      	ldr	r3, [pc, #72]	@ (800260c <vTaskStartScheduler+0xc8>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <vTaskStartScheduler+0xcc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025cc:	f001 f9bc 	bl	8003948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025d0:	e00f      	b.n	80025f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d10b      	bne.n	80025f2 <vTaskStartScheduler+0xae>
	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	60fb      	str	r3, [r7, #12]
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	e7fd      	b.n	80025ee <vTaskStartScheduler+0xaa>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	0800409c 	.word	0x0800409c
 8002600:	08002c31 	.word	0x08002c31
 8002604:	20000c34 	.word	0x20000c34
 8002608:	20000c30 	.word	0x20000c30
 800260c:	20000c1c 	.word	0x20000c1c
 8002610:	20000c14 	.word	0x20000c14

08002614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <vTaskSuspendAll+0x18>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a03      	ldr	r2, [pc, #12]	@ (800262c <vTaskSuspendAll+0x18>)
 8002620:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000c38 	.word	0x20000c38

08002630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800263e:	4b42      	ldr	r3, [pc, #264]	@ (8002748 <xTaskResumeAll+0x118>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <xTaskResumeAll+0x2e>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	603b      	str	r3, [r7, #0]
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800265e:	f001 f9e5 	bl	8003a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <xTaskResumeAll+0x118>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	4a37      	ldr	r2, [pc, #220]	@ (8002748 <xTaskResumeAll+0x118>)
 800266a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800266c:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <xTaskResumeAll+0x118>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d162      	bne.n	800273a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002674:	4b35      	ldr	r3, [pc, #212]	@ (800274c <xTaskResumeAll+0x11c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05e      	beq.n	800273a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800267c:	e02f      	b.n	80026de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800267e:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <xTaskResumeAll+0x120>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3318      	adds	r3, #24
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fec6 	bl	800141c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3304      	adds	r3, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fec1 	bl	800141c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800269e:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <xTaskResumeAll+0x124>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d903      	bls.n	80026ae <xTaskResumeAll+0x7e>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <xTaskResumeAll+0x124>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4a27      	ldr	r2, [pc, #156]	@ (8002758 <xTaskResumeAll+0x128>)
 80026bc:	441a      	add	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe fe4e 	bl	8001366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ce:	4b23      	ldr	r3, [pc, #140]	@ (800275c <xTaskResumeAll+0x12c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d302      	bcc.n	80026de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80026d8:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <xTaskResumeAll+0x130>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026de:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <xTaskResumeAll+0x120>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1cb      	bne.n	800267e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026ec:	f000 fb56 	bl	8002d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002764 <xTaskResumeAll+0x134>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026fc:	f000 f844 	bl	8002788 <xTaskIncrementTick>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <xTaskResumeAll+0x130>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f1      	bne.n	80026fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <xTaskResumeAll+0x134>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <xTaskResumeAll+0x130>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002726:	2301      	movs	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <xTaskResumeAll+0x138>)
 800272c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800273a:	f001 f9a7 	bl	8003a8c <vPortExitCritical>

	return xAlreadyYielded;
 800273e:	68bb      	ldr	r3, [r7, #8]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000c38 	.word	0x20000c38
 800274c:	20000c10 	.word	0x20000c10
 8002750:	20000bd0 	.word	0x20000bd0
 8002754:	20000c18 	.word	0x20000c18
 8002758:	20000740 	.word	0x20000740
 800275c:	2000073c 	.word	0x2000073c
 8002760:	20000c24 	.word	0x20000c24
 8002764:	20000c20 	.word	0x20000c20
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002772:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <xTaskGetTickCount+0x18>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	20000c14 	.word	0x20000c14

08002788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002792:	4b4f      	ldr	r3, [pc, #316]	@ (80028d0 <xTaskIncrementTick+0x148>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 8090 	bne.w	80028bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800279c:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <xTaskIncrementTick+0x14c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027a4:	4a4b      	ldr	r2, [pc, #300]	@ (80028d4 <xTaskIncrementTick+0x14c>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d121      	bne.n	80027f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80027b0:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <xTaskIncrementTick+0x150>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	603b      	str	r3, [r7, #0]
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	e7fd      	b.n	80027ce <xTaskIncrementTick+0x46>
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <xTaskIncrementTick+0x150>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	4b40      	ldr	r3, [pc, #256]	@ (80028dc <xTaskIncrementTick+0x154>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3e      	ldr	r2, [pc, #248]	@ (80028d8 <xTaskIncrementTick+0x150>)
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4a3e      	ldr	r2, [pc, #248]	@ (80028dc <xTaskIncrementTick+0x154>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <xTaskIncrementTick+0x158>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	4a3c      	ldr	r2, [pc, #240]	@ (80028e0 <xTaskIncrementTick+0x158>)
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	f000 fad4 	bl	8002d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027f4:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <xTaskIncrementTick+0x15c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d349      	bcc.n	8002892 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <xTaskIncrementTick+0x150>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <xTaskIncrementTick+0x15c>)
 800280a:	f04f 32ff 	mov.w	r2, #4294967295
 800280e:	601a      	str	r2, [r3, #0]
					break;
 8002810:	e03f      	b.n	8002892 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002812:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <xTaskIncrementTick+0x150>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	d203      	bcs.n	8002832 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800282a:	4a2e      	ldr	r2, [pc, #184]	@ (80028e4 <xTaskIncrementTick+0x15c>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002830:	e02f      	b.n	8002892 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3304      	adds	r3, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fdf0 	bl	800141c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	3318      	adds	r3, #24
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fde7 	bl	800141c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002852:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <xTaskIncrementTick+0x160>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d903      	bls.n	8002862 <xTaskIncrementTick+0xda>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <xTaskIncrementTick+0x160>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <xTaskIncrementTick+0x164>)
 8002870:	441a      	add	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7fe fd74 	bl	8001366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <xTaskIncrementTick+0x168>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d3b8      	bcc.n	80027fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002890:	e7b5      	b.n	80027fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <xTaskIncrementTick+0x168>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002898:	4914      	ldr	r1, [pc, #80]	@ (80028ec <xTaskIncrementTick+0x164>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d901      	bls.n	80028ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <xTaskIncrementTick+0x16c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e004      	b.n	80028c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <xTaskIncrementTick+0x170>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <xTaskIncrementTick+0x170>)
 80028c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000c38 	.word	0x20000c38
 80028d4:	20000c14 	.word	0x20000c14
 80028d8:	20000bc8 	.word	0x20000bc8
 80028dc:	20000bcc 	.word	0x20000bcc
 80028e0:	20000c28 	.word	0x20000c28
 80028e4:	20000c30 	.word	0x20000c30
 80028e8:	20000c18 	.word	0x20000c18
 80028ec:	20000740 	.word	0x20000740
 80028f0:	2000073c 	.word	0x2000073c
 80028f4:	20000c24 	.word	0x20000c24
 80028f8:	20000c20 	.word	0x20000c20

080028fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002902:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <vTaskSwitchContext+0xa8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800290a:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <vTaskSwitchContext+0xac>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002910:	e042      	b.n	8002998 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <vTaskSwitchContext+0xac>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <vTaskSwitchContext+0xb0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e011      	b.n	8002944 <vTaskSwitchContext+0x48>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <vTaskSwitchContext+0x42>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	607b      	str	r3, [r7, #4]
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	e7fd      	b.n	800293a <vTaskSwitchContext+0x3e>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	491a      	ldr	r1, [pc, #104]	@ (80029b0 <vTaskSwitchContext+0xb4>)
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0e3      	beq.n	8002920 <vTaskSwitchContext+0x24>
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <vTaskSwitchContext+0xb4>)
 8002964:	4413      	add	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3308      	adds	r3, #8
 800297a:	429a      	cmp	r2, r3
 800297c:	d104      	bne.n	8002988 <vTaskSwitchContext+0x8c>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <vTaskSwitchContext+0xb8>)
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <vTaskSwitchContext+0xb0>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000c38 	.word	0x20000c38
 80029a8:	20000c24 	.word	0x20000c24
 80029ac:	20000c18 	.word	0x20000c18
 80029b0:	20000740 	.word	0x20000740
 80029b4:	2000073c 	.word	0x2000073c

080029b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60fb      	str	r3, [r7, #12]
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029e0:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <vTaskPlaceOnEventList+0x48>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3318      	adds	r3, #24
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe fcdf 	bl	80013ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029ee:	2101      	movs	r1, #1
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f000 fb81 	bl	80030f8 <prvAddCurrentTaskToDelayedList>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000073c 	.word	0x2000073c

08002a04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10b      	bne.n	8002a2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	617b      	str	r3, [r7, #20]
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	e7fd      	b.n	8002a2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3318      	adds	r3, #24
 8002a34:	4619      	mov	r1, r3
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7fe fc95 	bl	8001366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	f000 fb54 	bl	80030f8 <prvAddCurrentTaskToDelayedList>
	}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000073c 	.word	0x2000073c

08002a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	60fb      	str	r3, [r7, #12]
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	3318      	adds	r3, #24
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fcc4 	bl	800141c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <xTaskRemoveFromEventList+0xb0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11d      	bne.n	8002ad8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fcbb 	bl	800141c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <xTaskRemoveFromEventList+0xb4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d903      	bls.n	8002aba <xTaskRemoveFromEventList+0x5e>
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	4a16      	ldr	r2, [pc, #88]	@ (8002b10 <xTaskRemoveFromEventList+0xb4>)
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <xTaskRemoveFromEventList+0xb8>)
 8002ac8:	441a      	add	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	3304      	adds	r3, #4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7fe fc48 	bl	8001366 <vListInsertEnd>
 8002ad6:	e005      	b.n	8002ae4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	3318      	adds	r3, #24
 8002adc:	4619      	mov	r1, r3
 8002ade:	480e      	ldr	r0, [pc, #56]	@ (8002b18 <xTaskRemoveFromEventList+0xbc>)
 8002ae0:	f7fe fc41 	bl	8001366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <xTaskRemoveFromEventList+0xc0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d905      	bls.n	8002afe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <xTaskRemoveFromEventList+0xc4>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e001      	b.n	8002b02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b02:	697b      	ldr	r3, [r7, #20]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000c38 	.word	0x20000c38
 8002b10:	20000c18 	.word	0x20000c18
 8002b14:	20000740 	.word	0x20000740
 8002b18:	20000bd0 	.word	0x20000bd0
 8002b1c:	2000073c 	.word	0x2000073c
 8002b20:	20000c24 	.word	0x20000c24

08002b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <vTaskInternalSetTimeOutState+0x24>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <vTaskInternalSetTimeOutState+0x28>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	605a      	str	r2, [r3, #4]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000c28 	.word	0x20000c28
 8002b4c:	20000c14 	.word	0x20000c14

08002b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	613b      	str	r3, [r7, #16]
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	60fb      	str	r3, [r7, #12]
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	e7fd      	b.n	8002b92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002b96:	f000 ff49 	bl	8003a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <xTaskCheckForTimeOut+0xc0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d102      	bne.n	8002bba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e023      	b.n	8002c02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <xTaskCheckForTimeOut+0xc4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d007      	beq.n	8002bd6 <xTaskCheckForTimeOut+0x86>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e015      	b.n	8002c02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d20b      	bcs.n	8002bf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff99 	bl	8002b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e004      	b.n	8002c02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c02:	f000 ff43 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 8002c06:	69fb      	ldr	r3, [r7, #28]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000c14 	.word	0x20000c14
 8002c14:	20000c28 	.word	0x20000c28

08002c18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <vTaskMissedYield+0x14>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000c24 	.word	0x20000c24

08002c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c38:	f000 f852 	bl	8002ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <prvIdleTask+0x28>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d9f9      	bls.n	8002c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <prvIdleTask+0x2c>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c54:	e7f0      	b.n	8002c38 <prvIdleTask+0x8>
 8002c56:	bf00      	nop
 8002c58:	20000740 	.word	0x20000740
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	e00c      	b.n	8002c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <prvInitialiseTaskLists+0x60>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fb48 	bl	8001310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3301      	adds	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b37      	cmp	r3, #55	@ 0x37
 8002c8a:	d9ef      	bls.n	8002c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c8c:	480d      	ldr	r0, [pc, #52]	@ (8002cc4 <prvInitialiseTaskLists+0x64>)
 8002c8e:	f7fe fb3f 	bl	8001310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c92:	480d      	ldr	r0, [pc, #52]	@ (8002cc8 <prvInitialiseTaskLists+0x68>)
 8002c94:	f7fe fb3c 	bl	8001310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c98:	480c      	ldr	r0, [pc, #48]	@ (8002ccc <prvInitialiseTaskLists+0x6c>)
 8002c9a:	f7fe fb39 	bl	8001310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <prvInitialiseTaskLists+0x70>)
 8002ca0:	f7fe fb36 	bl	8001310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ca4:	480b      	ldr	r0, [pc, #44]	@ (8002cd4 <prvInitialiseTaskLists+0x74>)
 8002ca6:	f7fe fb33 	bl	8001310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <prvInitialiseTaskLists+0x78>)
 8002cac:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <prvInitialiseTaskLists+0x64>)
 8002cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <prvInitialiseTaskLists+0x7c>)
 8002cb2:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <prvInitialiseTaskLists+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000740 	.word	0x20000740
 8002cc4:	20000ba0 	.word	0x20000ba0
 8002cc8:	20000bb4 	.word	0x20000bb4
 8002ccc:	20000bd0 	.word	0x20000bd0
 8002cd0:	20000be4 	.word	0x20000be4
 8002cd4:	20000bfc 	.word	0x20000bfc
 8002cd8:	20000bc8 	.word	0x20000bc8
 8002cdc:	20000bcc 	.word	0x20000bcc

08002ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ce6:	e019      	b.n	8002d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ce8:	f000 fea0 	bl	8003a2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cec:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <prvCheckTasksWaitingTermination+0x50>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fb8f 	bl	800141c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <prvCheckTasksWaitingTermination+0x54>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <prvCheckTasksWaitingTermination+0x54>)
 8002d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <prvCheckTasksWaitingTermination+0x58>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <prvCheckTasksWaitingTermination+0x58>)
 8002d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d12:	f000 febb 	bl	8003a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f810 	bl	8002d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <prvCheckTasksWaitingTermination+0x58>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e1      	bne.n	8002ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000be4 	.word	0x20000be4
 8002d34:	20000c10 	.word	0x20000c10
 8002d38:	20000bf8 	.word	0x20000bf8

08002d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 f83a 	bl	8003dcc <vPortFree>
				vPortFree( pxTCB );
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f001 f837 	bl	8003dcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d5e:	e019      	b.n	8002d94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d103      	bne.n	8002d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f001 f82e 	bl	8003dcc <vPortFree>
	}
 8002d70:	e010      	b.n	8002d94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d00b      	beq.n	8002d94 <prvDeleteTCB+0x58>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60fb      	str	r3, [r7, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <prvDeleteTCB+0x54>
	}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da2:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <prvResetNextTaskUnblockTime+0x38>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002db4:	e008      	b.n	8002dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <prvResetNextTaskUnblockTime+0x38>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000bc8 	.word	0x20000bc8
 8002dd8:	20000c30 	.word	0x20000c30

08002ddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <xTaskGetSchedulerState+0x34>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dea:	2301      	movs	r3, #1
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	e008      	b.n	8002e02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <xTaskGetSchedulerState+0x38>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	e001      	b.n	8002e02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e02:	687b      	ldr	r3, [r7, #4]
	}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000c1c 	.word	0x20000c1c
 8002e14:	20000c38 	.word	0x20000c38

08002e18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d051      	beq.n	8002ed2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e32:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <xTaskPriorityInherit+0xc4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d241      	bcs.n	8002ec0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db06      	blt.n	8002e52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <xTaskPriorityInherit+0xc4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6959      	ldr	r1, [r3, #20]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <xTaskPriorityInherit+0xc8>)
 8002e64:	4413      	add	r3, r2
 8002e66:	4299      	cmp	r1, r3
 8002e68:	d122      	bne.n	8002eb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fad4 	bl	800141c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <xTaskPriorityInherit+0xc4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <xTaskPriorityInherit+0xcc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d903      	bls.n	8002e92 <xTaskPriorityInherit+0x7a>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ee4 <xTaskPriorityInherit+0xcc>)
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <xTaskPriorityInherit+0xc8>)
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f7fe fa5c 	bl	8001366 <vListInsertEnd>
 8002eae:	e004      	b.n	8002eba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <xTaskPriorityInherit+0xc4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e008      	b.n	8002ed2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <xTaskPriorityInherit+0xc4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d201      	bcs.n	8002ed2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2000073c 	.word	0x2000073c
 8002ee0:	20000740 	.word	0x20000740
 8002ee4:	20000c18 	.word	0x20000c18

08002ee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d058      	beq.n	8002fb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002efe:	4b2f      	ldr	r3, [pc, #188]	@ (8002fbc <xTaskPriorityDisinherit+0xd4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d00b      	beq.n	8002f20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	60fb      	str	r3, [r7, #12]
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	60bb      	str	r3, [r7, #8]
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d02c      	beq.n	8002fb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d128      	bne.n	8002fb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa5a 	bl	800141c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f80:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <xTaskPriorityDisinherit+0xd8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d903      	bls.n	8002f90 <xTaskPriorityDisinherit+0xa8>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <xTaskPriorityDisinherit+0xd8>)
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <xTaskPriorityDisinherit+0xdc>)
 8002f9e:	441a      	add	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7fe f9dd 	bl	8001366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002fb0:	697b      	ldr	r3, [r7, #20]
	}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000073c 	.word	0x2000073c
 8002fc0:	20000c18 	.word	0x20000c18
 8002fc4:	20000740 	.word	0x20000740

08002fc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d06c      	beq.n	80030ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60fb      	str	r3, [r7, #12]
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d902      	bls.n	8003010 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e002      	b.n	8003016 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	429a      	cmp	r2, r3
 800301e:	d04c      	beq.n	80030ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	429a      	cmp	r2, r3
 8003028:	d147      	bne.n	80030ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800302a:	4b26      	ldr	r3, [pc, #152]	@ (80030c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	429a      	cmp	r2, r3
 8003032:	d10b      	bne.n	800304c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	60bb      	str	r3, [r7, #8]
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db04      	blt.n	800306a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	6959      	ldr	r1, [r3, #20]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4a13      	ldr	r2, [pc, #76]	@ (80030c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800307a:	4413      	add	r3, r2
 800307c:	4299      	cmp	r1, r3
 800307e:	d11c      	bne.n	80030ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	3304      	adds	r3, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe f9c9 	bl	800141c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308e:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d903      	bls.n	800309e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	4a0c      	ldr	r2, [pc, #48]	@ (80030cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80030ac:	441a      	add	r2, r3
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe f956 	bl	8001366 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000073c 	.word	0x2000073c
 80030c8:	20000740 	.word	0x20000740
 80030cc:	20000c18 	.word	0x20000c18

080030d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80030d4:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030e2:	3201      	adds	r2, #1
 80030e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80030e6:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
	}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000073c 	.word	0x2000073c

080030f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <prvAddCurrentTaskToDelayedList+0x90>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003108:	4b20      	ldr	r3, [pc, #128]	@ (800318c <prvAddCurrentTaskToDelayedList+0x94>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3304      	adds	r3, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe f984 	bl	800141c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d10a      	bne.n	8003132 <prvAddCurrentTaskToDelayedList+0x3a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <prvAddCurrentTaskToDelayedList+0x94>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4819      	ldr	r0, [pc, #100]	@ (8003190 <prvAddCurrentTaskToDelayedList+0x98>)
 800312c:	f7fe f91b 	bl	8001366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003130:	e026      	b.n	8003180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800313a:	4b14      	ldr	r3, [pc, #80]	@ (800318c <prvAddCurrentTaskToDelayedList+0x94>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	429a      	cmp	r2, r3
 8003148:	d209      	bcs.n	800315e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <prvAddCurrentTaskToDelayedList+0x94>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f7fe f928 	bl	80013ac <vListInsert>
}
 800315c:	e010      	b.n	8003180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <prvAddCurrentTaskToDelayedList+0x94>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3304      	adds	r3, #4
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f7fe f91e 	bl	80013ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d202      	bcs.n	8003180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800317a:	4a08      	ldr	r2, [pc, #32]	@ (800319c <prvAddCurrentTaskToDelayedList+0xa4>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000c14 	.word	0x20000c14
 800318c:	2000073c 	.word	0x2000073c
 8003190:	20000bfc 	.word	0x20000bfc
 8003194:	20000bcc 	.word	0x20000bcc
 8003198:	20000bc8 	.word	0x20000bc8
 800319c:	20000c30 	.word	0x20000c30

080031a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	@ 0x28
 80031a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80031aa:	f000 fb11 	bl	80037d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <xTimerCreateTimerTask+0x84>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d021      	beq.n	80031fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80031be:	1d3a      	adds	r2, r7, #4
 80031c0:	f107 0108 	add.w	r1, r7, #8
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe f887 	bl	80012dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	9202      	str	r2, [sp, #8]
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	2302      	movs	r3, #2
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	460a      	mov	r2, r1
 80031e0:	4911      	ldr	r1, [pc, #68]	@ (8003228 <xTimerCreateTimerTask+0x88>)
 80031e2:	4812      	ldr	r0, [pc, #72]	@ (800322c <xTimerCreateTimerTask+0x8c>)
 80031e4:	f7fe ffd2 	bl	800218c <xTaskCreateStatic>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4a11      	ldr	r2, [pc, #68]	@ (8003230 <xTimerCreateTimerTask+0x90>)
 80031ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <xTimerCreateTimerTask+0x90>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	613b      	str	r3, [r7, #16]
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003218:	697b      	ldr	r3, [r7, #20]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000c6c 	.word	0x20000c6c
 8003228:	080040a4 	.word	0x080040a4
 800322c:	0800336d 	.word	0x0800336d
 8003230:	20000c70 	.word	0x20000c70

08003234 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <xTimerGenericCommand+0x30>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	623b      	str	r3, [r7, #32]
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	e7fd      	b.n	8003260 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <xTimerGenericCommand+0x98>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d02a      	beq.n	80032c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	dc18      	bgt.n	80032b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800327e:	f7ff fdad 	bl	8002ddc <xTaskGetSchedulerState>
 8003282:	4603      	mov	r3, r0
 8003284:	2b02      	cmp	r3, #2
 8003286:	d109      	bne.n	800329c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003288:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <xTimerGenericCommand+0x98>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	f107 0110 	add.w	r1, r7, #16
 8003290:	2300      	movs	r3, #0
 8003292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003294:	f7fe fa64 	bl	8001760 <xQueueGenericSend>
 8003298:	6278      	str	r0, [r7, #36]	@ 0x24
 800329a:	e012      	b.n	80032c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <xTimerGenericCommand+0x98>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	f107 0110 	add.w	r1, r7, #16
 80032a4:	2300      	movs	r3, #0
 80032a6:	2200      	movs	r2, #0
 80032a8:	f7fe fa5a 	bl	8001760 <xQueueGenericSend>
 80032ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80032ae:	e008      	b.n	80032c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <xTimerGenericCommand+0x98>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	f107 0110 	add.w	r1, r7, #16
 80032b8:	2300      	movs	r3, #0
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	f7fe fb52 	bl	8001964 <xQueueGenericSendFromISR>
 80032c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	@ 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000c6c 	.word	0x20000c6c

080032d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032da:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <prvProcessExpiredTimer+0x98>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe f897 	bl	800141c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	18d1      	adds	r1, r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	6978      	ldr	r0, [r7, #20]
 800330a:	f000 f8d3 	bl	80034b4 <prvInsertTimerInActiveList>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003314:	2300      	movs	r3, #0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	2100      	movs	r1, #0
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff ff88 	bl	8003234 <xTimerGenericCommand>
 8003324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d114      	bne.n	8003356 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	60fb      	str	r3, [r7, #12]
}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	b2da      	uxtb	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	4798      	blx	r3
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000c64 	.word	0x20000c64

0800336c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003374:	f107 0308 	add.w	r3, r7, #8
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f859 	bl	8003430 <prvGetNextExpireTime>
 800337e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4619      	mov	r1, r3
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f805 	bl	8003394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800338a:	f000 f8d5 	bl	8003538 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800338e:	bf00      	nop
 8003390:	e7f0      	b.n	8003374 <prvTimerTask+0x8>
	...

08003394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800339e:	f7ff f939 	bl	8002614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f864 	bl	8003474 <prvSampleTimeNow>
 80033ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d130      	bne.n	8003416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <prvProcessTimerOrBlockTask+0x3c>
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d806      	bhi.n	80033d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80033c2:	f7ff f935 	bl	8002630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff81 	bl	80032d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80033ce:	e024      	b.n	800341a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033d6:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <prvProcessTimerOrBlockTask+0x90>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <prvProcessTimerOrBlockTask+0x50>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <prvProcessTimerOrBlockTask+0x52>
 80033e4:	2300      	movs	r3, #0
 80033e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80033e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <prvProcessTimerOrBlockTask+0x94>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7fe fe95 	bl	8002124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80033fa:	f7ff f919 	bl	8002630 <xTaskResumeAll>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003404:	4b09      	ldr	r3, [pc, #36]	@ (800342c <prvProcessTimerOrBlockTask+0x98>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
}
 8003414:	e001      	b.n	800341a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003416:	f7ff f90b 	bl	8002630 <xTaskResumeAll>
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000c68 	.word	0x20000c68
 8003428:	20000c6c 	.word	0x20000c6c
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003438:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <prvGetNextExpireTime+0x40>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <prvGetNextExpireTime+0x16>
 8003442:	2201      	movs	r2, #1
 8003444:	e000      	b.n	8003448 <prvGetNextExpireTime+0x18>
 8003446:	2200      	movs	r2, #0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003454:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <prvGetNextExpireTime+0x40>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e001      	b.n	8003464 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003464:	68fb      	ldr	r3, [r7, #12]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000c64 	.word	0x20000c64

08003474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800347c:	f7ff f976 	bl	800276c <xTaskGetTickCount>
 8003480:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003482:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <prvSampleTimeNow+0x3c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d205      	bcs.n	8003498 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800348c:	f000 f93a 	bl	8003704 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e002      	b.n	800349e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800349e:	4a04      	ldr	r2, [pc, #16]	@ (80034b0 <prvSampleTimeNow+0x3c>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80034a4:	68fb      	ldr	r3, [r7, #12]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000c74 	.word	0x20000c74

080034b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d812      	bhi.n	8003500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad2      	subs	r2, r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e01b      	b.n	8003526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034ee:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <prvInsertTimerInActiveList+0x7c>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fd ff57 	bl	80013ac <vListInsert>
 80034fe:	e012      	b.n	8003526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d206      	bcs.n	8003516 <prvInsertTimerInActiveList+0x62>
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e007      	b.n	8003526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <prvInsertTimerInActiveList+0x80>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7fd ff43 	bl	80013ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000c68 	.word	0x20000c68
 8003534:	20000c64 	.word	0x20000c64

08003538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	@ 0x38
 800353c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800353e:	e0ce      	b.n	80036de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	da19      	bge.n	800357a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	3304      	adds	r3, #4
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	61fb      	str	r3, [r7, #28]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003570:	6850      	ldr	r0, [r2, #4]
 8003572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003574:	6892      	ldr	r2, [r2, #8]
 8003576:	4611      	mov	r1, r2
 8003578:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f2c0 80ae 	blt.w	80036de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	3304      	adds	r3, #4
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd ff42 	bl	800141c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003598:	463b      	mov	r3, r7
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff6a 	bl	8003474 <prvSampleTimeNow>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	f200 8097 	bhi.w	80036d8 <prvProcessReceivedCommands+0x1a0>
 80035aa:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <prvProcessReceivedCommands+0x78>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035d9 	.word	0x080035d9
 80035bc:	0800364f 	.word	0x0800364f
 80035c0:	08003663 	.word	0x08003663
 80035c4:	080036af 	.word	0x080036af
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035d9 	.word	0x080035d9
 80035d0:	0800364f 	.word	0x0800364f
 80035d4:	08003663 	.word	0x08003663
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	18d1      	adds	r1, r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f8:	f7ff ff5c 	bl	80034b4 <prvInsertTimerInActiveList>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d06c      	beq.n	80036dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d061      	beq.n	80036dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	441a      	add	r2, r3
 8003620:	2300      	movs	r3, #0
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	2100      	movs	r1, #0
 8003628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800362a:	f7ff fe03 	bl	8003234 <xTimerGenericCommand>
 800362e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d152      	bne.n	80036dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61bb      	str	r3, [r7, #24]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003660:	e03d      	b.n	80036de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	617b      	str	r3, [r7, #20]
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	18d1      	adds	r1, r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036a8:	f7ff ff04 	bl	80034b4 <prvInsertTimerInActiveList>
					break;
 80036ac:	e017      	b.n	80036de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80036bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036be:	f000 fb85 	bl	8003dcc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80036c2:	e00c      	b.n	80036de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80036d6:	e002      	b.n	80036de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <prvProcessReceivedCommands+0x1a6>
					break;
 80036dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <prvProcessReceivedCommands+0x1c8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	1d39      	adds	r1, r7, #4
 80036e4:	2200      	movs	r2, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f9da 	bl	8001aa0 <xQueueReceive>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f47f af26 	bne.w	8003540 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3730      	adds	r7, #48	@ 0x30
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000c6c 	.word	0x20000c6c

08003704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800370a:	e049      	b.n	80037a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800370c:	4b2e      	ldr	r3, [pc, #184]	@ (80037c8 <prvSwitchTimerLists+0xc4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003716:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <prvSwitchTimerLists+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3304      	adds	r3, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fe79 	bl	800141c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02f      	beq.n	80037a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	429a      	cmp	r2, r3
 8003750:	d90e      	bls.n	8003770 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800375e:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <prvSwitchTimerLists+0xc4>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fd fe1f 	bl	80013ac <vListInsert>
 800376e:	e017      	b.n	80037a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	2100      	movs	r1, #0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fd5a 	bl	8003234 <xTimerGenericCommand>
 8003780:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	603b      	str	r3, [r7, #0]
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <prvSwitchTimerLists+0xc4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1b0      	bne.n	800370c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80037aa:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <prvSwitchTimerLists+0xc4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <prvSwitchTimerLists+0xc8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <prvSwitchTimerLists+0xc4>)
 80037b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <prvSwitchTimerLists+0xc8>)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6013      	str	r3, [r2, #0]
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000c64 	.word	0x20000c64
 80037cc:	20000c68 	.word	0x20000c68

080037d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80037d6:	f000 f929 	bl	8003a2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80037da:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <prvCheckForValidListAndQueue+0x60>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d120      	bne.n	8003824 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80037e2:	4814      	ldr	r0, [pc, #80]	@ (8003834 <prvCheckForValidListAndQueue+0x64>)
 80037e4:	f7fd fd94 	bl	8001310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80037e8:	4813      	ldr	r0, [pc, #76]	@ (8003838 <prvCheckForValidListAndQueue+0x68>)
 80037ea:	f7fd fd91 	bl	8001310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80037ee:	4b13      	ldr	r3, [pc, #76]	@ (800383c <prvCheckForValidListAndQueue+0x6c>)
 80037f0:	4a10      	ldr	r2, [pc, #64]	@ (8003834 <prvCheckForValidListAndQueue+0x64>)
 80037f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80037f4:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <prvCheckForValidListAndQueue+0x70>)
 80037f6:	4a10      	ldr	r2, [pc, #64]	@ (8003838 <prvCheckForValidListAndQueue+0x68>)
 80037f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	4b11      	ldr	r3, [pc, #68]	@ (8003844 <prvCheckForValidListAndQueue+0x74>)
 8003800:	4a11      	ldr	r2, [pc, #68]	@ (8003848 <prvCheckForValidListAndQueue+0x78>)
 8003802:	2110      	movs	r1, #16
 8003804:	200a      	movs	r0, #10
 8003806:	f7fd fe9d 	bl	8001544 <xQueueGenericCreateStatic>
 800380a:	4603      	mov	r3, r0
 800380c:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <prvCheckForValidListAndQueue+0x60>)
 800380e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003810:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <prvCheckForValidListAndQueue+0x60>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <prvCheckForValidListAndQueue+0x60>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	490b      	ldr	r1, [pc, #44]	@ (800384c <prvCheckForValidListAndQueue+0x7c>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fc58 	bl	80020d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003824:	f000 f932 	bl	8003a8c <vPortExitCritical>
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000c6c 	.word	0x20000c6c
 8003834:	20000c3c 	.word	0x20000c3c
 8003838:	20000c50 	.word	0x20000c50
 800383c:	20000c64 	.word	0x20000c64
 8003840:	20000c68 	.word	0x20000c68
 8003844:	20000d18 	.word	0x20000d18
 8003848:	20000c78 	.word	0x20000c78
 800384c:	080040ac 	.word	0x080040ac

08003850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3b04      	subs	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3b04      	subs	r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b04      	subs	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003880:	4a08      	ldr	r2, [pc, #32]	@ (80038a4 <pxPortInitialiseStack+0x54>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3b14      	subs	r3, #20
 800388a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3b20      	subs	r3, #32
 8003896:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	080038a9 	.word	0x080038a9

080038a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038b2:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <prvTaskExitError+0x54>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d00b      	beq.n	80038d4 <prvTaskExitError+0x2c>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <prvTaskExitError+0x28>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	60bb      	str	r3, [r7, #8]
}
 80038e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038e8:	bf00      	nop
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0fc      	beq.n	80038ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	2000001c 	.word	0x2000001c

08003900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003900:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <pxCurrentTCBConst2>)
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	6808      	ldr	r0, [r1, #0]
 8003906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800390a:	f380 8809 	msr	PSP, r0
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f380 8811 	msr	BASEPRI, r0
 800391a:	f04e 0e0d 	orr.w	lr, lr, #13
 800391e:	4770      	bx	lr

08003920 <pxCurrentTCBConst2>:
 8003920:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop

08003928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003928:	4806      	ldr	r0, [pc, #24]	@ (8003944 <prvPortStartFirstTask+0x1c>)
 800392a:	6800      	ldr	r0, [r0, #0]
 800392c:	6800      	ldr	r0, [r0, #0]
 800392e:	f380 8808 	msr	MSP, r0
 8003932:	b662      	cpsie	i
 8003934:	b661      	cpsie	f
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	df00      	svc	0
 8003940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003942:	bf00      	nop
 8003944:	e000ed08 	.word	0xe000ed08

08003948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800394e:	4b32      	ldr	r3, [pc, #200]	@ (8003a18 <xPortStartScheduler+0xd0>)
 8003950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	22ff      	movs	r2, #255	@ 0xff
 800395e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b2a      	ldr	r3, [pc, #168]	@ (8003a1c <xPortStartScheduler+0xd4>)
 8003974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003976:	4b2a      	ldr	r3, [pc, #168]	@ (8003a20 <xPortStartScheduler+0xd8>)
 8003978:	2207      	movs	r2, #7
 800397a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800397c:	e009      	b.n	8003992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800397e:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <xPortStartScheduler+0xd8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a26      	ldr	r2, [pc, #152]	@ (8003a20 <xPortStartScheduler+0xd8>)
 8003986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d0ef      	beq.n	800397e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <xPortStartScheduler+0xd8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00b      	beq.n	80039c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60bb      	str	r3, [r7, #8]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039c2:	4b17      	ldr	r3, [pc, #92]	@ (8003a20 <xPortStartScheduler+0xd8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <xPortStartScheduler+0xd8>)
 80039ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <xPortStartScheduler+0xd8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039d4:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <xPortStartScheduler+0xd8>)
 80039d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039e0:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <xPortStartScheduler+0xdc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a24 <xPortStartScheduler+0xdc>)
 80039e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <xPortStartScheduler+0xdc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003a24 <xPortStartScheduler+0xdc>)
 80039f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80039f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039f8:	f000 f8b8 	bl	8003b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <xPortStartScheduler+0xe0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a02:	f7ff ff91 	bl	8003928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a06:	f7fe ff79 	bl	80028fc <vTaskSwitchContext>
	prvTaskExitError();
 8003a0a:	f7ff ff4d 	bl	80038a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000e400 	.word	0xe000e400
 8003a1c:	20000d68 	.word	0x20000d68
 8003a20:	20000d6c 	.word	0x20000d6c
 8003a24:	e000ed20 	.word	0xe000ed20
 8003a28:	2000001c 	.word	0x2000001c

08003a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	607b      	str	r3, [r7, #4]
}
 8003a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a46:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <vPortEnterCritical+0x58>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <vPortEnterCritical+0x58>)
 8003a4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <vPortEnterCritical+0x58>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d110      	bne.n	8003a7a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <vPortEnterCritical+0x5c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <vPortEnterCritical+0x4e>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	603b      	str	r3, [r7, #0]
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	e7fd      	b.n	8003a76 <vPortEnterCritical+0x4a>
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	2000001c 	.word	0x2000001c
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <vPortExitCritical+0x50>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <vPortExitCritical+0x26>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	607b      	str	r3, [r7, #4]
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	e7fd      	b.n	8003aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <vPortExitCritical+0x50>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	4a08      	ldr	r2, [pc, #32]	@ (8003adc <vPortExitCritical+0x50>)
 8003aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <vPortExitCritical+0x50>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <vPortExitCritical+0x44>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f383 8811 	msr	BASEPRI, r3
}
 8003ace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	2000001c 	.word	0x2000001c

08003ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ae0:	f3ef 8009 	mrs	r0, PSP
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <pxCurrentTCBConst>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003af0:	6010      	str	r0, [r2, #0]
 8003af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003af6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003afa:	f380 8811 	msr	BASEPRI, r0
 8003afe:	f7fe fefd 	bl	80028fc <vTaskSwitchContext>
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	6808      	ldr	r0, [r1, #0]
 8003b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b16:	f380 8809 	msr	PSP, r0
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	4770      	bx	lr

08003b20 <pxCurrentTCBConst>:
 8003b20:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop

08003b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	607b      	str	r3, [r7, #4]
}
 8003b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b42:	f7fe fe21 	bl	8002788 <xTaskIncrementTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <xPortSysTickHandler+0x40>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f383 8811 	msr	BASEPRI, r3
}
 8003b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b70:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <vPortSetupTimerInterrupt+0x30>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <vPortSetupTimerInterrupt+0x34>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <vPortSetupTimerInterrupt+0x38>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <vPortSetupTimerInterrupt+0x3c>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <vPortSetupTimerInterrupt+0x40>)
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b8e:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <vPortSetupTimerInterrupt+0x30>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e010 	.word	0xe000e010
 8003ba0:	e000e018 	.word	0xe000e018
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	10624dd3 	.word	0x10624dd3
 8003bac:	e000e014 	.word	0xe000e014

08003bb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003bb6:	f3ef 8305 	mrs	r3, IPSR
 8003bba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	d915      	bls.n	8003bee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <vPortValidateInterruptPriority+0x70>)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bcc:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <vPortValidateInterruptPriority+0x74>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	7afa      	ldrb	r2, [r7, #11]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d20b      	bcs.n	8003bee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	607b      	str	r3, [r7, #4]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <vPortValidateInterruptPriority+0x78>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <vPortValidateInterruptPriority+0x7c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d90b      	bls.n	8003c16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	603b      	str	r3, [r7, #0]
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	e7fd      	b.n	8003c12 <vPortValidateInterruptPriority+0x62>
	}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	e000e3f0 	.word	0xe000e3f0
 8003c24:	20000d68 	.word	0x20000d68
 8003c28:	e000ed0c 	.word	0xe000ed0c
 8003c2c:	20000d6c 	.word	0x20000d6c

08003c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c3c:	f7fe fcea 	bl	8002614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c40:	4b5c      	ldr	r3, [pc, #368]	@ (8003db4 <pvPortMalloc+0x184>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c48:	f000 f924 	bl	8003e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003db8 <pvPortMalloc+0x188>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8095 	bne.w	8003d84 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01e      	beq.n	8003c9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c60:	2208      	movs	r2, #8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d015      	beq.n	8003c9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f023 0307 	bic.w	r3, r3, #7
 8003c78:	3308      	adds	r3, #8
 8003c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <pvPortMalloc+0x6e>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	617b      	str	r3, [r7, #20]
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d06f      	beq.n	8003d84 <pvPortMalloc+0x154>
 8003ca4:	4b45      	ldr	r3, [pc, #276]	@ (8003dbc <pvPortMalloc+0x18c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d86a      	bhi.n	8003d84 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cae:	4b44      	ldr	r3, [pc, #272]	@ (8003dc0 <pvPortMalloc+0x190>)
 8003cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cb2:	4b43      	ldr	r3, [pc, #268]	@ (8003dc0 <pvPortMalloc+0x190>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cb8:	e004      	b.n	8003cc4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d903      	bls.n	8003cd6 <pvPortMalloc+0xa6>
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f1      	bne.n	8003cba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cd6:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <pvPortMalloc+0x184>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d051      	beq.n	8003d84 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	4413      	add	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d920      	bls.n	8003d44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <pvPortMalloc+0xfc>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	613b      	str	r3, [r7, #16]
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d3e:	69b8      	ldr	r0, [r7, #24]
 8003d40:	f000 f90a 	bl	8003f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <pvPortMalloc+0x18c>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dbc <pvPortMalloc+0x18c>)
 8003d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d52:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <pvPortMalloc+0x18c>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <pvPortMalloc+0x194>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d203      	bcs.n	8003d66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d5e:	4b17      	ldr	r3, [pc, #92]	@ (8003dbc <pvPortMalloc+0x18c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <pvPortMalloc+0x194>)
 8003d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <pvPortMalloc+0x188>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <pvPortMalloc+0x198>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <pvPortMalloc+0x198>)
 8003d82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d84:	f7fe fc54 	bl	8002630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <pvPortMalloc+0x17a>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	60fb      	str	r3, [r7, #12]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <pvPortMalloc+0x176>
	return pvReturn;
 8003daa:	69fb      	ldr	r3, [r7, #28]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	@ 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20001978 	.word	0x20001978
 8003db8:	2000198c 	.word	0x2000198c
 8003dbc:	2000197c 	.word	0x2000197c
 8003dc0:	20001970 	.word	0x20001970
 8003dc4:	20001980 	.word	0x20001980
 8003dc8:	20001984 	.word	0x20001984

08003dcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d04f      	beq.n	8003e7e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dde:	2308      	movs	r3, #8
 8003de0:	425b      	negs	r3, r3
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4413      	add	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <vPortFree+0xbc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <vPortFree+0x46>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	60fb      	str	r3, [r7, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	e7fd      	b.n	8003e0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <vPortFree+0x66>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60bb      	str	r3, [r7, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	e7fd      	b.n	8003e2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <vPortFree+0xbc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01e      	beq.n	8003e7e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11a      	bne.n	8003e7e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <vPortFree+0xbc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	401a      	ands	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e58:	f7fe fbdc 	bl	8002614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <vPortFree+0xc0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	4a09      	ldr	r2, [pc, #36]	@ (8003e8c <vPortFree+0xc0>)
 8003e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e6a:	6938      	ldr	r0, [r7, #16]
 8003e6c:	f000 f874 	bl	8003f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e70:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <vPortFree+0xc4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	4a06      	ldr	r2, [pc, #24]	@ (8003e90 <vPortFree+0xc4>)
 8003e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e7a:	f7fe fbd9 	bl	8002630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000198c 	.word	0x2000198c
 8003e8c:	2000197c 	.word	0x2000197c
 8003e90:	20001988 	.word	0x20001988

08003e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <prvHeapInit+0xac>)
 8003ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <prvHeapInit+0xac>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <prvHeapInit+0xb0>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f44 <prvHeapInit+0xb0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <prvHeapInit+0xb4>)
 8003ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <prvHeapInit+0xb4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003efe:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <prvHeapInit+0xb4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <prvHeapInit+0xb4>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <prvHeapInit+0xb8>)
 8003f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a09      	ldr	r2, [pc, #36]	@ (8003f50 <prvHeapInit+0xbc>)
 8003f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <prvHeapInit+0xc0>)
 8003f2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f32:	601a      	str	r2, [r3, #0]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000d70 	.word	0x20000d70
 8003f44:	20001970 	.word	0x20001970
 8003f48:	20001978 	.word	0x20001978
 8003f4c:	20001980 	.word	0x20001980
 8003f50:	2000197c 	.word	0x2000197c
 8003f54:	2000198c 	.word	0x2000198c

08003f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f60:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <prvInsertBlockIntoFreeList+0xa8>)
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e002      	b.n	8003f6c <prvInsertBlockIntoFreeList+0x14>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d8f7      	bhi.n	8003f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d108      	bne.n	8003f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d118      	bne.n	8003fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4b14      	ldr	r3, [pc, #80]	@ (8004004 <prvInsertBlockIntoFreeList+0xac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d00d      	beq.n	8003fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e008      	b.n	8003fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <prvInsertBlockIntoFreeList+0xac>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e003      	b.n	8003fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d002      	beq.n	8003ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	20001970 	.word	0x20001970
 8004004:	20001978 	.word	0x20001978

08004008 <memset>:
 8004008:	4603      	mov	r3, r0
 800400a:	4402      	add	r2, r0
 800400c:	4293      	cmp	r3, r2
 800400e:	d100      	bne.n	8004012 <memset+0xa>
 8004010:	4770      	bx	lr
 8004012:	f803 1b01 	strb.w	r1, [r3], #1
 8004016:	e7f9      	b.n	800400c <memset+0x4>

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	2600      	movs	r6, #0
 800401c:	4d0c      	ldr	r5, [pc, #48]	@ (8004050 <__libc_init_array+0x38>)
 800401e:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	f000 f828 	bl	800407c <_init>
 800402c:	2600      	movs	r6, #0
 800402e:	4d0a      	ldr	r5, [pc, #40]	@ (8004058 <__libc_init_array+0x40>)
 8004030:	4c0a      	ldr	r4, [pc, #40]	@ (800405c <__libc_init_array+0x44>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080040d8 	.word	0x080040d8
 8004054:	080040d8 	.word	0x080040d8
 8004058:	080040d8 	.word	0x080040d8
 800405c:	080040dc 	.word	0x080040dc

08004060 <memcpy>:
 8004060:	440a      	add	r2, r1
 8004062:	4291      	cmp	r1, r2
 8004064:	f100 33ff 	add.w	r3, r0, #4294967295
 8004068:	d100      	bne.n	800406c <memcpy+0xc>
 800406a:	4770      	bx	lr
 800406c:	b510      	push	{r4, lr}
 800406e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004072:	4291      	cmp	r1, r2
 8004074:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004078:	d1f9      	bne.n	800406e <memcpy+0xe>
 800407a:	bd10      	pop	{r4, pc}

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
