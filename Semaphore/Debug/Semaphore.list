
Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b8c  08003b8c  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b8c  08003b8c  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b8c  08003b8c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b90  08003b90  00004b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003b94  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001974  20000010  08003ba4  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001984  08003ba4  00005984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c873  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002675  00000000  00000000  000118ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00013f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  00014b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000265f  00000000  00000000  000154db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de8f  00000000  00000000  00017b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089056  00000000  00000000  000259c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aea1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000312c  00000000  00000000  000aea64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b1b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b2c 	.word	0x08003b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003b2c 	.word	0x08003b2c

08000150 <GreenTaskA>:

TaskHandle_t Blue_Task_Handle;

SemaphoreHandle_t SemPtr = NULL;

void GreenTaskA(void *argument) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint_fast8_t count = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
	while(1) {

		if(++count >=5) {
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	3301      	adds	r3, #1
 8000160:	60fb      	str	r3, [r7, #12]
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	2b04      	cmp	r3, #4
 8000166:	d904      	bls.n	8000172 <GreenTaskA+0x22>
			count = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	60fb      	str	r3, [r7, #12]
		//	SEGGER_SYSVIEW_PrintfHost("Task A (green LED) gives semPtr");
			flag = 1;
 800016c:	4b06      	ldr	r3, [pc, #24]	@ (8000188 <GreenTaskA+0x38>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
		}
		GreenLed_On();
 8000172:	f000 f979 	bl	8000468 <GreenLed_On>
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8000176:	2064      	movs	r0, #100	@ 0x64
 8000178:	f002 f806 	bl	8002188 <vTaskDelay>
		GreenLed_Off();
 800017c:	f000 f97e 	bl	800047c <GreenLed_Off>
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8000180:	2064      	movs	r0, #100	@ 0x64
 8000182:	f002 f801 	bl	8002188 <vTaskDelay>
		if(++count >=5) {
 8000186:	e7e9      	b.n	800015c <GreenTaskA+0xc>
 8000188:	2000002c 	.word	0x2000002c

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000192:	f000 f97d 	bl	8000490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000196:	f000 f825 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019a:	f000 f85f 	bl	800025c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  if(xTaskCreate(GreenTaskA, "GreenTaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) != pdPASS) {
 800019e:	2300      	movs	r3, #0
 80001a0:	9301      	str	r3, [sp, #4]
 80001a2:	2302      	movs	r3, #2
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2300      	movs	r3, #0
 80001a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001ac:	490a      	ldr	r1, [pc, #40]	@ (80001d8 <main+0x4c>)
 80001ae:	480b      	ldr	r0, [pc, #44]	@ (80001dc <main+0x50>)
 80001b0:	f001 fea4 	bl	8001efc <xTaskCreate>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d001      	beq.n	80001be <main+0x32>
	  while(1) {
 80001ba:	bf00      	nop
 80001bc:	e7fd      	b.n	80001ba <main+0x2e>
	  }
  }

  assert_param(xTaskCreate(BlueTaskB, "BlueTaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);

  SemPtr = xSemaphoreCreateBinary();
 80001be:	2203      	movs	r2, #3
 80001c0:	2100      	movs	r1, #0
 80001c2:	2001      	movs	r0, #1
 80001c4:	f001 f9ed 	bl	80015a2 <xQueueGenericCreate>
 80001c8:	4603      	mov	r3, r0
 80001ca:	4a05      	ldr	r2, [pc, #20]	@ (80001e0 <main+0x54>)
 80001cc:	6013      	str	r3, [r2, #0]
  assert_param(SemPtr != NULL);

  vTaskStartScheduler();
 80001ce:	f002 f811 	bl	80021f4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d2:	bf00      	nop
 80001d4:	e7fd      	b.n	80001d2 <main+0x46>
 80001d6:	bf00      	nop
 80001d8:	08003b44 	.word	0x08003b44
 80001dc:	08000151 	.word	0x08000151
 80001e0:	20000030 	.word	0x20000030

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	@ 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	@ 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 fc60 	bl	8003ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	2310      	movs	r3, #16
 8000210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fc1a 	bl	8000a54 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000226:	f000 f86d 	bl	8000304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fe88 	bl	8000f58 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800024e:	f000 f859 	bl	8000304 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	@ 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	4b21      	ldr	r3, [pc, #132]	@ (80002f8 <MX_GPIO_Init+0x9c>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a20      	ldr	r2, [pc, #128]	@ (80002f8 <MX_GPIO_Init+0x9c>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b1e      	ldr	r3, [pc, #120]	@ (80002f8 <MX_GPIO_Init+0x9c>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0310 	and.w	r3, r3, #16
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <MX_GPIO_Init+0x9c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1a      	ldr	r2, [pc, #104]	@ (80002f8 <MX_GPIO_Init+0x9c>)
 800028e:	f043 0304 	orr.w	r3, r3, #4
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <MX_GPIO_Init+0x9c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0304 	and.w	r3, r3, #4
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <MX_GPIO_Init+0xa0>)
 80002a8:	f000 fbbc 	bl	8000a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2106      	movs	r1, #6
 80002b0:	4813      	ldr	r0, [pc, #76]	@ (8000300 <MX_GPIO_Init+0xa4>)
 80002b2:	f000 fbb7 	bl	8000a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002bc:	2301      	movs	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c4:	2302      	movs	r3, #2
 80002c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c8:	f107 0308 	add.w	r3, r7, #8
 80002cc:	4619      	mov	r1, r3
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <MX_GPIO_Init+0xa0>)
 80002d0:	f000 fa24 	bl	800071c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80002d4:	2306      	movs	r3, #6
 80002d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	2301      	movs	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e0:	2302      	movs	r3, #2
 80002e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e4:	f107 0308 	add.w	r3, r7, #8
 80002e8:	4619      	mov	r1, r3
 80002ea:	4805      	ldr	r0, [pc, #20]	@ (8000300 <MX_GPIO_Init+0xa4>)
 80002ec:	f000 fa16 	bl	800071c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002f0:	bf00      	nop
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40011000 	.word	0x40011000
 8000300:	40010800 	.word	0x40010800

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
}
 800030a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <Error_Handler+0x8>

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <HAL_MspInit+0x68>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <HAL_MspInit+0x68>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <HAL_MspInit+0x68>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <HAL_MspInit+0x68>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <HAL_MspInit+0x68>)
 8000334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <HAL_MspInit+0x68>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	210f      	movs	r1, #15
 800034a:	f06f 0001 	mvn.w	r0, #1
 800034e:	f000 f9bc 	bl	80006ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <HAL_MspInit+0x6c>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <HAL_MspInit+0x6c>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010000 	.word	0x40010000

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <NMI_Handler+0x4>

08000388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <HardFault_Handler+0x4>

08000390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <MemManage_Handler+0x4>

08000398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b8:	f000 f8b0 	bl	800051c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80003bc:	f002 fb66 	bl	8002a8c <xTaskGetSchedulerState>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d001      	beq.n	80003ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80003c6:	f003 f907 	bl	80035d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
	...

080003dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003dc:	f7ff fff7 	bl	80003ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480b      	ldr	r0, [pc, #44]	@ (8000410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003e2:	490c      	ldr	r1, [pc, #48]	@ (8000414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a09      	ldr	r2, [pc, #36]	@ (800041c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003f8:	4c09      	ldr	r4, [pc, #36]	@ (8000420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000406:	f003 fb5f 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff febf 	bl	800018c <main>
  bx lr
 800040e:	4770      	bx	lr
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000418:	08003b94 	.word	0x08003b94
  ldr r2, =_sbss
 800041c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000420:	20001984 	.word	0x20001984

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>

08000426 <Set_Pin>:
 *  Created on: Sep 30, 2025
 *      Author: dangm
 */
#include "Gpio_Config.h"

void Set_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	460b      	mov	r3, r1
 8000430:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000432:	887b      	ldrh	r3, [r7, #2]
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 faf3 	bl	8000a24 <HAL_GPIO_WritePin>
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <Reset_Pin>:

void Reset_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	460b      	mov	r3, r1
 8000450:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f000 fae3 	bl	8000a24 <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <GreenLed_On>:
 *      Author: dangm
 */

#include "My_Gpio.h"

void GreenLed_On(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	Set_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 800046c:	2102      	movs	r1, #2
 800046e:	4802      	ldr	r0, [pc, #8]	@ (8000478 <GreenLed_On+0x10>)
 8000470:	f7ff ffd9 	bl	8000426 <Set_Pin>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010800 	.word	0x40010800

0800047c <GreenLed_Off>:

void GreenLed_Off(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	Reset_Pin(PORT_LED_GREEN, GPIO_LED_GREEN);
 8000480:	2102      	movs	r1, #2
 8000482:	4802      	ldr	r0, [pc, #8]	@ (800048c <GreenLed_Off+0x10>)
 8000484:	f7ff ffdf 	bl	8000446 <Reset_Pin>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010800 	.word	0x40010800

08000490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <HAL_Init+0x28>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <HAL_Init+0x28>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a0:	2003      	movs	r0, #3
 80004a2:	f000 f907 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f000 f808 	bl	80004bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ac:	f7ff ff30 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40022000 	.word	0x40022000

080004bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_InitTick+0x54>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_InitTick+0x58>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4619      	mov	r1, r3
 80004ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f911 	bl	8000702 <HAL_SYSTICK_Config>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e00e      	b.n	8000508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	d80a      	bhi.n	8000506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f0:	2200      	movs	r2, #0
 80004f2:	6879      	ldr	r1, [r7, #4]
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f8e7 	bl	80006ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004fc:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <HAL_InitTick+0x5c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	e000      	b.n	8000508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000000 	.word	0x20000000
 8000514:	20000008 	.word	0x20000008
 8000518:	20000004 	.word	0x20000004

0800051c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <HAL_IncTick+0x1c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <HAL_IncTick+0x20>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a03      	ldr	r2, [pc, #12]	@ (800053c <HAL_IncTick+0x20>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	20000008 	.word	0x20000008
 800053c:	20000034 	.word	0x20000034

08000540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return uwTick;
 8000544:	4b02      	ldr	r3, [pc, #8]	@ (8000550 <HAL_GetTick+0x10>)
 8000546:	681b      	ldr	r3, [r3, #0]
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	20000034 	.word	0x20000034

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db0a      	blt.n	80005e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	490c      	ldr	r1, [pc, #48]	@ (8000604 <__NVIC_SetPriority+0x4c>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	0112      	lsls	r2, r2, #4
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	440b      	add	r3, r1
 80005dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e0:	e00a      	b.n	80005f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4908      	ldr	r1, [pc, #32]	@ (8000608 <__NVIC_SetPriority+0x50>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	3b04      	subs	r3, #4
 80005f0:	0112      	lsls	r2, r2, #4
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	440b      	add	r3, r1
 80005f6:	761a      	strb	r2, [r3, #24]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	@ 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	f1c3 0307 	rsb	r3, r3, #7
 8000626:	2b04      	cmp	r3, #4
 8000628:	bf28      	it	cs
 800062a:	2304      	movcs	r3, #4
 800062c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3304      	adds	r3, #4
 8000632:	2b06      	cmp	r3, #6
 8000634:	d902      	bls.n	800063c <NVIC_EncodePriority+0x30>
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3b03      	subs	r3, #3
 800063a:	e000      	b.n	800063e <NVIC_EncodePriority+0x32>
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43da      	mvns	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	401a      	ands	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	f04f 31ff 	mov.w	r1, #4294967295
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43d9      	mvns	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	4313      	orrs	r3, r2
         );
}
 8000666:	4618      	mov	r0, r3
 8000668:	3724      	adds	r7, #36	@ 0x24
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000680:	d301      	bcc.n	8000686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2301      	movs	r3, #1
 8000684:	e00f      	b.n	80006a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <SysTick_Config+0x40>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800068e:	210f      	movs	r1, #15
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f7ff ff90 	bl	80005b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <SysTick_Config+0x40>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <SysTick_Config+0x40>)
 80006a0:	2207      	movs	r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff49 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006dc:	f7ff ff5e 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	6978      	ldr	r0, [r7, #20]
 80006e8:	f7ff ff90 	bl	800060c <NVIC_EncodePriority>
 80006ec:	4602      	mov	r2, r0
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff5f 	bl	80005b8 <__NVIC_SetPriority>
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ffb0 	bl	8000670 <SysTick_Config>
 8000710:	4603      	mov	r3, r0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800071c:	b480      	push	{r7}
 800071e:	b08b      	sub	sp, #44	@ 0x2c
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800072e:	e169      	b.n	8000a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000730:	2201      	movs	r2, #1
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	69fa      	ldr	r2, [r7, #28]
 8000740:	4013      	ands	r3, r2
 8000742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	429a      	cmp	r2, r3
 800074a:	f040 8158 	bne.w	80009fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4a9a      	ldr	r2, [pc, #616]	@ (80009bc <HAL_GPIO_Init+0x2a0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d05e      	beq.n	8000816 <HAL_GPIO_Init+0xfa>
 8000758:	4a98      	ldr	r2, [pc, #608]	@ (80009bc <HAL_GPIO_Init+0x2a0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d875      	bhi.n	800084a <HAL_GPIO_Init+0x12e>
 800075e:	4a98      	ldr	r2, [pc, #608]	@ (80009c0 <HAL_GPIO_Init+0x2a4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d058      	beq.n	8000816 <HAL_GPIO_Init+0xfa>
 8000764:	4a96      	ldr	r2, [pc, #600]	@ (80009c0 <HAL_GPIO_Init+0x2a4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d86f      	bhi.n	800084a <HAL_GPIO_Init+0x12e>
 800076a:	4a96      	ldr	r2, [pc, #600]	@ (80009c4 <HAL_GPIO_Init+0x2a8>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d052      	beq.n	8000816 <HAL_GPIO_Init+0xfa>
 8000770:	4a94      	ldr	r2, [pc, #592]	@ (80009c4 <HAL_GPIO_Init+0x2a8>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d869      	bhi.n	800084a <HAL_GPIO_Init+0x12e>
 8000776:	4a94      	ldr	r2, [pc, #592]	@ (80009c8 <HAL_GPIO_Init+0x2ac>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d04c      	beq.n	8000816 <HAL_GPIO_Init+0xfa>
 800077c:	4a92      	ldr	r2, [pc, #584]	@ (80009c8 <HAL_GPIO_Init+0x2ac>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d863      	bhi.n	800084a <HAL_GPIO_Init+0x12e>
 8000782:	4a92      	ldr	r2, [pc, #584]	@ (80009cc <HAL_GPIO_Init+0x2b0>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d046      	beq.n	8000816 <HAL_GPIO_Init+0xfa>
 8000788:	4a90      	ldr	r2, [pc, #576]	@ (80009cc <HAL_GPIO_Init+0x2b0>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d85d      	bhi.n	800084a <HAL_GPIO_Init+0x12e>
 800078e:	2b12      	cmp	r3, #18
 8000790:	d82a      	bhi.n	80007e8 <HAL_GPIO_Init+0xcc>
 8000792:	2b12      	cmp	r3, #18
 8000794:	d859      	bhi.n	800084a <HAL_GPIO_Init+0x12e>
 8000796:	a201      	add	r2, pc, #4	@ (adr r2, 800079c <HAL_GPIO_Init+0x80>)
 8000798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079c:	08000817 	.word	0x08000817
 80007a0:	080007f1 	.word	0x080007f1
 80007a4:	08000803 	.word	0x08000803
 80007a8:	08000845 	.word	0x08000845
 80007ac:	0800084b 	.word	0x0800084b
 80007b0:	0800084b 	.word	0x0800084b
 80007b4:	0800084b 	.word	0x0800084b
 80007b8:	0800084b 	.word	0x0800084b
 80007bc:	0800084b 	.word	0x0800084b
 80007c0:	0800084b 	.word	0x0800084b
 80007c4:	0800084b 	.word	0x0800084b
 80007c8:	0800084b 	.word	0x0800084b
 80007cc:	0800084b 	.word	0x0800084b
 80007d0:	0800084b 	.word	0x0800084b
 80007d4:	0800084b 	.word	0x0800084b
 80007d8:	0800084b 	.word	0x0800084b
 80007dc:	0800084b 	.word	0x0800084b
 80007e0:	080007f9 	.word	0x080007f9
 80007e4:	0800080d 	.word	0x0800080d
 80007e8:	4a79      	ldr	r2, [pc, #484]	@ (80009d0 <HAL_GPIO_Init+0x2b4>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d013      	beq.n	8000816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007ee:	e02c      	b.n	800084a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	623b      	str	r3, [r7, #32]
          break;
 80007f6:	e029      	b.n	800084c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	3304      	adds	r3, #4
 80007fe:	623b      	str	r3, [r7, #32]
          break;
 8000800:	e024      	b.n	800084c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	3308      	adds	r3, #8
 8000808:	623b      	str	r3, [r7, #32]
          break;
 800080a:	e01f      	b.n	800084c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	330c      	adds	r3, #12
 8000812:	623b      	str	r3, [r7, #32]
          break;
 8000814:	e01a      	b.n	800084c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d102      	bne.n	8000824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800081e:	2304      	movs	r3, #4
 8000820:	623b      	str	r3, [r7, #32]
          break;
 8000822:	e013      	b.n	800084c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d105      	bne.n	8000838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800082c:	2308      	movs	r3, #8
 800082e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	611a      	str	r2, [r3, #16]
          break;
 8000836:	e009      	b.n	800084c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000838:	2308      	movs	r3, #8
 800083a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	615a      	str	r2, [r3, #20]
          break;
 8000842:	e003      	b.n	800084c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
          break;
 8000848:	e000      	b.n	800084c <HAL_GPIO_Init+0x130>
          break;
 800084a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	2bff      	cmp	r3, #255	@ 0xff
 8000850:	d801      	bhi.n	8000856 <HAL_GPIO_Init+0x13a>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	e001      	b.n	800085a <HAL_GPIO_Init+0x13e>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3304      	adds	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	2bff      	cmp	r3, #255	@ 0xff
 8000860:	d802      	bhi.n	8000868 <HAL_GPIO_Init+0x14c>
 8000862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	e002      	b.n	800086e <HAL_GPIO_Init+0x152>
 8000868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086a:	3b08      	subs	r3, #8
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	210f      	movs	r1, #15
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	401a      	ands	r2, r3
 8000880:	6a39      	ldr	r1, [r7, #32]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	431a      	orrs	r2, r3
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 80b1 	beq.w	80009fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800089c:	4b4d      	ldr	r3, [pc, #308]	@ (80009d4 <HAL_GPIO_Init+0x2b8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a4c      	ldr	r2, [pc, #304]	@ (80009d4 <HAL_GPIO_Init+0x2b8>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b4a      	ldr	r3, [pc, #296]	@ (80009d4 <HAL_GPIO_Init+0x2b8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008b4:	4a48      	ldr	r2, [pc, #288]	@ (80009d8 <HAL_GPIO_Init+0x2bc>)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b8:	089b      	lsrs	r3, r3, #2
 80008ba:	3302      	adds	r3, #2
 80008bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	220f      	movs	r2, #15
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a40      	ldr	r2, [pc, #256]	@ (80009dc <HAL_GPIO_Init+0x2c0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d013      	beq.n	8000908 <HAL_GPIO_Init+0x1ec>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a3f      	ldr	r2, [pc, #252]	@ (80009e0 <HAL_GPIO_Init+0x2c4>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d00d      	beq.n	8000904 <HAL_GPIO_Init+0x1e8>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a3e      	ldr	r2, [pc, #248]	@ (80009e4 <HAL_GPIO_Init+0x2c8>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d007      	beq.n	8000900 <HAL_GPIO_Init+0x1e4>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <HAL_GPIO_Init+0x2cc>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d101      	bne.n	80008fc <HAL_GPIO_Init+0x1e0>
 80008f8:	2303      	movs	r3, #3
 80008fa:	e006      	b.n	800090a <HAL_GPIO_Init+0x1ee>
 80008fc:	2304      	movs	r3, #4
 80008fe:	e004      	b.n	800090a <HAL_GPIO_Init+0x1ee>
 8000900:	2302      	movs	r3, #2
 8000902:	e002      	b.n	800090a <HAL_GPIO_Init+0x1ee>
 8000904:	2301      	movs	r3, #1
 8000906:	e000      	b.n	800090a <HAL_GPIO_Init+0x1ee>
 8000908:	2300      	movs	r3, #0
 800090a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800090c:	f002 0203 	and.w	r2, r2, #3
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	4093      	lsls	r3, r2
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	4313      	orrs	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800091a:	492f      	ldr	r1, [pc, #188]	@ (80009d8 <HAL_GPIO_Init+0x2bc>)
 800091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3302      	adds	r3, #2
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000934:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	492c      	ldr	r1, [pc, #176]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	608b      	str	r3, [r1, #8]
 8000940:	e006      	b.n	8000950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000942:	4b2a      	ldr	r3, [pc, #168]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	43db      	mvns	r3, r3
 800094a:	4928      	ldr	r1, [pc, #160]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 800094c:	4013      	ands	r3, r2
 800094e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800095c:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	4922      	ldr	r1, [pc, #136]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	4313      	orrs	r3, r2
 8000966:	60cb      	str	r3, [r1, #12]
 8000968:	e006      	b.n	8000978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	43db      	mvns	r3, r3
 8000972:	491e      	ldr	r1, [pc, #120]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 8000974:	4013      	ands	r3, r2
 8000976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d006      	beq.n	8000992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	4918      	ldr	r1, [pc, #96]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	4313      	orrs	r3, r2
 800098e:	604b      	str	r3, [r1, #4]
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	43db      	mvns	r3, r3
 800099a:	4914      	ldr	r1, [pc, #80]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 800099c:	4013      	ands	r3, r2
 800099e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d021      	beq.n	80009f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	490e      	ldr	r1, [pc, #56]	@ (80009ec <HAL_GPIO_Init+0x2d0>)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	600b      	str	r3, [r1, #0]
 80009b8:	e021      	b.n	80009fe <HAL_GPIO_Init+0x2e2>
 80009ba:	bf00      	nop
 80009bc:	10320000 	.word	0x10320000
 80009c0:	10310000 	.word	0x10310000
 80009c4:	10220000 	.word	0x10220000
 80009c8:	10210000 	.word	0x10210000
 80009cc:	10120000 	.word	0x10120000
 80009d0:	10110000 	.word	0x10110000
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010000 	.word	0x40010000
 80009dc:	40010800 	.word	0x40010800
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	40011000 	.word	0x40011000
 80009e8:	40011400 	.word	0x40011400
 80009ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <HAL_GPIO_Init+0x304>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4909      	ldr	r1, [pc, #36]	@ (8000a20 <HAL_GPIO_Init+0x304>)
 80009fa:	4013      	ands	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	3301      	adds	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f47f ae8e 	bne.w	8000730 <HAL_GPIO_Init+0x14>
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	372c      	adds	r7, #44	@ 0x2c
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40010400 	.word	0x40010400

08000a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	807b      	strh	r3, [r7, #2]
 8000a30:	4613      	mov	r3, r2
 8000a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a34:	787b      	ldrb	r3, [r7, #1]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a3a:	887a      	ldrh	r2, [r7, #2]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a40:	e003      	b.n	8000a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a42:	887b      	ldrh	r3, [r7, #2]
 8000a44:	041a      	lsls	r2, r3, #16
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	611a      	str	r2, [r3, #16]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e272      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8087 	beq.w	8000b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a74:	4b92      	ldr	r3, [pc, #584]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 030c 	and.w	r3, r3, #12
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d00c      	beq.n	8000a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a80:	4b8f      	ldr	r3, [pc, #572]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	d112      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x5e>
 8000a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a98:	d10b      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9a:	4b89      	ldr	r3, [pc, #548]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d06c      	beq.n	8000b80 <HAL_RCC_OscConfig+0x12c>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d168      	bne.n	8000b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e24c      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aba:	d106      	bne.n	8000aca <HAL_RCC_OscConfig+0x76>
 8000abc:	4b80      	ldr	r3, [pc, #512]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a7f      	ldr	r2, [pc, #508]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e02e      	b.n	8000b28 <HAL_RCC_OscConfig+0xd4>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10c      	bne.n	8000aec <HAL_RCC_OscConfig+0x98>
 8000ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a7a      	ldr	r2, [pc, #488]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	4b78      	ldr	r3, [pc, #480]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a77      	ldr	r2, [pc, #476]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e01d      	b.n	8000b28 <HAL_RCC_OscConfig+0xd4>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000af4:	d10c      	bne.n	8000b10 <HAL_RCC_OscConfig+0xbc>
 8000af6:	4b72      	ldr	r3, [pc, #456]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a71      	ldr	r2, [pc, #452]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b6f      	ldr	r3, [pc, #444]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a6e      	ldr	r2, [pc, #440]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e00b      	b.n	8000b28 <HAL_RCC_OscConfig+0xd4>
 8000b10:	4b6b      	ldr	r3, [pc, #428]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a6a      	ldr	r2, [pc, #424]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b68      	ldr	r3, [pc, #416]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a67      	ldr	r2, [pc, #412]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d013      	beq.n	8000b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b30:	f7ff fd06 	bl	8000540 <HAL_GetTick>
 8000b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b36:	e008      	b.n	8000b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b38:	f7ff fd02 	bl	8000540 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b64      	cmp	r3, #100	@ 0x64
 8000b44:	d901      	bls.n	8000b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e200      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f0      	beq.n	8000b38 <HAL_RCC_OscConfig+0xe4>
 8000b56:	e014      	b.n	8000b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b58:	f7ff fcf2 	bl	8000540 <HAL_GetTick>
 8000b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b5e:	e008      	b.n	8000b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b60:	f7ff fcee 	bl	8000540 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b64      	cmp	r3, #100	@ 0x64
 8000b6c:	d901      	bls.n	8000b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e1ec      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b72:	4b53      	ldr	r3, [pc, #332]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f0      	bne.n	8000b60 <HAL_RCC_OscConfig+0x10c>
 8000b7e:	e000      	b.n	8000b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d063      	beq.n	8000c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00b      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b9a:	4b49      	ldr	r3, [pc, #292]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d11c      	bne.n	8000be0 <HAL_RCC_OscConfig+0x18c>
 8000ba6:	4b46      	ldr	r3, [pc, #280]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d116      	bne.n	8000be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb2:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <HAL_RCC_OscConfig+0x176>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d001      	beq.n	8000bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e1c0      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bca:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	4939      	ldr	r1, [pc, #228]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bde:	e03a      	b.n	8000c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d020      	beq.n	8000c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000be8:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <HAL_RCC_OscConfig+0x270>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bee:	f7ff fca7 	bl	8000540 <HAL_GetTick>
 8000bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf4:	e008      	b.n	8000c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf6:	f7ff fca3 	bl	8000540 <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d901      	bls.n	8000c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e1a1      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c08:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0f0      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	4927      	ldr	r1, [pc, #156]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	600b      	str	r3, [r1, #0]
 8000c28:	e015      	b.n	8000c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <HAL_RCC_OscConfig+0x270>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fc86 	bl	8000540 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c38:	f7ff fc82 	bl	8000540 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e180      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d03a      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d019      	beq.n	8000c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <HAL_RCC_OscConfig+0x274>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c70:	f7ff fc66 	bl	8000540 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff fc62 	bl	8000540 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e160      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f000 fa9c 	bl	80011d4 <RCC_Delay>
 8000c9c:	e01c      	b.n	8000cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_RCC_OscConfig+0x274>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca4:	f7ff fc4c 	bl	8000540 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000caa:	e00f      	b.n	8000ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc48 	bl	8000540 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d908      	bls.n	8000ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e146      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	42420000 	.word	0x42420000
 8000cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ccc:	4b92      	ldr	r3, [pc, #584]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1e9      	bne.n	8000cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80a6 	beq.w	8000e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cea:	4b8b      	ldr	r3, [pc, #556]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10d      	bne.n	8000d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b88      	ldr	r3, [pc, #544]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a87      	ldr	r2, [pc, #540]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b85      	ldr	r3, [pc, #532]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d12:	4b82      	ldr	r3, [pc, #520]	@ (8000f1c <HAL_RCC_OscConfig+0x4c8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d118      	bne.n	8000d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f1c <HAL_RCC_OscConfig+0x4c8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a7e      	ldr	r2, [pc, #504]	@ (8000f1c <HAL_RCC_OscConfig+0x4c8>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fc09 	bl	8000540 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d32:	f7ff fc05 	bl	8000540 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b64      	cmp	r3, #100	@ 0x64
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e103      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d44:	4b75      	ldr	r3, [pc, #468]	@ (8000f1c <HAL_RCC_OscConfig+0x4c8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d106      	bne.n	8000d66 <HAL_RCC_OscConfig+0x312>
 8000d58:	4b6f      	ldr	r3, [pc, #444]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6213      	str	r3, [r2, #32]
 8000d64:	e02d      	b.n	8000dc2 <HAL_RCC_OscConfig+0x36e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x334>
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4a69      	ldr	r2, [pc, #420]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	6213      	str	r3, [r2, #32]
 8000d7a:	4b67      	ldr	r3, [pc, #412]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a66      	ldr	r2, [pc, #408]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d80:	f023 0304 	bic.w	r3, r3, #4
 8000d84:	6213      	str	r3, [r2, #32]
 8000d86:	e01c      	b.n	8000dc2 <HAL_RCC_OscConfig+0x36e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d10c      	bne.n	8000daa <HAL_RCC_OscConfig+0x356>
 8000d90:	4b61      	ldr	r3, [pc, #388]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4a60      	ldr	r2, [pc, #384]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6213      	str	r3, [r2, #32]
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	4a5d      	ldr	r2, [pc, #372]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6213      	str	r3, [r2, #32]
 8000da8:	e00b      	b.n	8000dc2 <HAL_RCC_OscConfig+0x36e>
 8000daa:	4b5b      	ldr	r3, [pc, #364]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	4a5a      	ldr	r2, [pc, #360]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	6213      	str	r3, [r2, #32]
 8000db6:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	4a57      	ldr	r2, [pc, #348]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000dbc:	f023 0304 	bic.w	r3, r3, #4
 8000dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d015      	beq.n	8000df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fbb9 	bl	8000540 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd0:	e00a      	b.n	8000de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fbb5 	bl	8000540 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e0b1      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de8:	4b4b      	ldr	r3, [pc, #300]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0ee      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x37e>
 8000df4:	e014      	b.n	8000e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fba3 	bl	8000540 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fb9f 	bl	8000540 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e09b      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e14:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ee      	bne.n	8000dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d105      	bne.n	8000e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8087 	beq.w	8000f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e3c:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d061      	beq.n	8000f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d146      	bne.n	8000ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e50:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <HAL_RCC_OscConfig+0x4cc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fb73 	bl	8000540 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e5e:	f7ff fb6f 	bl	8000540 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e06d      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e70:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e84:	d108      	bne.n	8000e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	4921      	ldr	r1, [pc, #132]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a19      	ldr	r1, [r3, #32]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	491b      	ldr	r1, [pc, #108]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <HAL_RCC_OscConfig+0x4cc>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fb43 	bl	8000540 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ebe:	f7ff fb3f 	bl	8000540 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e03d      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x46a>
 8000edc:	e035      	b.n	8000f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_RCC_OscConfig+0x4cc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fb2c 	bl	8000540 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eec:	f7ff fb28 	bl	8000540 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e026      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x498>
 8000f0a:	e01e      	b.n	8000f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d107      	bne.n	8000f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e019      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_RCC_OscConfig+0x500>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d001      	beq.n	8000f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0d0      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d910      	bls.n	8000f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7a:	4b67      	ldr	r3, [pc, #412]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 0207 	bic.w	r2, r3, #7
 8000f82:	4965      	ldr	r1, [pc, #404]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8a:	4b63      	ldr	r3, [pc, #396]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d001      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0b8      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d020      	beq.n	8000fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb4:	4b59      	ldr	r3, [pc, #356]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a58      	ldr	r2, [pc, #352]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fcc:	4b53      	ldr	r3, [pc, #332]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd8:	4b50      	ldr	r3, [pc, #320]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	494d      	ldr	r1, [pc, #308]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d040      	beq.n	8001078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b47      	ldr	r3, [pc, #284]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d115      	bne.n	8001036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e07f      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d107      	bne.n	8001026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001016:	4b41      	ldr	r3, [pc, #260]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d109      	bne.n	8001036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e073      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	4b3d      	ldr	r3, [pc, #244]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e06b      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001036:	4b39      	ldr	r3, [pc, #228]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f023 0203 	bic.w	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4936      	ldr	r1, [pc, #216]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001048:	f7ff fa7a 	bl	8000540 <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	e00a      	b.n	8001066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001050:	f7ff fa76 	bl	8000540 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800105e:	4293      	cmp	r3, r2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e053      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 020c 	and.w	r2, r3, #12
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	429a      	cmp	r2, r3
 8001076:	d1eb      	bne.n	8001050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d210      	bcs.n	80010a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 0207 	bic.w	r2, r3, #7
 800108e:	4922      	ldr	r1, [pc, #136]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <HAL_RCC_ClockConfig+0x1c0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e032      	b.n	800110e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4916      	ldr	r1, [pc, #88]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	490e      	ldr	r1, [pc, #56]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010e6:	f000 f821 	bl	800112c <HAL_RCC_GetSysClockFreq>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	490a      	ldr	r1, [pc, #40]	@ (8001120 <HAL_RCC_ClockConfig+0x1c8>)
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <HAL_RCC_ClockConfig+0x1cc>)
 8001100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_RCC_ClockConfig+0x1d0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f9d8 	bl	80004bc <HAL_InitTick>

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000
 800111c:	40021000 	.word	0x40021000
 8001120:	08003b68 	.word	0x08003b68
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001146:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b04      	cmp	r3, #4
 8001154:	d002      	beq.n	800115c <HAL_RCC_GetSysClockFreq+0x30>
 8001156:	2b08      	cmp	r3, #8
 8001158:	d003      	beq.n	8001162 <HAL_RCC_GetSysClockFreq+0x36>
 800115a:	e027      	b.n	80011ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800115e:	613b      	str	r3, [r7, #16]
      break;
 8001160:	e027      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	0c9b      	lsrs	r3, r3, #18
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800116c:	5cd3      	ldrb	r3, [r2, r3]
 800116e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d010      	beq.n	800119c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	0c5b      	lsrs	r3, r3, #17
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800118e:	fb03 f202 	mul.w	r2, r3, r2
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	fbb2 f3f3 	udiv	r3, r2, r3
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e004      	b.n	80011a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	613b      	str	r3, [r7, #16]
      break;
 80011aa:	e002      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80011ae:	613b      	str	r3, [r7, #16]
      break;
 80011b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011b2:	693b      	ldr	r3, [r7, #16]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	007a1200 	.word	0x007a1200
 80011c8:	08003b78 	.word	0x08003b78
 80011cc:	08003b88 	.word	0x08003b88
 80011d0:	003d0900 	.word	0x003d0900

080011d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <RCC_Delay+0x34>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <RCC_Delay+0x38>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0a5b      	lsrs	r3, r3, #9
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011f0:	bf00      	nop
  }
  while (Delay --);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	60fa      	str	r2, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f9      	bne.n	80011f0 <RCC_Delay+0x1c>
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000000 	.word	0x20000000
 800120c:	10624dd3 	.word	0x10624dd3

08001210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <vApplicationGetIdleTaskMemory+0x28>)
 8001220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4a05      	ldr	r2, [pc, #20]	@ (800123c <vApplicationGetIdleTaskMemory+0x2c>)
 8001226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2280      	movs	r2, #128	@ 0x80
 800122c:	601a      	str	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000038 	.word	0x20000038
 800123c:	20000094 	.word	0x20000094

08001240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a07      	ldr	r2, [pc, #28]	@ (800126c <vApplicationGetTimerTaskMemory+0x2c>)
 8001250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <vApplicationGetTimerTaskMemory+0x30>)
 8001256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000294 	.word	0x20000294
 8001270:	200002f0 	.word	0x200002f0

08001274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 0208 	add.w	r2, r3, #8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f103 0208 	add.w	r2, r3, #8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f103 0208 	add.w	r2, r3, #8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	d103      	bne.n	8001330 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e00c      	b.n	800134a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3308      	adds	r3, #8
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e002      	b.n	800133e <vListInsert+0x2e>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d2f6      	bcs.n	8001338 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6892      	ldr	r2, [r2, #8]
 8001396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6852      	ldr	r2, [r2, #4]
 80013a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d103      	bne.n	80013b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
	...

080013d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10b      	bne.n	8001400 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001400:	f002 f86c 	bl	80034dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	441a      	add	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001430:	3b01      	subs	r3, #1
 8001432:	68f9      	ldr	r1, [r7, #12]
 8001434:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	441a      	add	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	22ff      	movs	r2, #255	@ 0xff
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d114      	bne.n	8001480 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01a      	beq.n	8001494 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3310      	adds	r3, #16
 8001462:	4618      	mov	r0, r3
 8001464:	f001 f952 	bl	800270c <xTaskRemoveFromEventList>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <xQueueGenericReset+0xd0>)
 8001470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f3bf 8f4f 	dsb	sy
 800147a:	f3bf 8f6f 	isb	sy
 800147e:	e009      	b.n	8001494 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3310      	adds	r3, #16
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fef5 	bl	8001274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3324      	adds	r3, #36	@ 0x24
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fef0 	bl	8001274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001494:	f002 f852 	bl	800353c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000ed04 	.word	0xe000ed04

080014a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	@ 0x38
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10b      	bne.n	80014d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80014bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014c0:	f383 8811 	msr	BASEPRI, r3
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10b      	bne.n	80014f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80014da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	e7fd      	b.n	80014ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <xQueueGenericCreateStatic+0x56>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <xQueueGenericCreateStatic+0x5a>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <xQueueGenericCreateStatic+0x5c>
 8001502:	2300      	movs	r3, #0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10b      	bne.n	8001520 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800150c:	f383 8811 	msr	BASEPRI, r3
 8001510:	f3bf 8f6f 	isb	sy
 8001514:	f3bf 8f4f 	dsb	sy
 8001518:	623b      	str	r3, [r7, #32]
}
 800151a:	bf00      	nop
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <xQueueGenericCreateStatic+0x84>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <xQueueGenericCreateStatic+0x88>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <xQueueGenericCreateStatic+0x8a>
 8001530:	2300      	movs	r3, #0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10b      	bne.n	800154e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800153a:	f383 8811 	msr	BASEPRI, r3
 800153e:	f3bf 8f6f 	isb	sy
 8001542:	f3bf 8f4f 	dsb	sy
 8001546:	61fb      	str	r3, [r7, #28]
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	e7fd      	b.n	800154a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800154e:	2350      	movs	r3, #80	@ 0x50
 8001550:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b50      	cmp	r3, #80	@ 0x50
 8001556:	d00b      	beq.n	8001570 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	61bb      	str	r3, [r7, #24]
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001570:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00d      	beq.n	8001598 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001584:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f840 	bl	8001618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800159a:	4618      	mov	r0, r3
 800159c:	3730      	adds	r7, #48	@ 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b08a      	sub	sp, #40	@ 0x28
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10b      	bne.n	80015ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80015b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
 80015c6:	613b      	str	r3, [r7, #16]
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	e7fd      	b.n	80015ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	3350      	adds	r3, #80	@ 0x50
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f87f 	bl	80036e0 <pvPortMalloc>
 80015e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d011      	beq.n	800160e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3350      	adds	r3, #80	@ 0x50
 80015f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f805 	bl	8001618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800160e:	69bb      	ldr	r3, [r7, #24]
	}
 8001610:	4618      	mov	r0, r3
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e002      	b.n	800163a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001646:	2101      	movs	r1, #1
 8001648:	69b8      	ldr	r0, [r7, #24]
 800164a:	f7ff fec3 	bl	80013d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08e      	sub	sp, #56	@ 0x38
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800166e:	2300      	movs	r3, #0
 8001670:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <xQueueGenericSend+0x34>
	__asm volatile
 800167c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001680:	f383 8811 	msr	BASEPRI, r3
 8001684:	f3bf 8f6f 	isb	sy
 8001688:	f3bf 8f4f 	dsb	sy
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <xQueueGenericSend+0x42>
 800169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <xQueueGenericSend+0x46>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <xQueueGenericSend+0x48>
 80016a6:	2300      	movs	r3, #0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10b      	bne.n	80016c4 <xQueueGenericSend+0x64>
	__asm volatile
 80016ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d103      	bne.n	80016d2 <xQueueGenericSend+0x72>
 80016ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <xQueueGenericSend+0x76>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <xQueueGenericSend+0x78>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10b      	bne.n	80016f4 <xQueueGenericSend+0x94>
	__asm volatile
 80016dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e0:	f383 8811 	msr	BASEPRI, r3
 80016e4:	f3bf 8f6f 	isb	sy
 80016e8:	f3bf 8f4f 	dsb	sy
 80016ec:	623b      	str	r3, [r7, #32]
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80016f4:	f001 f9ca 	bl	8002a8c <xTaskGetSchedulerState>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <xQueueGenericSend+0xa4>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <xQueueGenericSend+0xa8>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <xQueueGenericSend+0xaa>
 8001708:	2300      	movs	r3, #0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10b      	bne.n	8001726 <xQueueGenericSend+0xc6>
	__asm volatile
 800170e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	61fb      	str	r3, [r7, #28]
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	e7fd      	b.n	8001722 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001726:	f001 fed9 	bl	80034dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800172a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800172e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001732:	429a      	cmp	r2, r3
 8001734:	d302      	bcc.n	800173c <xQueueGenericSend+0xdc>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d129      	bne.n	8001790 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001742:	f000 fa0f 	bl	8001b64 <prvCopyDataToQueue>
 8001746:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001752:	3324      	adds	r3, #36	@ 0x24
 8001754:	4618      	mov	r0, r3
 8001756:	f000 ffd9 	bl	800270c <xTaskRemoveFromEventList>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001760:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <xQueueGenericSend+0x200>)
 8001762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	e00a      	b.n	8001788 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001778:	4b39      	ldr	r3, [pc, #228]	@ (8001860 <xQueueGenericSend+0x200>)
 800177a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f3bf 8f4f 	dsb	sy
 8001784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001788:	f001 fed8 	bl	800353c <vPortExitCritical>
				return pdPASS;
 800178c:	2301      	movs	r3, #1
 800178e:	e063      	b.n	8001858 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001796:	f001 fed1 	bl	800353c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800179a:	2300      	movs	r3, #0
 800179c:	e05c      	b.n	8001858 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800179e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 f813 	bl	80027d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80017b2:	f001 fec3 	bl	800353c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80017b6:	f000 fd85 	bl	80022c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80017ba:	f001 fe8f 	bl	80034dc <vPortEnterCritical>
 80017be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ca:	d103      	bne.n	80017d4 <xQueueGenericSend+0x174>
 80017cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d103      	bne.n	80017ea <xQueueGenericSend+0x18a>
 80017e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80017ea:	f001 fea7 	bl	800353c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017ee:	1d3a      	adds	r2, r7, #4
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 f802 	bl	8002800 <xTaskCheckForTimeOut>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d124      	bne.n	800184c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001802:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001804:	f000 faa6 	bl	8001d54 <prvIsQueueFull>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d018      	beq.n	8001840 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001810:	3310      	adds	r3, #16
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 ff26 	bl	8002668 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800181c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800181e:	f000 fa31 	bl	8001c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001822:	f000 fd5d 	bl	80022e0 <xTaskResumeAll>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	f47f af7c 	bne.w	8001726 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <xQueueGenericSend+0x200>)
 8001830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	f3bf 8f6f 	isb	sy
 800183e:	e772      	b.n	8001726 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001842:	f000 fa1f 	bl	8001c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001846:	f000 fd4b 	bl	80022e0 <xTaskResumeAll>
 800184a:	e76c      	b.n	8001726 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800184c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800184e:	f000 fa19 	bl	8001c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001852:	f000 fd45 	bl	80022e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001858:	4618      	mov	r0, r3
 800185a:	3738      	adds	r7, #56	@ 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	e000ed04 	.word	0xe000ed04

08001864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b090      	sub	sp, #64	@ 0x40
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800187c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001880:	f383 8811 	msr	BASEPRI, r3
 8001884:	f3bf 8f6f 	isb	sy
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <xQueueGenericSendFromISR+0x3e>
 800189a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <xQueueGenericSendFromISR+0x42>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <xQueueGenericSendFromISR+0x44>
 80018a6:	2300      	movs	r3, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10b      	bne.n	80018c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80018ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d103      	bne.n	80018d2 <xQueueGenericSendFromISR+0x6e>
 80018ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <xQueueGenericSendFromISR+0x72>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <xQueueGenericSendFromISR+0x74>
 80018d6:	2300      	movs	r3, #0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10b      	bne.n	80018f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80018dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	623b      	str	r3, [r7, #32]
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80018f4:	f001 feb4 	bl	8003660 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80018f8:	f3ef 8211 	mrs	r2, BASEPRI
 80018fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	61fa      	str	r2, [r7, #28]
 800190e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001910:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	429a      	cmp	r2, r3
 800191e:	d302      	bcc.n	8001926 <xQueueGenericSendFromISR+0xc2>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d12f      	bne.n	8001986 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800192c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800193c:	f000 f912 	bl	8001b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001940:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d112      	bne.n	8001970 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	2b00      	cmp	r3, #0
 8001950:	d016      	beq.n	8001980 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001954:	3324      	adds	r3, #36	@ 0x24
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fed8 	bl	800270c <xTaskRemoveFromEventList>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00e      	beq.n	8001980 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e007      	b.n	8001980 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800197c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001980:	2301      	movs	r3, #1
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001984:	e001      	b.n	800198a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800198a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001994:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001998:	4618      	mov	r0, r3
 800199a:	3740      	adds	r7, #64	@ 0x40
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	@ 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80019b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10b      	bne.n	80019d2 <xQueueReceive+0x32>
	__asm volatile
 80019ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	623b      	str	r3, [r7, #32]
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	e7fd      	b.n	80019ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <xQueueReceive+0x40>
 80019d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <xQueueReceive+0x44>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <xQueueReceive+0x46>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10b      	bne.n	8001a02 <xQueueReceive+0x62>
	__asm volatile
 80019ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	61fb      	str	r3, [r7, #28]
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	e7fd      	b.n	80019fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a02:	f001 f843 	bl	8002a8c <xTaskGetSchedulerState>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <xQueueReceive+0x72>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <xQueueReceive+0x76>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <xQueueReceive+0x78>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <xQueueReceive+0x94>
	__asm volatile
 8001a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a20:	f383 8811 	msr	BASEPRI, r3
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	61bb      	str	r3, [r7, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a34:	f001 fd52 	bl	80034dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01f      	beq.n	8001a84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a48:	f000 f8f6 	bl	8001c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	1e5a      	subs	r2, r3, #1
 8001a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00f      	beq.n	8001a7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5e:	3310      	adds	r3, #16
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fe53 	bl	800270c <xTaskRemoveFromEventList>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <xQueueReceive+0x1c0>)
 8001a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001a7c:	f001 fd5e 	bl	800353c <vPortExitCritical>
				return pdPASS;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e069      	b.n	8001b58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d103      	bne.n	8001a92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a8a:	f001 fd57 	bl	800353c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e062      	b.n	8001b58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fe99 	bl	80027d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001aa6:	f001 fd49 	bl	800353c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001aaa:	f000 fc0b 	bl	80022c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001aae:	f001 fd15 	bl	80034dc <vPortEnterCritical>
 8001ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abe:	d103      	bne.n	8001ac8 <xQueueReceive+0x128>
 8001ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d103      	bne.n	8001ade <xQueueReceive+0x13e>
 8001ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ade:	f001 fd2d 	bl	800353c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ae2:	1d3a      	adds	r2, r7, #4
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fe88 	bl	8002800 <xTaskCheckForTimeOut>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d123      	bne.n	8001b3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001af8:	f000 f916 	bl	8001d28 <prvIsQueueEmpty>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d017      	beq.n	8001b32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b04:	3324      	adds	r3, #36	@ 0x24
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fdac 	bl	8002668 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b12:	f000 f8b7 	bl	8001c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b16:	f000 fbe3 	bl	80022e0 <xTaskResumeAll>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d189      	bne.n	8001a34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <xQueueReceive+0x1c0>)
 8001b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	e780      	b.n	8001a34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b34:	f000 f8a6 	bl	8001c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b38:	f000 fbd2 	bl	80022e0 <xTaskResumeAll>
 8001b3c:	e77a      	b.n	8001a34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b40:	f000 f8a0 	bl	8001c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b44:	f000 fbcc 	bl	80022e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b4a:	f000 f8ed 	bl	8001d28 <prvIsQueueEmpty>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f43f af6f 	beq.w	8001a34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3730      	adds	r7, #48	@ 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	e000ed04 	.word	0xe000ed04

08001b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d14d      	bne.n	8001c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 ff9a 	bl	8002ac8 <xTaskPriorityDisinherit>
 8001b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e043      	b.n	8001c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d119      	bne.n	8001bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6858      	ldr	r0, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	461a      	mov	r2, r3
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	f001 ffae 	bl	8003b10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	441a      	add	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d32b      	bcc.n	8001c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e026      	b.n	8001c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	68d8      	ldr	r0, [r3, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	461a      	mov	r2, r3
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	f001 ff94 	bl	8003b10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	441a      	add	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	441a      	add	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d105      	bne.n	8001c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001c2e:	697b      	ldr	r3, [r7, #20]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d018      	beq.n	8001c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	441a      	add	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d303      	bcc.n	8001c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68d9      	ldr	r1, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	461a      	mov	r2, r3
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f001 ff4a 	bl	8003b10 <memcpy>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001c8c:	f001 fc26 	bl	80034dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c98:	e011      	b.n	8001cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3324      	adds	r3, #36	@ 0x24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fd30 	bl	800270c <xTaskRemoveFromEventList>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001cb2:	f000 fe09 	bl	80028c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	dce9      	bgt.n	8001c9a <prvUnlockQueue+0x16>
 8001cc6:	e000      	b.n	8001cca <prvUnlockQueue+0x46>
					break;
 8001cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	22ff      	movs	r2, #255	@ 0xff
 8001cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001cd2:	f001 fc33 	bl	800353c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001cd6:	f001 fc01 	bl	80034dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ce2:	e011      	b.n	8001d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d012      	beq.n	8001d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3310      	adds	r3, #16
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fd0b 	bl	800270c <xTaskRemoveFromEventList>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001cfc:	f000 fde4 	bl	80028c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	dce9      	bgt.n	8001ce4 <prvUnlockQueue+0x60>
 8001d10:	e000      	b.n	8001d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	22ff      	movs	r2, #255	@ 0xff
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001d1c:	f001 fc0e 	bl	800353c <vPortExitCritical>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d30:	f001 fbd4 	bl	80034dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e001      	b.n	8001d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001d46:	f001 fbf9 	bl	800353c <vPortExitCritical>

	return xReturn;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d5c:	f001 fbbe 	bl	80034dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d102      	bne.n	8001d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e001      	b.n	8001d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001d76:	f001 fbe1 	bl	800353c <vPortExitCritical>

	return xReturn;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e014      	b.n	8001dbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001d94:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd0 <vQueueAddToRegistry+0x4c>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001da0:	490b      	ldr	r1, [pc, #44]	@ (8001dd0 <vQueueAddToRegistry+0x4c>)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <vQueueAddToRegistry+0x4c>)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001db6:	e006      	b.n	8001dc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	d9e7      	bls.n	8001d94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	200006f0 	.word	0x200006f0

08001dd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001de4:	f001 fb7a 	bl	80034dc <vPortEnterCritical>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d103      	bne.n	8001dfe <vQueueWaitForMessageRestricted+0x2a>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0a:	d103      	bne.n	8001e14 <vQueueWaitForMessageRestricted+0x40>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e14:	f001 fb92 	bl	800353c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3324      	adds	r3, #36	@ 0x24
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fc43 	bl	80026b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff28 	bl	8001c84 <prvUnlockQueue>
	}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	@ 0x38
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8001e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	f3bf 8f4f 	dsb	sy
 8001e60:	623b      	str	r3, [r7, #32]
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10b      	bne.n	8001e86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e72:	f383 8811 	msr	BASEPRI, r3
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	61fb      	str	r3, [r7, #28]
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	e7fd      	b.n	8001e82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e86:	235c      	movs	r3, #92	@ 0x5c
 8001e88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e8e:	d00b      	beq.n	8001ea8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	61bb      	str	r3, [r7, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ea8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01e      	beq.n	8001eee <xTaskCreateStatic+0xb2>
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01b      	beq.n	8001eee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9303      	str	r3, [sp, #12]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f850 	bl	8001f86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ee8:	f000 f8de 	bl	80020a8 <prvAddNewTaskToReadyList>
 8001eec:	e001      	b.n	8001ef2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001ef2:	697b      	ldr	r3, [r7, #20]
	}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af04      	add	r7, sp, #16
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fbe5 	bl	80036e0 <pvPortMalloc>
 8001f16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00e      	beq.n	8001f3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f1e:	205c      	movs	r0, #92	@ 0x5c
 8001f20:	f001 fbde 	bl	80036e0 <pvPortMalloc>
 8001f24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f32:	e005      	b.n	8001f40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f34:	6978      	ldr	r0, [r7, #20]
 8001f36:	f001 fca1 	bl	800387c <vPortFree>
 8001f3a:	e001      	b.n	8001f40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d017      	beq.n	8001f76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f4e:	88fa      	ldrh	r2, [r7, #6]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9303      	str	r3, [sp, #12]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f80e 	bl	8001f86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f6a:	69f8      	ldr	r0, [r7, #28]
 8001f6c:	f000 f89c 	bl	80020a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f70:	2301      	movs	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e002      	b.n	8001f7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
	}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b088      	sub	sp, #32
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	21a5      	movs	r1, #165	@ 0xa5
 8001fa0:	f001 fd8a 	bl	8003ab8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f023 0307 	bic.w	r3, r3, #7
 8001fbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	617b      	str	r3, [r7, #20]
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01f      	beq.n	8002026 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e012      	b.n	8002012 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	7819      	ldrb	r1, [r3, #0]
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3334      	adds	r3, #52	@ 0x34
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d9e9      	bls.n	8001fec <prvInitialiseNewTask+0x66>
 8002018:	e000      	b.n	800201c <prvInitialiseNewTask+0x96>
			{
				break;
 800201a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002024:	e003      	b.n	800202e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002030:	2b37      	cmp	r3, #55	@ 0x37
 8002032:	d901      	bls.n	8002038 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002034:	2337      	movs	r3, #55	@ 0x37
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800203c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002042:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002046:	2200      	movs	r2, #0
 8002048:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800204a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204c:	3304      	adds	r3, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f92f 	bl	80012b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	3318      	adds	r3, #24
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f92a 	bl	80012b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002062:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800206e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002076:	2200      	movs	r2, #0
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800207a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	69b8      	ldr	r0, [r7, #24]
 8002088:	f001 f93a 	bl	8003300 <pxPortInitialiseStack>
 800208c:	4602      	mov	r2, r0
 800208e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002090:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800209c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020b0:	f001 fa14 	bl	80034dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <prvAddNewTaskToReadyList+0xc4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <prvAddNewTaskToReadyList+0xc4>)
 80020bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <prvAddNewTaskToReadyList+0xc8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002170 <prvAddNewTaskToReadyList+0xc8>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <prvAddNewTaskToReadyList+0xc4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d110      	bne.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80020d4:	f000 fc1c 	bl	8002910 <prvInitialiseTaskLists>
 80020d8:	e00d      	b.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80020da:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <prvAddNewTaskToReadyList+0xcc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <prvAddNewTaskToReadyList+0xc8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d802      	bhi.n	80020f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80020f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <prvAddNewTaskToReadyList+0xc8>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <prvAddNewTaskToReadyList+0xd0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002178 <prvAddNewTaskToReadyList+0xd0>)
 80020fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <prvAddNewTaskToReadyList+0xd0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <prvAddNewTaskToReadyList+0xd4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d903      	bls.n	800211c <prvAddNewTaskToReadyList+0x74>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	4a18      	ldr	r2, [pc, #96]	@ (800217c <prvAddNewTaskToReadyList+0xd4>)
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4a15      	ldr	r2, [pc, #84]	@ (8002180 <prvAddNewTaskToReadyList+0xd8>)
 800212a:	441a      	add	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f7ff f8c9 	bl	80012ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002138:	f001 fa00 	bl	800353c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <prvAddNewTaskToReadyList+0xcc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <prvAddNewTaskToReadyList+0xc8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	429a      	cmp	r2, r3
 8002150:	d207      	bcs.n	8002162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <prvAddNewTaskToReadyList+0xdc>)
 8002154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000c04 	.word	0x20000c04
 8002170:	20000730 	.word	0x20000730
 8002174:	20000c10 	.word	0x20000c10
 8002178:	20000c20 	.word	0x20000c20
 800217c:	20000c0c 	.word	0x20000c0c
 8002180:	20000734 	.word	0x20000734
 8002184:	e000ed04 	.word	0xe000ed04

08002188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d018      	beq.n	80021cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800219a:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <vTaskDelay+0x64>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <vTaskDelay+0x32>
	__asm volatile
 80021a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	60bb      	str	r3, [r7, #8]
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	e7fd      	b.n	80021b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80021ba:	f000 f883 	bl	80022c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fcf1 	bl	8002ba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021c6:	f000 f88b 	bl	80022e0 <xTaskResumeAll>
 80021ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d107      	bne.n	80021e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <vTaskDelay+0x68>)
 80021d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000c2c 	.word	0x20000c2c
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002202:	463a      	mov	r2, r7
 8002204:	1d39      	adds	r1, r7, #4
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f800 	bl	8001210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	9202      	str	r2, [sp, #8]
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2300      	movs	r3, #0
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	460a      	mov	r2, r1
 8002222:	4922      	ldr	r1, [pc, #136]	@ (80022ac <vTaskStartScheduler+0xb8>)
 8002224:	4822      	ldr	r0, [pc, #136]	@ (80022b0 <vTaskStartScheduler+0xbc>)
 8002226:	f7ff fe09 	bl	8001e3c <xTaskCreateStatic>
 800222a:	4603      	mov	r3, r0
 800222c:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <vTaskStartScheduler+0xc0>)
 800222e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002230:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <vTaskStartScheduler+0xc0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002238:	2301      	movs	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e001      	b.n	8002242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002248:	f000 fd02 	bl	8002c50 <xTimerCreateTimerTask>
 800224c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d116      	bne.n	8002282 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	613b      	str	r3, [r7, #16]
}
 8002266:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <vTaskStartScheduler+0xc4>)
 800226a:	f04f 32ff 	mov.w	r2, #4294967295
 800226e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <vTaskStartScheduler+0xc8>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <vTaskStartScheduler+0xcc>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800227c:	f001 f8bc 	bl	80033f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002280:	e00f      	b.n	80022a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d10b      	bne.n	80022a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	60fb      	str	r3, [r7, #12]
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <vTaskStartScheduler+0xaa>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08003b50 	.word	0x08003b50
 80022b0:	080028e1 	.word	0x080028e1
 80022b4:	20000c28 	.word	0x20000c28
 80022b8:	20000c24 	.word	0x20000c24
 80022bc:	20000c10 	.word	0x20000c10
 80022c0:	20000c08 	.word	0x20000c08

080022c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <vTaskSuspendAll+0x18>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a03      	ldr	r2, [pc, #12]	@ (80022dc <vTaskSuspendAll+0x18>)
 80022d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000c2c 	.word	0x20000c2c

080022e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80022ee:	4b42      	ldr	r3, [pc, #264]	@ (80023f8 <xTaskResumeAll+0x118>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <xTaskResumeAll+0x2e>
	__asm volatile
 80022f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	603b      	str	r3, [r7, #0]
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	e7fd      	b.n	800230a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800230e:	f001 f8e5 	bl	80034dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002312:	4b39      	ldr	r3, [pc, #228]	@ (80023f8 <xTaskResumeAll+0x118>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	4a37      	ldr	r2, [pc, #220]	@ (80023f8 <xTaskResumeAll+0x118>)
 800231a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800231c:	4b36      	ldr	r3, [pc, #216]	@ (80023f8 <xTaskResumeAll+0x118>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d162      	bne.n	80023ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <xTaskResumeAll+0x11c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05e      	beq.n	80023ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800232c:	e02f      	b.n	800238e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800232e:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <xTaskResumeAll+0x120>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3318      	adds	r3, #24
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f820 	bl	8001380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f81b 	bl	8001380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234e:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <xTaskResumeAll+0x124>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d903      	bls.n	800235e <xTaskResumeAll+0x7e>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	4a2a      	ldr	r2, [pc, #168]	@ (8002404 <xTaskResumeAll+0x124>)
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <xTaskResumeAll+0x128>)
 800236c:	441a      	add	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7fe ffa8 	bl	80012ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237e:	4b23      	ldr	r3, [pc, #140]	@ (800240c <xTaskResumeAll+0x12c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d302      	bcc.n	800238e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002388:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <xTaskResumeAll+0x130>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <xTaskResumeAll+0x120>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1cb      	bne.n	800232e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800239c:	f000 fb56 	bl	8002a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <xTaskResumeAll+0x134>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023ac:	f000 f844 	bl	8002438 <xTaskIncrementTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80023b6:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <xTaskResumeAll+0x130>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f1      	bne.n	80023ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <xTaskResumeAll+0x134>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <xTaskResumeAll+0x130>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <xTaskResumeAll+0x138>)
 80023dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023ea:	f001 f8a7 	bl	800353c <vPortExitCritical>

	return xAlreadyYielded;
 80023ee:	68bb      	ldr	r3, [r7, #8]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000c2c 	.word	0x20000c2c
 80023fc:	20000c04 	.word	0x20000c04
 8002400:	20000bc4 	.word	0x20000bc4
 8002404:	20000c0c 	.word	0x20000c0c
 8002408:	20000734 	.word	0x20000734
 800240c:	20000730 	.word	0x20000730
 8002410:	20000c18 	.word	0x20000c18
 8002414:	20000c14 	.word	0x20000c14
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002422:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <xTaskGetTickCount+0x18>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000c08 	.word	0x20000c08

08002438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002442:	4b4f      	ldr	r3, [pc, #316]	@ (8002580 <xTaskIncrementTick+0x148>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8090 	bne.w	800256c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800244c:	4b4d      	ldr	r3, [pc, #308]	@ (8002584 <xTaskIncrementTick+0x14c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002454:	4a4b      	ldr	r2, [pc, #300]	@ (8002584 <xTaskIncrementTick+0x14c>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d121      	bne.n	80024a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002460:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <xTaskIncrementTick+0x150>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <xTaskIncrementTick+0x4a>
	__asm volatile
 800246a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	603b      	str	r3, [r7, #0]
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	e7fd      	b.n	800247e <xTaskIncrementTick+0x46>
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <xTaskIncrementTick+0x150>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	4b40      	ldr	r3, [pc, #256]	@ (800258c <xTaskIncrementTick+0x154>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3e      	ldr	r2, [pc, #248]	@ (8002588 <xTaskIncrementTick+0x150>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4a3e      	ldr	r2, [pc, #248]	@ (800258c <xTaskIncrementTick+0x154>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b3e      	ldr	r3, [pc, #248]	@ (8002590 <xTaskIncrementTick+0x158>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a3c      	ldr	r2, [pc, #240]	@ (8002590 <xTaskIncrementTick+0x158>)
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	f000 fad4 	bl	8002a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <xTaskIncrementTick+0x15c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d349      	bcc.n	8002542 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024ae:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <xTaskIncrementTick+0x150>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <xTaskIncrementTick+0x15c>)
 80024ba:	f04f 32ff 	mov.w	r2, #4294967295
 80024be:	601a      	str	r2, [r3, #0]
					break;
 80024c0:	e03f      	b.n	8002542 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <xTaskIncrementTick+0x150>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d203      	bcs.n	80024e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80024da:	4a2e      	ldr	r2, [pc, #184]	@ (8002594 <xTaskIncrementTick+0x15c>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80024e0:	e02f      	b.n	8002542 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3304      	adds	r3, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe ff4a 	bl	8001380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3318      	adds	r3, #24
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe ff41 	bl	8001380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002502:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <xTaskIncrementTick+0x160>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d903      	bls.n	8002512 <xTaskIncrementTick+0xda>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <xTaskIncrementTick+0x160>)
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <xTaskIncrementTick+0x164>)
 8002520:	441a      	add	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3304      	adds	r3, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7fe fece 	bl	80012ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002532:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <xTaskIncrementTick+0x168>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d3b8      	bcc.n	80024ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002540:	e7b5      	b.n	80024ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002542:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <xTaskIncrementTick+0x168>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002548:	4914      	ldr	r1, [pc, #80]	@ (800259c <xTaskIncrementTick+0x164>)
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d901      	bls.n	800255e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <xTaskIncrementTick+0x16c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e004      	b.n	8002576 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800256c:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <xTaskIncrementTick+0x170>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <xTaskIncrementTick+0x170>)
 8002574:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002576:	697b      	ldr	r3, [r7, #20]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000c2c 	.word	0x20000c2c
 8002584:	20000c08 	.word	0x20000c08
 8002588:	20000bbc 	.word	0x20000bbc
 800258c:	20000bc0 	.word	0x20000bc0
 8002590:	20000c1c 	.word	0x20000c1c
 8002594:	20000c24 	.word	0x20000c24
 8002598:	20000c0c 	.word	0x20000c0c
 800259c:	20000734 	.word	0x20000734
 80025a0:	20000730 	.word	0x20000730
 80025a4:	20000c18 	.word	0x20000c18
 80025a8:	20000c14 	.word	0x20000c14

080025ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <vTaskSwitchContext+0xa8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025ba:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <vTaskSwitchContext+0xac>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025c0:	e042      	b.n	8002648 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80025c2:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <vTaskSwitchContext+0xac>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <vTaskSwitchContext+0xb0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e011      	b.n	80025f4 <vTaskSwitchContext+0x48>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <vTaskSwitchContext+0x42>
	__asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	607b      	str	r3, [r7, #4]
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	e7fd      	b.n	80025ea <vTaskSwitchContext+0x3e>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	491a      	ldr	r1, [pc, #104]	@ (8002660 <vTaskSwitchContext+0xb4>)
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0e3      	beq.n	80025d0 <vTaskSwitchContext+0x24>
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4a13      	ldr	r2, [pc, #76]	@ (8002660 <vTaskSwitchContext+0xb4>)
 8002614:	4413      	add	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3308      	adds	r3, #8
 800262a:	429a      	cmp	r2, r3
 800262c:	d104      	bne.n	8002638 <vTaskSwitchContext+0x8c>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a09      	ldr	r2, [pc, #36]	@ (8002664 <vTaskSwitchContext+0xb8>)
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4a06      	ldr	r2, [pc, #24]	@ (800265c <vTaskSwitchContext+0xb0>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000c2c 	.word	0x20000c2c
 8002658:	20000c18 	.word	0x20000c18
 800265c:	20000c0c 	.word	0x20000c0c
 8002660:	20000734 	.word	0x20000734
 8002664:	20000730 	.word	0x20000730

08002668 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	60fb      	str	r3, [r7, #12]
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002690:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <vTaskPlaceOnEventList+0x48>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3318      	adds	r3, #24
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe fe39 	bl	8001310 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800269e:	2101      	movs	r1, #1
 80026a0:	6838      	ldr	r0, [r7, #0]
 80026a2:	f000 fa81 	bl	8002ba8 <prvAddCurrentTaskToDelayedList>
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000730 	.word	0x20000730

080026b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10b      	bne.n	80026de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	617b      	str	r3, [r7, #20]
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	e7fd      	b.n	80026da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <vTaskPlaceOnEventListRestricted+0x54>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3318      	adds	r3, #24
 80026e4:	4619      	mov	r1, r3
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7fe fdef 	bl	80012ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68b8      	ldr	r0, [r7, #8]
 80026fc:	f000 fa54 	bl	8002ba8 <prvAddCurrentTaskToDelayedList>
	}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000730 	.word	0x20000730

0800270c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	60fb      	str	r3, [r7, #12]
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	e7fd      	b.n	8002736 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3318      	adds	r3, #24
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fe1e 	bl	8001380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <xTaskRemoveFromEventList+0xb0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11d      	bne.n	8002788 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3304      	adds	r3, #4
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fe15 	bl	8001380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800275a:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <xTaskRemoveFromEventList+0xb4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d903      	bls.n	800276a <xTaskRemoveFromEventList+0x5e>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <xTaskRemoveFromEventList+0xb4>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <xTaskRemoveFromEventList+0xb8>)
 8002778:	441a      	add	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3304      	adds	r3, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7fe fda2 	bl	80012ca <vListInsertEnd>
 8002786:	e005      	b.n	8002794 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3318      	adds	r3, #24
 800278c:	4619      	mov	r1, r3
 800278e:	480e      	ldr	r0, [pc, #56]	@ (80027c8 <xTaskRemoveFromEventList+0xbc>)
 8002790:	f7fe fd9b 	bl	80012ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <xTaskRemoveFromEventList+0xc0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	429a      	cmp	r2, r3
 80027a0:	d905      	bls.n	80027ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <xTaskRemoveFromEventList+0xc4>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e001      	b.n	80027b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80027b2:	697b      	ldr	r3, [r7, #20]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000c2c 	.word	0x20000c2c
 80027c0:	20000c0c 	.word	0x20000c0c
 80027c4:	20000734 	.word	0x20000734
 80027c8:	20000bc4 	.word	0x20000bc4
 80027cc:	20000730 	.word	0x20000730
 80027d0:	20000c18 	.word	0x20000c18

080027d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <vTaskInternalSetTimeOutState+0x24>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <vTaskInternalSetTimeOutState+0x28>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000c1c 	.word	0x20000c1c
 80027fc:	20000c08 	.word	0x20000c08

08002800 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	613b      	str	r3, [r7, #16]
}
 8002822:	bf00      	nop
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	60fb      	str	r3, [r7, #12]
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	e7fd      	b.n	8002842 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002846:	f000 fe49 	bl	80034dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <xTaskCheckForTimeOut+0xc0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d102      	bne.n	800286a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e023      	b.n	80028b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <xTaskCheckForTimeOut+0xc4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d007      	beq.n	8002886 <xTaskCheckForTimeOut+0x86>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	429a      	cmp	r2, r3
 800287e:	d302      	bcc.n	8002886 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002880:	2301      	movs	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	e015      	b.n	80028b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	d20b      	bcs.n	80028a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff99 	bl	80027d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e004      	b.n	80028b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80028b2:	f000 fe43 	bl	800353c <vPortExitCritical>

	return xReturn;
 80028b6:	69fb      	ldr	r3, [r7, #28]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000c08 	.word	0x20000c08
 80028c4:	20000c1c 	.word	0x20000c1c

080028c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <vTaskMissedYield+0x14>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000c18 	.word	0x20000c18

080028e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80028e8:	f000 f852 	bl	8002990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <prvIdleTask+0x28>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d9f9      	bls.n	80028e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <prvIdleTask+0x2c>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002904:	e7f0      	b.n	80028e8 <prvIdleTask+0x8>
 8002906:	bf00      	nop
 8002908:	20000734 	.word	0x20000734
 800290c:	e000ed04 	.word	0xe000ed04

08002910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	e00c      	b.n	8002936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4a12      	ldr	r2, [pc, #72]	@ (8002970 <prvInitialiseTaskLists+0x60>)
 8002928:	4413      	add	r3, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fca2 	bl	8001274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3301      	adds	r3, #1
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b37      	cmp	r3, #55	@ 0x37
 800293a:	d9ef      	bls.n	800291c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800293c:	480d      	ldr	r0, [pc, #52]	@ (8002974 <prvInitialiseTaskLists+0x64>)
 800293e:	f7fe fc99 	bl	8001274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002942:	480d      	ldr	r0, [pc, #52]	@ (8002978 <prvInitialiseTaskLists+0x68>)
 8002944:	f7fe fc96 	bl	8001274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <prvInitialiseTaskLists+0x6c>)
 800294a:	f7fe fc93 	bl	8001274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800294e:	480c      	ldr	r0, [pc, #48]	@ (8002980 <prvInitialiseTaskLists+0x70>)
 8002950:	f7fe fc90 	bl	8001274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <prvInitialiseTaskLists+0x74>)
 8002956:	f7fe fc8d 	bl	8001274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <prvInitialiseTaskLists+0x78>)
 800295c:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <prvInitialiseTaskLists+0x64>)
 800295e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <prvInitialiseTaskLists+0x7c>)
 8002962:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <prvInitialiseTaskLists+0x68>)
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000734 	.word	0x20000734
 8002974:	20000b94 	.word	0x20000b94
 8002978:	20000ba8 	.word	0x20000ba8
 800297c:	20000bc4 	.word	0x20000bc4
 8002980:	20000bd8 	.word	0x20000bd8
 8002984:	20000bf0 	.word	0x20000bf0
 8002988:	20000bbc 	.word	0x20000bbc
 800298c:	20000bc0 	.word	0x20000bc0

08002990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002996:	e019      	b.n	80029cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002998:	f000 fda0 	bl	80034dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800299c:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <prvCheckTasksWaitingTermination+0x50>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fce9 	bl	8001380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <prvCheckTasksWaitingTermination+0x54>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <prvCheckTasksWaitingTermination+0x54>)
 80029b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <prvCheckTasksWaitingTermination+0x58>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <prvCheckTasksWaitingTermination+0x58>)
 80029c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80029c2:	f000 fdbb 	bl	800353c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f810 	bl	80029ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <prvCheckTasksWaitingTermination+0x58>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e1      	bne.n	8002998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000bd8 	.word	0x20000bd8
 80029e4:	20000c04 	.word	0x20000c04
 80029e8:	20000bec 	.word	0x20000bec

080029ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 ff3a 	bl	800387c <vPortFree>
				vPortFree( pxTCB );
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 ff37 	bl	800387c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a0e:	e019      	b.n	8002a44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d103      	bne.n	8002a22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 ff2e 	bl	800387c <vPortFree>
	}
 8002a20:	e010      	b.n	8002a44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d00b      	beq.n	8002a44 <prvDeleteTCB+0x58>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	60fb      	str	r3, [r7, #12]
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <prvDeleteTCB+0x54>
	}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a52:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <prvResetNextTaskUnblockTime+0x38>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <prvResetNextTaskUnblockTime+0x3c>)
 8002a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002a64:	e008      	b.n	8002a78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <prvResetNextTaskUnblockTime+0x38>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <prvResetNextTaskUnblockTime+0x3c>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000bbc 	.word	0x20000bbc
 8002a88:	20000c24 	.word	0x20000c24

08002a8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <xTaskGetSchedulerState+0x34>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	e008      	b.n	8002ab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <xTaskGetSchedulerState+0x38>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	e001      	b.n	8002ab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002ab2:	687b      	ldr	r3, [r7, #4]
	}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000c10 	.word	0x20000c10
 8002ac4:	20000c2c 	.word	0x20000c2c

08002ac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d058      	beq.n	8002b90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002ade:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <xTaskPriorityDisinherit+0xd4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d00b      	beq.n	8002b00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	60fb      	str	r3, [r7, #12]
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	60bb      	str	r3, [r7, #8]
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b24:	1e5a      	subs	r2, r3, #1
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d02c      	beq.n	8002b90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d128      	bne.n	8002b90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3304      	adds	r3, #4
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fc1c 	bl	8001380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <xTaskPriorityDisinherit+0xd8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d903      	bls.n	8002b70 <xTaskPriorityDisinherit+0xa8>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <xTaskPriorityDisinherit+0xd8>)
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <xTaskPriorityDisinherit+0xdc>)
 8002b7e:	441a      	add	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fe fb9f 	bl	80012ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002b90:	697b      	ldr	r3, [r7, #20]
	}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000730 	.word	0x20000730
 8002ba0:	20000c0c 	.word	0x20000c0c
 8002ba4:	20000734 	.word	0x20000734

08002ba8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002bb2:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <prvAddCurrentTaskToDelayedList+0x90>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bb8:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fbde 	bl	8001380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d10a      	bne.n	8002be2 <prvAddCurrentTaskToDelayedList+0x3a>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4819      	ldr	r0, [pc, #100]	@ (8002c40 <prvAddCurrentTaskToDelayedList+0x98>)
 8002bdc:	f7fe fb75 	bl	80012ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002be0:	e026      	b.n	8002c30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bea:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d209      	bcs.n	8002c0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f7fe fb82 	bl	8001310 <vListInsert>
}
 8002c0c:	e010      	b.n	8002c30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7fe fb78 	bl	8001310 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c20:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d202      	bcs.n	8002c30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002c2a:	4a08      	ldr	r2, [pc, #32]	@ (8002c4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000c08 	.word	0x20000c08
 8002c3c:	20000730 	.word	0x20000730
 8002c40:	20000bf0 	.word	0x20000bf0
 8002c44:	20000bc0 	.word	0x20000bc0
 8002c48:	20000bbc 	.word	0x20000bbc
 8002c4c:	20000c24 	.word	0x20000c24

08002c50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	@ 0x28
 8002c54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002c5a:	f000 fb11 	bl	8003280 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <xTimerCreateTimerTask+0x84>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d021      	beq.n	8002caa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002c6e:	1d3a      	adds	r2, r7, #4
 8002c70:	f107 0108 	add.w	r1, r7, #8
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fae1 	bl	8001240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	9202      	str	r2, [sp, #8]
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2302      	movs	r3, #2
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	460a      	mov	r2, r1
 8002c90:	4911      	ldr	r1, [pc, #68]	@ (8002cd8 <xTimerCreateTimerTask+0x88>)
 8002c92:	4812      	ldr	r0, [pc, #72]	@ (8002cdc <xTimerCreateTimerTask+0x8c>)
 8002c94:	f7ff f8d2 	bl	8001e3c <xTaskCreateStatic>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a11      	ldr	r2, [pc, #68]	@ (8002ce0 <xTimerCreateTimerTask+0x90>)
 8002c9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <xTimerCreateTimerTask+0x90>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	613b      	str	r3, [r7, #16]
}
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002cc8:	697b      	ldr	r3, [r7, #20]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000c60 	.word	0x20000c60
 8002cd8:	08003b58 	.word	0x08003b58
 8002cdc:	08002e1d 	.word	0x08002e1d
 8002ce0:	20000c64 	.word	0x20000c64

08002ce4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <xTimerGenericCommand+0x30>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	623b      	str	r3, [r7, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <xTimerGenericCommand+0x98>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02a      	beq.n	8002d72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	dc18      	bgt.n	8002d60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002d2e:	f7ff fead 	bl	8002a8c <xTaskGetSchedulerState>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d109      	bne.n	8002d4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002d38:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <xTimerGenericCommand+0x98>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	f107 0110 	add.w	r1, r7, #16
 8002d40:	2300      	movs	r3, #0
 8002d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d44:	f7fe fc8c 	bl	8001660 <xQueueGenericSend>
 8002d48:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d4a:	e012      	b.n	8002d72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <xTimerGenericCommand+0x98>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	f107 0110 	add.w	r1, r7, #16
 8002d54:	2300      	movs	r3, #0
 8002d56:	2200      	movs	r2, #0
 8002d58:	f7fe fc82 	bl	8001660 <xQueueGenericSend>
 8002d5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d5e:	e008      	b.n	8002d72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <xTimerGenericCommand+0x98>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	f107 0110 	add.w	r1, r7, #16
 8002d68:	2300      	movs	r3, #0
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	f7fe fd7a 	bl	8001864 <xQueueGenericSendFromISR>
 8002d70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3728      	adds	r7, #40	@ 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000c60 	.word	0x20000c60

08002d80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8a:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <prvProcessExpiredTimer+0x98>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe faf1 	bl	8001380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	18d1      	adds	r1, r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	6978      	ldr	r0, [r7, #20]
 8002dba:	f000 f8d3 	bl	8002f64 <prvInsertTimerInActiveList>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff88 	bl	8002ce4 <xTimerGenericCommand>
 8002dd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d114      	bne.n	8002e06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	60fb      	str	r3, [r7, #12]
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	6978      	ldr	r0, [r7, #20]
 8002e0c:	4798      	blx	r3
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000c58 	.word	0x20000c58

08002e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002e24:	f107 0308 	add.w	r3, r7, #8
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f859 	bl	8002ee0 <prvGetNextExpireTime>
 8002e2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4619      	mov	r1, r3
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f805 	bl	8002e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002e3a:	f000 f8d5 	bl	8002fe8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002e3e:	bf00      	nop
 8002e40:	e7f0      	b.n	8002e24 <prvTimerTask+0x8>
	...

08002e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002e4e:	f7ff fa39 	bl	80022c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f864 	bl	8002f24 <prvSampleTimeNow>
 8002e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d130      	bne.n	8002ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <prvProcessTimerOrBlockTask+0x3c>
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d806      	bhi.n	8002e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002e72:	f7ff fa35 	bl	80022e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff81 	bl	8002d80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002e7e:	e024      	b.n	8002eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002e86:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <prvProcessTimerOrBlockTask+0x90>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <prvProcessTimerOrBlockTask+0x50>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <prvProcessTimerOrBlockTask+0x52>
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <prvProcessTimerOrBlockTask+0x94>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f7fe ff95 	bl	8001dd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002eaa:	f7ff fa19 	bl	80022e0 <xTaskResumeAll>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <prvProcessTimerOrBlockTask+0x98>)
 8002eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	f3bf 8f6f 	isb	sy
}
 8002ec4:	e001      	b.n	8002eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002ec6:	f7ff fa0b 	bl	80022e0 <xTaskResumeAll>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000c5c 	.word	0x20000c5c
 8002ed8:	20000c60 	.word	0x20000c60
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <prvGetNextExpireTime+0x40>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <prvGetNextExpireTime+0x16>
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	e000      	b.n	8002ef8 <prvGetNextExpireTime+0x18>
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <prvGetNextExpireTime+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e001      	b.n	8002f14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002f14:	68fb      	ldr	r3, [r7, #12]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20000c58 	.word	0x20000c58

08002f24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002f2c:	f7ff fa76 	bl	800241c <xTaskGetTickCount>
 8002f30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <prvSampleTimeNow+0x3c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d205      	bcs.n	8002f48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002f3c:	f000 f93a 	bl	80031b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e002      	b.n	8002f4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <prvSampleTimeNow+0x3c>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000c68 	.word	0x20000c68

08002f64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d812      	bhi.n	8002fb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e01b      	b.n	8002fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002f9e:	4b10      	ldr	r3, [pc, #64]	@ (8002fe0 <prvInsertTimerInActiveList+0x7c>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7fe f9b1 	bl	8001310 <vListInsert>
 8002fae:	e012      	b.n	8002fd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d206      	bcs.n	8002fc6 <prvInsertTimerInActiveList+0x62>
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e007      	b.n	8002fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <prvInsertTimerInActiveList+0x80>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7fe f99d 	bl	8001310 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002fd6:	697b      	ldr	r3, [r7, #20]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000c5c 	.word	0x20000c5c
 8002fe4:	20000c58 	.word	0x20000c58

08002fe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	@ 0x38
 8002fec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002fee:	e0ce      	b.n	800318e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da19      	bge.n	800302a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	61fb      	str	r3, [r7, #28]
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	e7fd      	b.n	8003016 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003020:	6850      	ldr	r0, [r2, #4]
 8003022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	4611      	mov	r1, r2
 8003028:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f2c0 80ae 	blt.w	800318e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	3304      	adds	r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f99c 	bl	8001380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003048:	463b      	mov	r3, r7
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff6a 	bl	8002f24 <prvSampleTimeNow>
 8003050:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b09      	cmp	r3, #9
 8003056:	f200 8097 	bhi.w	8003188 <prvProcessReceivedCommands+0x1a0>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <prvProcessReceivedCommands+0x78>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003089 	.word	0x08003089
 8003064:	08003089 	.word	0x08003089
 8003068:	08003089 	.word	0x08003089
 800306c:	080030ff 	.word	0x080030ff
 8003070:	08003113 	.word	0x08003113
 8003074:	0800315f 	.word	0x0800315f
 8003078:	08003089 	.word	0x08003089
 800307c:	08003089 	.word	0x08003089
 8003080:	080030ff 	.word	0x080030ff
 8003084:	08003113 	.word	0x08003113
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	b2da      	uxtb	r2, r3
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	18d1      	adds	r1, r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030a8:	f7ff ff5c 	bl	8002f64 <prvInsertTimerInActiveList>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d06c      	beq.n	800318c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d061      	beq.n	800318c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	441a      	add	r2, r3
 80030d0:	2300      	movs	r3, #0
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	2100      	movs	r1, #0
 80030d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030da:	f7ff fe03 	bl	8002ce4 <xTimerGenericCommand>
 80030de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d152      	bne.n	800318c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	61bb      	str	r3, [r7, #24]
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003110:	e03d      	b.n	800318e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	617b      	str	r3, [r7, #20]
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	e7fd      	b.n	8003146 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	18d1      	adds	r1, r2, r3
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003158:	f7ff ff04 	bl	8002f64 <prvInsertTimerInActiveList>
					break;
 800315c:	e017      	b.n	800318e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800316c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800316e:	f000 fb85 	bl	800387c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003172:	e00c      	b.n	800318e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003186:	e002      	b.n	800318e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <prvProcessReceivedCommands+0x1a6>
					break;
 800318c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800318e:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <prvProcessReceivedCommands+0x1c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1d39      	adds	r1, r7, #4
 8003194:	2200      	movs	r2, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fc02 	bl	80019a0 <xQueueReceive>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f af26 	bne.w	8002ff0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3730      	adds	r7, #48	@ 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000c60 	.word	0x20000c60

080031b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80031ba:	e049      	b.n	8003250 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003278 <prvSwitchTimerLists+0xc4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003278 <prvSwitchTimerLists+0xc4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe f8d3 	bl	8001380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02f      	beq.n	8003250 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90e      	bls.n	8003220 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800320e:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <prvSwitchTimerLists+0xc4>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3304      	adds	r3, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f7fe f879 	bl	8001310 <vListInsert>
 800321e:	e017      	b.n	8003250 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003220:	2300      	movs	r3, #0
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	2100      	movs	r1, #0
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fd5a 	bl	8002ce4 <xTimerGenericCommand>
 8003230:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	603b      	str	r3, [r7, #0]
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <prvSwitchTimerLists+0xc4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1b0      	bne.n	80031bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <prvSwitchTimerLists+0xc4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <prvSwitchTimerLists+0xc8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <prvSwitchTimerLists+0xc4>)
 8003266:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003268:	4a04      	ldr	r2, [pc, #16]	@ (800327c <prvSwitchTimerLists+0xc8>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	6013      	str	r3, [r2, #0]
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000c58 	.word	0x20000c58
 800327c:	20000c5c 	.word	0x20000c5c

08003280 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003286:	f000 f929 	bl	80034dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <prvCheckForValidListAndQueue+0x60>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d120      	bne.n	80032d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003292:	4814      	ldr	r0, [pc, #80]	@ (80032e4 <prvCheckForValidListAndQueue+0x64>)
 8003294:	f7fd ffee 	bl	8001274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003298:	4813      	ldr	r0, [pc, #76]	@ (80032e8 <prvCheckForValidListAndQueue+0x68>)
 800329a:	f7fd ffeb 	bl	8001274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800329e:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <prvCheckForValidListAndQueue+0x6c>)
 80032a0:	4a10      	ldr	r2, [pc, #64]	@ (80032e4 <prvCheckForValidListAndQueue+0x64>)
 80032a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80032a4:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <prvCheckForValidListAndQueue+0x70>)
 80032a6:	4a10      	ldr	r2, [pc, #64]	@ (80032e8 <prvCheckForValidListAndQueue+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80032aa:	2300      	movs	r3, #0
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <prvCheckForValidListAndQueue+0x74>)
 80032b0:	4a11      	ldr	r2, [pc, #68]	@ (80032f8 <prvCheckForValidListAndQueue+0x78>)
 80032b2:	2110      	movs	r1, #16
 80032b4:	200a      	movs	r0, #10
 80032b6:	f7fe f8f7 	bl	80014a8 <xQueueGenericCreateStatic>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a08      	ldr	r2, [pc, #32]	@ (80032e0 <prvCheckForValidListAndQueue+0x60>)
 80032be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <prvCheckForValidListAndQueue+0x60>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <prvCheckForValidListAndQueue+0x60>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	490b      	ldr	r1, [pc, #44]	@ (80032fc <prvCheckForValidListAndQueue+0x7c>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fd58 	bl	8001d84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032d4:	f000 f932 	bl	800353c <vPortExitCritical>
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000c60 	.word	0x20000c60
 80032e4:	20000c30 	.word	0x20000c30
 80032e8:	20000c44 	.word	0x20000c44
 80032ec:	20000c58 	.word	0x20000c58
 80032f0:	20000c5c 	.word	0x20000c5c
 80032f4:	20000d0c 	.word	0x20000d0c
 80032f8:	20000c6c 	.word	0x20000c6c
 80032fc:	08003b60 	.word	0x08003b60

08003300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3b04      	subs	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b04      	subs	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3b04      	subs	r3, #4
 800332e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003330:	4a08      	ldr	r2, [pc, #32]	@ (8003354 <pxPortInitialiseStack+0x54>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3b14      	subs	r3, #20
 800333a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3b20      	subs	r3, #32
 8003346:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	08003359 	.word	0x08003359

08003358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <prvTaskExitError+0x54>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d00b      	beq.n	8003384 <prvTaskExitError+0x2c>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	60fb      	str	r3, [r7, #12]
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <prvTaskExitError+0x28>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60bb      	str	r3, [r7, #8]
}
 8003396:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003398:	bf00      	nop
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0fc      	beq.n	800339a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033b0:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <pxCurrentTCBConst2>)
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6808      	ldr	r0, [r1, #0]
 80033b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033ba:	f380 8809 	msr	PSP, r0
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80033ce:	4770      	bx	lr

080033d0 <pxCurrentTCBConst2>:
 80033d0:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80033d8:	4806      	ldr	r0, [pc, #24]	@ (80033f4 <prvPortStartFirstTask+0x1c>)
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f380 8808 	msr	MSP, r0
 80033e2:	b662      	cpsie	i
 80033e4:	b661      	cpsie	f
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	df00      	svc	0
 80033f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80033f2:	bf00      	nop
 80033f4:	e000ed08 	.word	0xe000ed08

080033f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033fe:	4b32      	ldr	r3, [pc, #200]	@ (80034c8 <xPortStartScheduler+0xd0>)
 8003400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22ff      	movs	r2, #255	@ 0xff
 800340e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <xPortStartScheduler+0xd4>)
 8003424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003426:	4b2a      	ldr	r3, [pc, #168]	@ (80034d0 <xPortStartScheduler+0xd8>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800342c:	e009      	b.n	8003442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800342e:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <xPortStartScheduler+0xd8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	4a26      	ldr	r2, [pc, #152]	@ (80034d0 <xPortStartScheduler+0xd8>)
 8003436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d0ef      	beq.n	800342e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800344e:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <xPortStartScheduler+0xd8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00b      	beq.n	8003472 <xPortStartScheduler+0x7a>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60bb      	str	r3, [r7, #8]
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003472:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <xPortStartScheduler+0xd8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	4a15      	ldr	r2, [pc, #84]	@ (80034d0 <xPortStartScheduler+0xd8>)
 800347a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <xPortStartScheduler+0xd8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003484:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <xPortStartScheduler+0xd8>)
 8003486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003490:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <xPortStartScheduler+0xdc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	@ (80034d4 <xPortStartScheduler+0xdc>)
 8003496:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800349a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800349c:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <xPortStartScheduler+0xdc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0c      	ldr	r2, [pc, #48]	@ (80034d4 <xPortStartScheduler+0xdc>)
 80034a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80034a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80034a8:	f000 f8b8 	bl	800361c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <xPortStartScheduler+0xe0>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80034b2:	f7ff ff91 	bl	80033d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80034b6:	f7ff f879 	bl	80025ac <vTaskSwitchContext>
	prvTaskExitError();
 80034ba:	f7ff ff4d 	bl	8003358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	e000e400 	.word	0xe000e400
 80034cc:	20000d5c 	.word	0x20000d5c
 80034d0:	20000d60 	.word	0x20000d60
 80034d4:	e000ed20 	.word	0xe000ed20
 80034d8:	2000000c 	.word	0x2000000c

080034dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	607b      	str	r3, [r7, #4]
}
 80034f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <vPortEnterCritical+0x58>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003534 <vPortEnterCritical+0x58>)
 80034fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003500:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <vPortEnterCritical+0x58>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d110      	bne.n	800352a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <vPortEnterCritical+0x5c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <vPortEnterCritical+0x4e>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	603b      	str	r3, [r7, #0]
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	e7fd      	b.n	8003526 <vPortEnterCritical+0x4a>
	}
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	2000000c 	.word	0x2000000c
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <vPortExitCritical+0x50>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <vPortExitCritical+0x26>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <vPortExitCritical+0x50>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a08      	ldr	r2, [pc, #32]	@ (800358c <vPortExitCritical+0x50>)
 800356a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800356c:	4b07      	ldr	r3, [pc, #28]	@ (800358c <vPortExitCritical+0x50>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <vPortExitCritical+0x44>
 8003574:	2300      	movs	r3, #0
 8003576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f383 8811 	msr	BASEPRI, r3
}
 800357e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	2000000c 	.word	0x2000000c

08003590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003590:	f3ef 8009 	mrs	r0, PSP
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <pxCurrentTCBConst>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035a0:	6010      	str	r0, [r2, #0]
 80035a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80035a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80035aa:	f380 8811 	msr	BASEPRI, r0
 80035ae:	f7fe fffd 	bl	80025ac <vTaskSwitchContext>
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f380 8811 	msr	BASEPRI, r0
 80035ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	6808      	ldr	r0, [r1, #0]
 80035c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035c6:	f380 8809 	msr	PSP, r0
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	4770      	bx	lr

080035d0 <pxCurrentTCBConst>:
 80035d0:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	607b      	str	r3, [r7, #4]
}
 80035f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80035f2:	f7fe ff21 	bl	8002438 <xTaskIncrementTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <xPortSysTickHandler+0x40>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f383 8811 	msr	BASEPRI, r3
}
 800360e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <vPortSetupTimerInterrupt+0x30>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <vPortSetupTimerInterrupt+0x34>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <vPortSetupTimerInterrupt+0x38>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a09      	ldr	r2, [pc, #36]	@ (8003658 <vPortSetupTimerInterrupt+0x3c>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	4a08      	ldr	r2, [pc, #32]	@ (800365c <vPortSetupTimerInterrupt+0x40>)
 800363a:	3b01      	subs	r3, #1
 800363c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800363e:	4b03      	ldr	r3, [pc, #12]	@ (800364c <vPortSetupTimerInterrupt+0x30>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	e000e010 	.word	0xe000e010
 8003650:	e000e018 	.word	0xe000e018
 8003654:	20000000 	.word	0x20000000
 8003658:	10624dd3 	.word	0x10624dd3
 800365c:	e000e014 	.word	0xe000e014

08003660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003666:	f3ef 8305 	mrs	r3, IPSR
 800366a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d915      	bls.n	800369e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003672:	4a17      	ldr	r2, [pc, #92]	@ (80036d0 <vPortValidateInterruptPriority+0x70>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800367c:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <vPortValidateInterruptPriority+0x74>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	7afa      	ldrb	r2, [r7, #11]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20b      	bcs.n	800369e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	607b      	str	r3, [r7, #4]
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	e7fd      	b.n	800369a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <vPortValidateInterruptPriority+0x78>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <vPortValidateInterruptPriority+0x7c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90b      	bls.n	80036c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	603b      	str	r3, [r7, #0]
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <vPortValidateInterruptPriority+0x62>
	}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	e000e3f0 	.word	0xe000e3f0
 80036d4:	20000d5c 	.word	0x20000d5c
 80036d8:	e000ed0c 	.word	0xe000ed0c
 80036dc:	20000d60 	.word	0x20000d60

080036e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80036ec:	f7fe fdea 	bl	80022c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80036f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <pvPortMalloc+0x184>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80036f8:	f000 f924 	bl	8003944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003868 <pvPortMalloc+0x188>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	f040 8095 	bne.w	8003834 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01e      	beq.n	800374e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003710:	2208      	movs	r2, #8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	2b00      	cmp	r3, #0
 8003720:	d015      	beq.n	800374e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f023 0307 	bic.w	r3, r3, #7
 8003728:	3308      	adds	r3, #8
 800372a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <pvPortMalloc+0x6e>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	617b      	str	r3, [r7, #20]
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d06f      	beq.n	8003834 <pvPortMalloc+0x154>
 8003754:	4b45      	ldr	r3, [pc, #276]	@ (800386c <pvPortMalloc+0x18c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d86a      	bhi.n	8003834 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800375e:	4b44      	ldr	r3, [pc, #272]	@ (8003870 <pvPortMalloc+0x190>)
 8003760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003762:	4b43      	ldr	r3, [pc, #268]	@ (8003870 <pvPortMalloc+0x190>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003768:	e004      	b.n	8003774 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d903      	bls.n	8003786 <pvPortMalloc+0xa6>
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f1      	bne.n	800376a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003786:	4b37      	ldr	r3, [pc, #220]	@ (8003864 <pvPortMalloc+0x184>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	429a      	cmp	r2, r3
 800378e:	d051      	beq.n	8003834 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	4413      	add	r3, r2
 8003798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	2308      	movs	r3, #8
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d920      	bls.n	80037f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <pvPortMalloc+0xfc>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	613b      	str	r3, [r7, #16]
}
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037ee:	69b8      	ldr	r0, [r7, #24]
 80037f0:	f000 f90a 	bl	8003a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <pvPortMalloc+0x18c>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	4a1b      	ldr	r2, [pc, #108]	@ (800386c <pvPortMalloc+0x18c>)
 8003800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003802:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <pvPortMalloc+0x18c>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b1b      	ldr	r3, [pc, #108]	@ (8003874 <pvPortMalloc+0x194>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d203      	bcs.n	8003816 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800380e:	4b17      	ldr	r3, [pc, #92]	@ (800386c <pvPortMalloc+0x18c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <pvPortMalloc+0x194>)
 8003814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <pvPortMalloc+0x188>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	431a      	orrs	r2, r3
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800382a:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <pvPortMalloc+0x198>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a11      	ldr	r2, [pc, #68]	@ (8003878 <pvPortMalloc+0x198>)
 8003832:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003834:	f7fe fd54 	bl	80022e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <pvPortMalloc+0x17a>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	60fb      	str	r3, [r7, #12]
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	e7fd      	b.n	8003856 <pvPortMalloc+0x176>
	return pvReturn;
 800385a:	69fb      	ldr	r3, [r7, #28]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	@ 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	2000196c 	.word	0x2000196c
 8003868:	20001980 	.word	0x20001980
 800386c:	20001970 	.word	0x20001970
 8003870:	20001964 	.word	0x20001964
 8003874:	20001974 	.word	0x20001974
 8003878:	20001978 	.word	0x20001978

0800387c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04f      	beq.n	800392e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800388e:	2308      	movs	r3, #8
 8003890:	425b      	negs	r3, r3
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4413      	add	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <vPortFree+0xbc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <vPortFree+0x46>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	60fb      	str	r3, [r7, #12]
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <vPortFree+0x66>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	60bb      	str	r3, [r7, #8]
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	e7fd      	b.n	80038de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <vPortFree+0xbc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01e      	beq.n	800392e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11a      	bne.n	800392e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <vPortFree+0xbc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	43db      	mvns	r3, r3
 8003902:	401a      	ands	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003908:	f7fe fcdc 	bl	80022c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <vPortFree+0xc0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4413      	add	r3, r2
 8003916:	4a09      	ldr	r2, [pc, #36]	@ (800393c <vPortFree+0xc0>)
 8003918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800391a:	6938      	ldr	r0, [r7, #16]
 800391c:	f000 f874 	bl	8003a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <vPortFree+0xc4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a06      	ldr	r2, [pc, #24]	@ (8003940 <vPortFree+0xc4>)
 8003928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800392a:	f7fe fcd9 	bl	80022e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20001980 	.word	0x20001980
 800393c:	20001970 	.word	0x20001970
 8003940:	2000197c 	.word	0x2000197c

08003944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800394a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800394e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <prvHeapInit+0xac>)
 8003952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3307      	adds	r3, #7
 8003962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <prvHeapInit+0xac>)
 8003974:	4413      	add	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800397c:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <prvHeapInit+0xb0>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003982:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <prvHeapInit+0xb0>)
 8003984:	2200      	movs	r2, #0
 8003986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4413      	add	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003990:	2208      	movs	r2, #8
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0307 	bic.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <prvHeapInit+0xb4>)
 80039a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80039a6:	4b14      	ldr	r3, [pc, #80]	@ (80039f8 <prvHeapInit+0xb4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80039ae:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <prvHeapInit+0xb4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <prvHeapInit+0xb4>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <prvHeapInit+0xb8>)
 80039d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <prvHeapInit+0xbc>)
 80039da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <prvHeapInit+0xc0>)
 80039de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000d64 	.word	0x20000d64
 80039f4:	20001964 	.word	0x20001964
 80039f8:	2000196c 	.word	0x2000196c
 80039fc:	20001974 	.word	0x20001974
 8003a00:	20001970 	.word	0x20001970
 8003a04:	20001980 	.word	0x20001980

08003a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a10:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <prvInsertBlockIntoFreeList+0xa8>)
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e002      	b.n	8003a1c <prvInsertBlockIntoFreeList+0x14>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d8f7      	bhi.n	8003a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4413      	add	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d108      	bne.n	8003a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	441a      	add	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	441a      	add	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d118      	bne.n	8003a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <prvInsertBlockIntoFreeList+0xac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d00d      	beq.n	8003a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e008      	b.n	8003a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <prvInsertBlockIntoFreeList+0xac>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e003      	b.n	8003a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d002      	beq.n	8003aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	20001964 	.word	0x20001964
 8003ab4:	2000196c 	.word	0x2000196c

08003ab8 <memset>:
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4402      	add	r2, r0
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <memset+0xa>
 8003ac0:	4770      	bx	lr
 8003ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac6:	e7f9      	b.n	8003abc <memset+0x4>

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	2600      	movs	r6, #0
 8003acc:	4d0c      	ldr	r5, [pc, #48]	@ (8003b00 <__libc_init_array+0x38>)
 8003ace:	4c0d      	ldr	r4, [pc, #52]	@ (8003b04 <__libc_init_array+0x3c>)
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	42a6      	cmp	r6, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	f000 f828 	bl	8003b2c <_init>
 8003adc:	2600      	movs	r6, #0
 8003ade:	4d0a      	ldr	r5, [pc, #40]	@ (8003b08 <__libc_init_array+0x40>)
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8003b0c <__libc_init_array+0x44>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	42a6      	cmp	r6, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af0:	4798      	blx	r3
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afa:	4798      	blx	r3
 8003afc:	3601      	adds	r6, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	08003b8c 	.word	0x08003b8c
 8003b04:	08003b8c 	.word	0x08003b8c
 8003b08:	08003b8c 	.word	0x08003b8c
 8003b0c:	08003b90 	.word	0x08003b90

08003b10 <memcpy>:
 8003b10:	440a      	add	r2, r1
 8003b12:	4291      	cmp	r1, r2
 8003b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b18:	d100      	bne.n	8003b1c <memcpy+0xc>
 8003b1a:	4770      	bx	lr
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b28:	d1f9      	bne.n	8003b1e <memcpy+0xe>
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <_init>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr

08003b38 <_fini>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr
